||| Copyright (C) 1998-2007, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| shadow CDU version, handle port properly
|| ==============================
|| TODO: incorporate into next CDU release

|| for ConnectionPreconditions
{import SocketInetAddress, DataTCPSocket, SocketException
 from CURL.IO.SOCKET}

{define-proc public {test-host-accessible-guard host:String}:TestCase
    {return
        {SimpleTestCase host,
            {proc {}:void
                {if not {host-available? host} then
                    {TestCondition.terminate message = {lmessage host unavailable: {value host}}}}
            }}
    }
}
{define-proc public {host-available? 
                        address:String, 
                        timeout:Time = 5s
                    }:bool
    def parts = {address.split split-chars = ":"}
    def (remote-address, remote-port) =
        {switch parts.size
         case 1 do
            (address, 80)
         case 2 do
            def port = {parts[1].to-int}
            (parts[0], port)
         else {error {lmessage Malformed address: '{value address}'}}}
    {return
        {try
            || attempt connection
            let socket:DataTCPSocket =
                {DataTCPSocket 
                    remote-address = {SocketInetAddress remote-address},
                    remote-port = remote-port asa uint16,
                    timeout = timeout}
            {socket.start-connect}
            {socket.finish-connect}
            {socket.close}
            true
         catch e:SocketException do
            false}}
}

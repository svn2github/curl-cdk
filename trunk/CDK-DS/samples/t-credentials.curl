||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 7.0 applet}
{applet manifest = "manifest.mcurl",
    {compiler-directives careful? = true}}

{import * from COM.CURL.CDK.RPC}
{import * from COM.CURL.CDK.AMF}
{import * from COM.CURL.CDK.MESSAGING}
 
|| sample
|| --------------------
{document-style PlainDocument}
{set-document-properties
    valign = "center",
    halign = "center"
}
{value
    || configuration parameters
    def destination = "AccountBalanceDestination"
    def endpoint = {url "http://localhost:8080/examples/flex/remoting/basicinvoke/weborb.wo"}

    || balance service
    def service =
        {RemoteObject 
            endpoint,
            destination,
            channel-set =
                {ChannelSet
                    channel =
                        {AMFChannel
                            id = destination,
                            uri = endpoint}
                },
            {on e:FaultEvent do
                def f = e.fault
                def msg = {message Fault Code: {value f.fault-code} '{value f.fault-string}'}
                {popup-message msg}}}
    
    def check-balance-button =
        {CommandButton
            label = {message Check Balance},
            cursor = cursor-hand,
            control-color = "#DDD",
            {on Action do
                {service.send "CheckBalance"}
            }
        }
    , login-button =
        {CommandButton
            label = {message Login},
            cursor = cursor-hand,
            control-color = "#DDD",
            {on Action do
                || TODO: Dialog
                {service.login "testuser", "password"}
                {note-login-status true}
            }
        }
    , logout-button =
        {CommandButton
            label = {message Logout},
            cursor = cursor-hand,
            control-color = "#DDD",
            {on Action do
                || TODO: logout not implemented
                {service.logout}
                {note-login-status false}
            }
        }
    , note-login-status =
        {proc {logged-in?:bool}:void
            {if logged-in? then
                set login-button.height = 0pt
                {unset logout-button.height}
                {login-status.add replace? = true,
                    {message Logged In}}
             else
                set logout-button.height = 0pt
                {unset login-button.height}
                {login-status.add replace? = true,
                    {message Not Logged In}}
            }}
    , login-status =
        {Frame
            color = "red",
            font-weight = "bold"}
    , result-display =
        {TextDisplay
            width = .75in,            
            background = "#B1BFC5"}
   
    || coordination
    || --------------------
    {note-login-status false}
    {service.add-event-handler
        {on e:ResultEvent do
            set result-display.value = {String e.result}
        }}

    || layout
    || --------------------
    {Dialog
        width = 4in,
        halign = "center",
        margin = 9pt,
        background =
            {LinearGradientFillPattern {Fraction2d 0, 1}, {Fraction2d 0, 0},
                {Spectrum.from-endpoints "#6D838E", "#94AAB5"}},
        {VBox
            width = {make-elastic},
            halign = "center",
            background = "#B1BFC5",
            margin = 9pt,
            spacing = 6pt,
            {bold Remoting Security Example},
            {VBox
                width = {make-elastic},
                halign = "center",
                background = "white",
                margin = 9pt,
                spacing = 6pt,
                {GroupBox label = {message Checking Account},
                    control-color = "white",
                    {VBox
                        halign = "center",
                        margin = 9pt,
                        spacing = 12px,
                        check-balance-button,
                        {HBox
                            spacing = 6px,
                            {message Account Balance: },
                            result-display}}},
                {HBox
                    spacing = 6px,
                    {message Current Status: },
                    login-status},
                login-button,
                logout-button
            }}}
}

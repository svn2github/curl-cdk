||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public MultiTopicProducer {inherits AbstractProducer}

  field private _subtopics:Array

  {constructor public {default
                          endpoint:#Url = null,
                          destination:String = "",
                          channel-set:#ChannelSet = null,
                          subtopics:Array = {Array},
                          ...:EventHandler
                      }
    {construct-super
        endpoint = endpoint,
        destination = destination,
        channel-set = channel-set,
        ...
    }
    set self._subtopics = subtopics
  }

  {getter public {subtopics}:Array
    {return self._subtopics}
  }

  {setter public {subtopics val:Array}:void
    {if self._subtopics != val then
        def event = {PropertyChangeEvent.create-update-event
                        self,
                        "subtopics",
                        self._subtopics,
                        val
                    }
        set self._subtopics = val
        {self.enqueue-event event}
    }
  }

  {method public {add-subtopic topic:String}:void
    {self._subtopics.append topic}
  }

  {method public {remove-subtopic subtopic:String}:void
    def idx = {self._subtopics.find subtopic}
    {if idx == -1 then
        {error
            {lmessage
                Attempt to remove a subtopic from MultiTopicProducer:
                {value subtopic} which does not exist}}
    }
    {self._subtopics.remove idx}
  }

  {method protected {internal-send
                        message:IMessage,
                        wait-for-client-id?:bool = true
                    }:void
    {if self._subtopics.size > 0 then
        set message.headers[AsyncMessage.SUBTOPIC_HEADER] = self._subtopics
    }
    {super.internal-send message, wait-for-client-id? = wait-for-client-id?}
  }
}

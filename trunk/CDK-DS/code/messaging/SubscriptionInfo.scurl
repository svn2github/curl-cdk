||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public SubscriptionInfo
  field public constant subtopic:String
  field public constant selector:String

  {constructor public {default
                          subtopic:String = "",
                          selector:String = ""
                      }
    set self.subtopic = subtopic
    set self.selector = selector
  }
}


{define-class public SubscriptionInfos {inherits EventTarget}
  field private data:{Array-of SubscriptionInfo}

  {constructor public {default ...:SubscriptionInfo}
    set self.data = {{Array-of SubscriptionInfo}
                        ...
                    }
  }

  {getter public {size}:int
    {return self.data.size}
  }

  {getter public {empty?}:bool
    {return self.data.empty?}
  }

  {method public {get index:int}:SubscriptionInfo
    {return self.data[index]}
  }

  {method public {get-if-exists
                     index:int
                 }:(value:SubscriptionInfo, found?:bool)
    {return {self.data.get-if-exists index}}
  }

  {method public {append info:SubscriptionInfo}:void
    {self.data.append info}
    {self.enqueue-event {SubscriptionInfosChanged}}
  }

  {method public {remove
                     info:SubscriptionInfo,
                     error-if-missing?:bool = true
                 }:void
    {self.remove-by-str
        subtopic = info.subtopic,
        selector = info.selector,
        error-if-missing? = error-if-missing?
    }
  }

  {method public {remove-by-str
                     subtopic:String = "",
                     selector:String = "",
                     error-if-missing?:bool = true
                 }:void
    {for si key i in self.data do
        {if si.subtopic == subtopic and si.selector == selector then
            {self.data.remove i}
            {self.enqueue-event {SubscriptionInfosChanged}}
            {return}
        }
    }
    {if error-if-missing? then
        def key = subtopic & CommandMessage.SUBTOPIC_SEPARATOR & selector
        {throw
            {KeyNotFoundException
                obj = self,
                key = key,
                "Key " & key & " not found"
            }
        }
    }
  }

  {method public {clear}:void
    {self.data.clear}
    {self.enqueue-event {SubscriptionInfosChanged}}
  }

  {method public {keys-to-Iterator}:{Iterator-of int}
    {return {self.data.keys-to-Iterator}}
  }

  {method public {to-Iterator}:{Iterator-of SubscriptionInfo}
    {return {self.data.to-Iterator}}
  }
}

{define-class public SubscriptionInfosChanged {inherits Event}
  {constructor public {default}
    {construct-super}
  }
}

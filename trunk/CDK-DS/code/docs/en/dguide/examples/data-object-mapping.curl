||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 7.0 applet}
{applet manifest = "../manifest.mcurl",
   {compiler-directives careful? = true}}
{import * from COM.CURL.CDK.DATA-OBJECT}
{import * from COM.CURL.CDK.AMF}

|| data class
|| --------------------
{define-class public Product
  field public category:any
  field public price:double
  field public description:String
  field public name:String
  field public qty-in-stock:int
  field public image:#String
  field public product-id:int
  {constructor public {default
                          category:any = "",
                          price:double = 0.0,
                          description:String = "",
                          name:String = "",
                          qty-in-stock:int = 0,
                          image:#String = null,
                          product-id:int = 0
                      }
    set self.category = category
    set self.price = price
    set self.description = description
    set self.name = name
    set self.qty-in-stock = qty-in-stock
    set self.image = image
    set self.product-id = product-id
  }
  || AMF metadata
  def public traits =
      {DataObjectTraits
        "flex.samples.product.Product",
        {StringArray
            "product-id",
            "name",
            "description",
            "image",
            "category",
            "price",
            "qty-in-stock"},
        dynamic? = false}
}

|| simulated server round trip
|| --------------------
{define-proc public {AMF-round-trip val:any,
                        mapper:AMFObjectAdapters = AMFObjectAdapters.standard 
                    }:any
    def bytes = {ByteArray}
    def out =
        {AMF3Serializer mapper = mapper,
            {ByteArrayOutputStream bytes}}
    def in =
        {AMF3Deserializer mapper = mapper,
            {ByteArrayInputStream bytes}}
    {out.write-one val}
    def result = {in.read-one}
    {return result}
}
||--|| global registration
||--{AMFObjectAdapters.standard.register-class Product}

{value
    || original data object
    def obj1 =
        {DataObject traits = Product.traits,
            product-id = 1,
            name = "Nokia 3100 Blue",
            category = "9000",
            price = 109.0,
            description = "whatever"}
    
    || local registration
    def mapper = {AMFObjectAdapters}
    {mapper.register-class Product}

    || after round trip
    def obj2 =
        {AMF-round-trip
            mapper = mapper,
            obj1}
    
    {VBox obj1, obj2}
}
            

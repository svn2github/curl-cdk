||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 7.0, 8.0 applet}

{applet manifest = "manifest.mcurl"}

{import * from CURL.DOC.CONTENT.ACCESSORIES}
{import * from COM.CURL.CDK.SAMPLES-SUPPORT}

{{get-the-applet}.set-title "CDK-DS Test Drive"}
{VBox
    outside-margin = {OffsetSpec left = 2.5cm, right = 2.5cm, top = 0.7cm},
    spacing = 0.2cm,
    {heading CDK-DS Test Drive},
    {br},
    {paragraph
        In this test drive, based on the BlazeDS Flex test drive, you run a
        series of short sample applications that demonstrate the key features of
        CDK-DS using a BlazeDS server. We walk you through the source code of
        each application to highlight the key points of its implementation.
    },
    {paragraph
        The source code for the Test Drive applications is available in each
        sample's directory, and can be viewed in any text editor.
    },
    {br},
    {br},
    {br},
    {heading level = 3,
        {text color = "#004477", Sample 1: Accessing data using Remoting}
    },
    {br},
    {bold Run the sample:},
    {br},
    {enumerate
        {item
            Click
            {clink
                href = {url "testdrive-remoteobject/s-remoteobject.curl"},
                here
            }
            to run the application
        }
        {item
            Click "Get Data": The DataGrid is populated with data returned by
            the getProducts() method of the ProductService Java class.
        }
    },
    {br},
    {br},
    {br},
    {bold Code walkthrough:},
    {paragraph
        Open testdrive-remoteobject/s-remoteobject.curl to look at the source
        code of the application.
    },
    {paragraph
        You can also open the following files in a text editor to look at the
        source code for the server side of the application:
        {itemize
            {item
                [installdir]/tomcat/webapps/samples/WEB-INF/src/flex/samples/product/ProductService.java
            }
            {item
                [installdir]/tomcat/webapps/samples/WEB-INF/flex/remoting-config.xml
            }
        }
    },
    {paragraph
        The application file specifies the destination and endpoint to
        instantiate a RemoteObject. A call to getProducts() is made when you
        click on the "Get Data" button. An event handler on the operation
        populates a RecordGrid with a RecordSet derived from the result.
    },
    {br},
    {bold More info:},
    {itemize
        {item The RemoteObject calls are asynchronous.}
        {item
            Using RemoteObject, you can directly invoke methods of Java objects
            deployed in your application server, and consume the return value.
            The return value can be a value of a primitive data type, an object,
            a collection of objects, an object graph, etc.
        }
        {item
            The value of the destination property of RemoteObject is a logical
            name that is mapped to a fully qualified java class in
            remoting-config.xml.
        }
    },
    {hrule color = "silver"},
    {heading level = 3,
        {text color = "#004477", Sample 2: Curl Programming Model 101}
    },
    {br},
    {bold Run the sample:},
    {br},
    {enumerate
        {item
            Click
            {clink
                href = {url "testdrive-101/s-101.curl"},
                here
            }
            to run the application
        }
        {item
            Click a phone in the list: the details for the selected phone
            appear in the right panel
        }
    },
    {br},
    {br},
    {br},
    {bold Code walkthrough:},
    {paragraph
        Open the following files in the testdrive-101/ directory to look at the
        source code of the application:
        {itemize
            {item s-101.curl}
            {item TileSelector.scurl}
        }
    },
    {paragraph
        Curl is an object-oriented language that fully supports markup and
        scripting. This distinguishes it from other development platforms in
        that you do not have to cobble together your application using several
        different languages. You can develop your models, views, controllers
        (or any design pattern), along with markup, behaviors, or whatever your
        application needs, all in Curl.
    },
    {paragraph
        In this sample, there is a user-defined class called TileSelector which
        encapsulates the presentation characteristics of the phone catalog. The
        TileSelector class uses a variety of Curl graphical components, and
        demonstrates event handling for value changes and selection.
    },
    {paragraph
        The main application file, s-101.curl, demonstrates markup,
        presentation, data-binding, and scripted behavior in response to
        various events.
    },
    {paragraph
        Also note that Curl supports style sheets, a simple but powerful way to
        apply your own look and feel to your applications. The use of style
        sheets also allows graphic designers to work independently of, and in
        parallel with application developers.
    },
    {br},
    {hrule color = "silver"},
    {heading level = 3,
        {text color = "#004477", Sample 3: Updating Data}
    },
    {br},
    {bold Run the sample:},
    {br},
    {enumerate
        {item
            Click
            {clink
                href = {url "testdrive-update/s-update.curl"},
                here
            }
            to run the application
        }
        {item Select a phone}
        {item Modify some data in the right panel. For example, the price.}
        {item
            Click Update: changes are sent to the back-end and persisted in the
            database by the ProductService class.
        }
    },
    {br},
    {br},
    {br},
    {bold Code walkthrough:},
    {paragraph
        Open the following files in the testdrive-update/ directory to look at
        the source code of the application:
        {itemize
            {item s-update.curl}
            {item ProductForm.scurl}
            {item Product.scurl}
        }
    },
    {paragraph
        You can also open the following files in a text editor to look at the
        source code for the server side of the application:
        {itemize
            {item
                [installdir]/tomcat/webapps/samples/WEB-INF/src/flex/samples/product/ProductService.java
            }
            {item
                [installdir]/tomcat/webapps/samples/WEB-INF/flex/remoting-config.xml
            }
        }
    },
    {paragraph
        In s-update.curl the \{adapters.register-package\} method is used to
        register data object classes in this Curl package with data objects sent
        from the server. As a result, Product objects returned by the
        getProducts() method of ProductService are deserialized into instances
        of the Curl Product class. Similarly, the instance of the Curl Product
        class passed as an argument to the update method of the RemoteObject is
        deserialized into an instance of the Java version of the Product class
        at the server-side.
    },
    {br},
    {hrule color = "silver"},
    {heading level = 3,
        {text color = "#004477",
            Sample 4: Publish/Subscribe Messaging (Data Push Use Case)
        }
    },
    {br},
    {bold Run the sample:},
    {br},
    {text
        In this example, a Java component publishes simulated real time values
        to a message queue. The Curl client subscribes to that queue and
        displays the values in real time.
    },
    {br},
    {enumerate
        {item
            To start the feed component at the server-side, access:
            {clink href = {url "../samples/testdrive-datapush/startfeed.jsp"},
                samples/testdrive-datapush/startfeed.jsp
            }
        }
        {item
            Click
            {clink
                href = {url "testdrive-datapush/s-datapush.curl"},
                here
            }
            to run the application
        }
        {item
            Click the "Subscribe to 'feed' destination" button: Pushed values
            appear in the text field
        }
        {item
            To stop the feed when you are done experimenting with the
            application, access:
            {clink href = {url "../samples/testdrive-datapush/stopfeed.jsp"},
                samples/testdrive-datapush/stopfeed.jsp
            }
        }
    },
    {br},
    {br},
    {br},
    {bold Code walkthrough:},
    {paragraph
        Open testdrive-datapush/s-datapush.curl to look at the source code of
        the application.
    },
    {paragraph
        You can also open the following files in a text editor to look at the
        source code for the server side of the application:
        {itemize
            {item
                [installdir]/tomcat/webapps/samples/WEB-INF/src/flex/samples/feed/Feed.java
            }
            {item
                [installdir]/tomcat/webapps/samples/WEB-INF/flex/messaging-config.xml
            }
        }
    },
    {paragraph
        This sample sets up a Consumer which allows the user to subscribe to or
        unsubscribe from a message service. When the service feed is running,
        and the application is subscribed to it, the Consumer receives
        MessageEvents indicating that a message has been published by the feed
        and delivered to the Consumer. The Curl application extracts the message
        from the MessageEvent and displays it.
    },
    {br},
    {bold More info:},
    {itemize
        {item The Publish/Subscribe samples use polling.}
    },
    {br},
    {hrule color = "silver"},
    {heading level = 3,
        {text color = "#004477",
            Sample 5: Publish/Subscribe Messaging (Collaboration Use Case)
        }
    },
    {br},
    {bold Run the sample:},
    {br},
    {enumerate
        {item
            Click
            {clink
                href = {url "testdrive-chat/s-chat.curl"},
                here
            }
            to run the application
        }
        {item
            Open the same URL in another browser session to open a second
            instance of the chat application
        }
        {item
            Type a message in one of the chat clients and click "Send": the
            message appears in the two chat clients
        }
    },
    {br},
    {br},
    {br},
    {bold Code walkthrough:},
    {paragraph
        Open testdrive-chat/s-chat.curl to look at the source code of the
        application.
    },
    {paragraph
        You can also open the following file in a text editor to look at some of
        the configuration code for the server side of the application:
        {itemize
            {item
                [installdir]/tomcat/webapps/samples/WEB-INF/flex/messaging-config.xml
            }
        }
    },
    {paragraph
        This sample builds on the concepts and APIs introduced in the previous
        example. To publish a message from a client, you use the \{send\} method
        of the Producer class.
    },
    {br},
    {bold More info:},
    {itemize
        {item The Publish/Subscribe samples use polling.}
    },
    {br},
    {hrule color = "silver"}
}

||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 7.0 applet}

{applet manifest = "../manifest.mcurl"}

{import * from COM.CURL.CDK.RPC}
{import * from COM.CURL.CDK.AMF}
{import * from COM.CURL.CDK.DATA-OBJECT}
{import * from COM.CURL.CDK.MESSAGING}
{import * from COM.CURL.CDK.SAMPLES-SUPPORT}

{document-style PlainDocument}

{set-document-properties
    hstretch? = true,
    vstretch? = true,
    background = {LinearGradientFillPattern
                     {Fraction2d 0, 0},
                     {Fraction2d 0, 1},
                     {Spectrum.from-endpoints
                         "white",
                         "#e6e6e6"
                     }
                 },
    margin = 0.5cm
}

{do
    set {prefs}["selected-ui-background"] = "#7fceff"
    set {prefs}["selected-ui-color"] = "black"
    {{get-the-applet}.set-title "Testdrive - RemoteObject"}
}

{define-proc {present-result items:ArrayCollection}:Graphic
    def rg =
        {RecordGrid
            width = {add-stretch},
            height = {add-stretch},
            cell-spec = PointerHandlerRecordGridCell,
            header-options =
                {RecordGridRowOptions
                    background =
                        {LinearGradientFillPattern
                            {Fraction2d 1, 1},
                            {Fraction2d 1, 0},
                            {Spectrum.from-endpoints
                                "#eaeaea",
                                "white"
                            }
                        }
                },
            {RecordGridColumn
                "category",
                width = {make-elastic preferred-size = 1m}
            },
            {RecordGridColumn
                "description",
                width = {make-elastic preferred-size = 1m}
            },
            {RecordGridColumn
                "image",
                width = {make-elastic preferred-size = 1m}
            },
            {RecordGridColumn
                "name",
                width = {make-elastic preferred-size = 1m}
            },
            {RecordGridColumn
                "price",
                format-spec = "%0.2f",
                width = {make-elastic preferred-size = 1m}
            },
            {RecordGridColumn
                "productId",
                width = {make-elastic preferred-size = 1m}
            },
            {RecordGridColumn
                "qtyInStock",
                width = {make-elastic preferred-size = 1m}
            }
        }
    {if items.size > 0 then
        || specify recordset
        def typical = items[0] asa DataObject
        def traits = typical.traits
        def rs = {DataObjectRecordSet traits, type-info = typical}
        || populate recordset
        {for x in items do
            def item = x asa DataObject
            {rs.append item}
        }
        {rs.commit}
        || refresh display
        set rg.record-source = rs
    }
    {after 0s do
        {rg.select-nothing}
    }
    {return rg}
}
|| This applet replicates the functionality found in the BlazeDS
|| testdrive-remoteobject sample.
{value
    {install-style-sheet {manifest-url "file", "CDK-DS-SAMPLES-STYLE-SHEET"}}

    def grid-frame =
        {Frame
            style-class = "grid-frame",
            {Fill}
        }

    def endpoint = {url "http://localhost:8400/samples/messagebroker/amf"}
    def destination = "product"
    def service =
        {RemoteObject
            endpoint,
            destination}
    def get-products = {service.get-operation "getProducts"}
    {get-products.add-event-handler
        {on e:ResultEvent do
            {grid-frame.add
                replace? = true,
                {present-result e.result asa ArrayCollection}
            }
        }
    }
    {get-products.add-event-handler
        {on e:FaultEvent do
            def f = e.fault
            def msg = {message Fault Code: {value f.fault-code}
                          '{value f.fault-string}'}
            {popup-message msg}
        }
    }
    {StandardActiveTraversalContainer
        {VBox
            halign = "center",
            spacing = 0.1cm,
            width = {make-elastic preferred-size = 1m},
            grid-frame,
            {CommandButton
                color = "#0b333c",
                font-weight = "bold",
                label = "Get Data",
                style-class = "get-data",
                {on Action do
                    {with-busy-cursor
                        {get-products.send}
                    }
                }
            }
        }
    }
}

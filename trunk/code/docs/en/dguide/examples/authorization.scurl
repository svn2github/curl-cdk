||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public AuthorizationPolicy
  field public-get constant policies:{HashTable-of SQLiteOperation, SQLiteAuthorizerReturnCode}
  field public-get constant default-policy:SQLiteAuthorizerReturnCode
  field public-get constant authorizer:SQLiteAuthorizerProcType
  field public-get last-denied:#{Array-of #String}
  {constructor public {default 
                          default-policy:SQLiteAuthorizerReturnCode =
                              SQLiteAuthorizerReturnCode.DENY,
                          ...}
    set self.default-policy = default-policy
    set self.policies =
        {{HashTable-of SQLiteOperation, SQLiteAuthorizerReturnCode}
            {splice ...}}
    set self.authorizer =
        {proc {operation:SQLiteOperation,
               data1:#String,
               data2:#String,
               data3:#String,
               data4:#String
              }:SQLiteAuthorizerReturnCode
            def policy = {self.policy-for operation}
            {if policy == SQLiteAuthorizerReturnCode.DENY then
                set self.last-denied =
                    {{Array-of #String} data1, data2, data3, data4}}
            {return policy}}
  }
  {method public {policy-for operation:SQLiteOperation}:SQLiteAuthorizerReturnCode
    def (policy, policy?) = {self.policies.get-if-exists operation}
    {return
        {if policy? then policy 
         else self.default-policy}}
  }
  {method public {register db:SQLiteDatabase}:void
    set db.authorizer = self.authorizer
  }
  {method public {reset}:void
    set self.last-denied = null
  }
}

|#
    READ                 READ
    FUNCTION             READ
    SELECT               READ
    ANALYZE              READ

    DELETE               MOD
    INSERT               MOD
    TRANSACTION          MOD
    UPDATE               MOD

    CREATE_TEMP_INDEX    DDL TEMP
    CREATE_TEMP_TABLE    DDL TEMP
    CREATE_TEMP_TRIGGER  DDL TEMP
    CREATE_TEMP_VIEW     DDL TEMP
    DROP_TEMP_INDEX      DDL TEMP
    DROP_TEMP_TABLE      DDL TEMP
    DROP_TEMP_TRIGGER    DDL TEMP
    DROP_TEMP_VIEW       DDL TEMP

    COPY                 DDL
    CREATE_INDEX         DDL
    CREATE_TABLE         DDL
    CREATE_TRIGGER       DDL
    CREATE_VIEW          DDL
    DROP_INDEX           DDL
    DROP_TABLE           DDL
    DROP_TRIGGER         DDL
    DROP_VIEW            DDL

    ALTER_TABLE          DDL
    CREATE_VTABLE        DDL
    DROP_VTABLE          DDL
    REINDEX              DDL

    PRAGMA               PRAGMA

    ATTACH               ATTACH
    DETACH               ATTACH
#|


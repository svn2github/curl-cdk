||| Copyright (C) 1998-2007, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.


{doc-next
    {purpose
        Signals a {docref SQLiteInterface} exception.
    }
}
{define-class public SQLiteException {inherits Exception}
  {doc-next
    {purpose
        The error code returned by an API of {docref SQLiteInterface}.

        See also {docref SQLiteStatus}.
    }
  }
  field public constant code:SQLiteStatus

  {doc-next
    {purpose
        Constructs the object.
    }
    {parameter code,
        The error code.
    }
    {parameter msg, 
        If non null it is the error message describing {param code}.
    }
  }
  {constructor public {default code:SQLiteStatus, msg:#String}
    set self.code = code
    {construct-super 
        {message SQLITE3 error code {value self.code.value}
            ({value self.code.name}): 
            {if-non-null msg then msg else ""}
        }
    }
  }
  
  || QUESTION: Should this have a constructor that takes a code and
  || adds the message associated with it by looking at a table that
  || could be derieved from SQLiteStatus. Or better we can reuse the
  || above constructor. A msg of null would then mean that use the
  || default message for that error code.
}

{define-class public abstract SQLiteEvent {inherits Event}
}

{define-class public SQLiteRollback {inherits SQLiteEvent}
}

{define-class public SQLiteCommit {inherits SQLiteEvent}
  field public consumed?:bool = false
  {method public {consume}:void
    set self.consumed? = true
  }
}

{define-class public SQLiteUpdate {inherits SQLiteEvent}
  field public-get constant database:String
  field public-get constant table:String
  field public-get constant operation:SQLiteOperation
  field public-get constant rowid:int64
  {constructor public {default
                          database:String,
                          table:String,
                          operation:SQLiteOperation,
                          rowid:int64}
    set self.database = database
    set self.table = table
    set self.operation = operation
    set self.rowid = rowid
  }
}



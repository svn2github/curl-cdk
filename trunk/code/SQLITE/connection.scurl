||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{import * from COM.CURL.CDK.SQL-BASE}

{doc-next
    {purpose
        Parent class for various SQLite events.
    }
}
{define-class public abstract SQLiteEvent {inherits Event}
}

{doc-next
    {purpose
        {docref Event} sent if {param rollback-event?} {ctext = true}
        is provided to {docref SQLiteConnection.default}.
    }
}
{define-class public SQLiteRollbackEvent {inherits SQLiteEvent}
}

{doc-next
    {purpose
        {docref Event} sent if {param commit-event?} {ctext = true}
        is provided to {docref SQLiteConnection.default}.
    }
}
{define-class public SQLiteCommitEvent {inherits SQLiteEvent}
  {doc-next
    {purpose
        If set to {ctext true} then commit will be canceled, and
        the transaction will be rolled back.
    }
  }
  field public consumed?:bool = false
}

{doc-next
    {purpose
        {docref Event} sent if {param update-event?} {ctext = true}
        is provided to {docref SQLiteConnection.default}.
    }
}
{define-class public SQLiteUpdateEvent {inherits SQLiteEvent}

  field public constant database-name:String

  field public constant table-name:String
  {doc-next
    {purpose
        Will be {ctext SQLiteOperation.INSERT},
        {ctext SQLiteOperation.DELETE}, or
        {ctext SQLiteOperation.UPDATE}.
    }
  }
  field public constant operation:SQLiteOperation
  {doc-next
    {purpose
        Rowid of the affected row, for an update, this is the rowid after
        the update.
    }
  }
  field public constant rowid:int64

  {constructor public {default
                          database-name:String,
                          table-name:String,
                          operation:SQLiteOperation,
                          rowid:int64
                      }
    set self.database-name = database-name
    set self.table-name = table-name
    set self.operation = operation
    set self.rowid = rowid
  }
}



{doc-next
    {purpose
        Class implementing the {docref SQLConnection} API for SQLite.
    }
}
{define-class public SQLiteConnection {inherits SQLConnection, EventTarget}

  {doc-next
    {purpose
        The {docref SQLiteDatabase} that is used for all operations.
    }
  }
  field public constant database:SQLiteDatabase

  {doc-next
    {purpose
        Create a {docref SQLiteConnection}.
    }
    {parameter database-url,
        {docref Url} of the database file.  If this is supplied
        the applet should call {docref SQLiteDatabase.close} on the
        {docref SQLiteConnection.database} field when they are done
        with the database.
    }
    {parameter database,
        {docref SQLiteDatabase} that was already created.
    }
    {parameter error-if-missing?,
        If {ctext true} and {param database-url} is supplied, but the
        file does not exist, fail.  If {ctext false}, then
        {param database-url} will be created if needed.
    }
    {parameter commit-event?,
        Should {docref SQLiteCommitEvent}s get sent to any
        event handlers that are supplied in {param ...} that
        subscribe to those?
    }
    {parameter rollback-event?,
        Should {docref SQLiteRollbackEvent}s get sent to any
        event handlers that are supplied in {param ...} that
        subscribe to those?
    }
    {parameter update-event?,
        Should {docref SQLiteUpdateEvent}s get sent to any
        event handlers that are supplied in {param ...} that
        subscribe to those?
    }
    {parameter ...,
        Event handlers to receive various subclasses of {docref SQLiteEvent}
        as indicated by the values supplied in {param commit-event?},
        {param rollback-event?} and {param update-event?}.
    }
  }
  {constructor public {default 
                          database-url:#Url = null,
                          database:#SQLiteDatabase = null,
                          error-if-missing?:bool = false,
                          commit-event?:bool = false,
                          rollback-event?:bool = false,
                          update-event?:bool = false,
                          ...:EventHandler
                      }
    || Only supply the url or the database or neither (for in memory database)
    {assert database-url == null or database == null}

    || open database
    {if-non-null database-url then
        {if error-if-missing? and not {local-file-exists? database-url} then
            {throw 
                {MissingFileException
                    {lmessage No such file: {value database-url}}
                }
            }
        }
    }
    set self.database =
        {if-non-null database then
            database 
         else
            {SQLiteDatabase database-url}
        }

    || Notification
    set (self.update-callback, self.rollback-callback, self.commit-callback) =
        {self.define-callbacks}
    set self.commit-event? = commit-event?
    set self.rollback-event? = rollback-event?
    set self.update-event? = update-event?
    
    || superclasses
    {construct-super.SQLConnection 
        {if-non-null database-url then
            database-url
         else
            || FIXME: is there a better url for in memory databases?
            {url "curl://temp/"}
        }
    }
    
    {for eh in ... do
        {self.add-event-handler eh}
    }
  }

  || Connection protocol
  || -----------
  {doc-next
    {purpose Obtain a list of the databases available through this
        connection.
    }
    {notes
        The SQLite classes use a database name as part of what
        table is being accessed, not as what database to connect
        to.  The default main database is generally signified by the
        empty string.
    }
  }
  {method public {get-database-names}:StringArray
    || NOTE: not cached, as can change on 'attach/detach'
    let database-names:StringArray = {StringArray}
    {self.execute-sqlite
        "PRAGMA database_list", ||""
        callback =
            {proc {row:Array}:bool
                {database-names.append row[1] asa String}
                {return true}
            }
    }
    {return database-names}
  }

  {doc-next
    {purpose Obtain a list of the tables in the specified database.
    }
  }
  {method public {get-tables database:String}:StringArray
    let tables:StringArray = {StringArray}
    || FIXME: not sure which version will fix that temp.sqlite_master
    || will work, earlier versions needed temp.sqlite_temp_master
    {self.execute-sqlite
        "SELECT name FROM " & ||""
        {if database == "temp" then
            "sqlite_temp_master" ||""
         else
            {self.combined-table-name database, "sqlite_master"} ||""
        } &
        " WHERE name NOT LIKE 'sqlite_%' AND type IN ('table', 'view')", ||""
        callback =
            {proc {row:Array}:bool
                {tables.append row[0] asa String}
                {return true}
            }
    }
    {tables.sort}
    {return tables}
  }

  {doc-next
    {purpose Return a {docref RecordFields} object representing the
        columns of a table or query result in the specified database.
    }
    {details
        The parameters match those of
        {docref SQLConnectedRecordSet.create}.
    }
    {notes
        This should be used instead of {docref Connection.get-fields},
        because some of the key information for the {docref RecordFields}
        needs to be supplied in the keyword parameters.
    }
  }
  {method public {get-sql-fields
                      database-name:String,
                      query:String,
                      table-name:#String = null,
                      hidden-primary-key-field:int = -1,
                      query-is-full-row?:bool = false,
                      primary-keys:#{Array-of String} = null,
                      strict-types?:bool = false
                 }:(RecordFields, #String)

    let fs:{Array-of RecordField} = {new {Array-of RecordField}}
    let hidden-primary-key-field-name:#String
    let primary-key-is-auto-increment?:bool = false
    || FIXME: should we skip this if not request-modifiable?
    || Use table-name, if available to get additional meta-data.
    {if-non-null table-name then
        || FIXME: There is no way to get if a column is auto-increment, so
        || we check for a row about this table in sqlite_sequence, but
        || that row may not be created until at least one row has been
        || added to the table.
        {try
            {self.execute-sqlite
                "SELECT seq from " & ||""
                {self.combined-table-name database-name, "sqlite_sequence"} &
                " WHERE name='" & table-name & "'", ||""
|#
                args-callback =
                    {proc {statement:SQLiteStatement}:void
                        {statement.bind-text 1,
                            {self.combined-table-name database-name, table-name}
                        }
                    },
#|
                callback =
                    {proc {row:Array}:bool
                        set primary-key-is-auto-increment? = true
                        {return false}
                    }
                }
         catch ex:SQLiteException do
            || Ignore failures like the table not existing.
        }
    }
    {with-statement in self.database
        statement = query
     do
        let nval:int = statement.column-count
        || HACK: avoid duplicate names
        || FIXME: This allocates a bunch of objects, maybe it could just
        || save the number of copies of a given name, it never uses the
        || contents of the value Arrays.
        let names:{HashTable-of String, Array} = {{HashTable-of String, Array}}
        {for i = 0 below nval do
            let real-name:String = {statement.get-column-name i}
            let name:String = real-name
            {if-non-null xs = {names.get-if-exists name} asa #Array then
                {xs.append i}
                set name = {format "%s_%02d", name, xs.size}
             else
                set names[name] = {Array i}
            }
            {if i == hidden-primary-key-field then
                set hidden-primary-key-field-name = name
                {continue}
            }
            let decltype:#String = {statement.get-column-decltype i}
            let type:String = {if-non-null decltype then decltype else ""}
            let affinity:SQLiteDatatypeAffinity = 
                {SQLiteDatatypeAffinity-from-declared-type type}
            let domain:Domain =
                {SQLiteVariantDomain.from-affinity affinity,
                    strict? = strict-types?
                }
            let primary-key?:bool =
                {if-non-null primary-keys then
                    {primary-keys.find real-name} >= 0
                 else
                    false
                }
            let f:SQLRecordField = 
                {SQLRecordField
                    name, 
                    domain = domain,
                    || NOTE: needs to be nullable to defeat Curl check
                    nullable? = true, ||nullable?,
                    modifiable? = true,
                    primary-key? = primary-key?,
                    auto-increment? = 
                        primary-key? and primary-key-is-auto-increment? and
                        (affinity == SQLiteDatatypeAffinity.INTEGER),
                    type
                }
            {fs.append f}
        }
    }
    {return {RecordFields {splice fs}}, hidden-primary-key-field-name}
  }

  {method package {combined-table-name database-name:String, table-name:String
                  }:String
    {return
        {if database-name != "" and database-name != "main" then
            database-name & "." & table-name
         else
            table-name
        }
    }
  }

  {doc-next
    {purpose
        Get primary key information for a given table.
    }
  }
  || FIXME: We could also get default values, which would be
  || used when we make the Domain.
  {method package {get-primary-keys-for-table
                      database-name:String,
                      table-name:String
                  }:(field-names:{Array-of String})
    let primary-keys:{Array-of String} = {new {Array-of String}}
    || Couldn't get bind-text to work with this query...
    {self.execute-sqlite
        "PRAGMA " &
        {self.combined-table-name database-name, "table_info"} & ||""
        "(" & table-name & ")", ||""
|#
         args-callback =
            {proc {statement:SQLiteStatement}:void
                {statement.bind-text 1,
                    {self.combined-table-name database-name, table-name}
                }
            },
#|
         callback =
            {proc {row:Array}:bool
                || Check the primary key column
                {if row[5] != 0 then
                    || Save the column names
                    {primary-keys.append row[1] asa String}
                }
                {return true}
            }
    }
    {return primary-keys}
  }

  {method public {get-fields database:String, query:String}:RecordFields
    || Note: this could also accept table names and turn them into queries,
    || but that dumb.
    {return
        {self.get-sql-fields
            database,
            query
        }
    }
  }

  {method public {table-exists? database:String, table:String}:bool
    || TODO: more efficient to just use SQL
    let tables:StringArray = {self.get-tables database}
    {return {tables.find table} >= 0}
  }

  || SQLConnection API

  || inherited from Connection
  {method public {create-record-set
                     database-name:String,
                     query:String,
                     request-modifiable?:bool=false,
                     size-limit:int=-1,
                     ...:EventHandler
                 }:SQLConnectedRecordSet
    {return
        {if {query.find ' '} < 0 then
            {self.create-sql-record-set-from-table-name
                database-name,
                query, || table-name
                request-modifiable? = request-modifiable?,
                size-limit = size-limit,
                ...
            }
         else
            {self.create-sql-record-set
                database-name,
                query,
                request-modifiable? = request-modifiable?,
                size-limit = size-limit,
                ...
            }
        }
    }
  }

  {method public {create-sql-record-set-from-table-name
                     database-name:String,
                     table-name:String,
                     request-modifiable?:bool=false,
                     size-limit:int=-1,
                     base-where-clause:#String = null,
                     load-now?:bool = true,
                     strict-types?:bool = false,
                     ...:EventHandler
                 }:SQLConnectedRecordSet
    {return
        {SQLiteRecordSet.create-from-table-name
            self,
            database-name,
            table-name,
            request-modifiable? = request-modifiable?,
            size-limit = size-limit,
            base-where-clause = base-where-clause,
            load-now? = load-now?,
            strict-types? = strict-types?,
            ...
        }
    }
  }

  {method public {create-sql-record-set
                     database-name:String,
                     query:String,
                     request-modifiable?:bool=false,
                     size-limit:int=-1,
                     table-name:#String = null,
                     base-where-clause:#String = null,
                     hidden-primary-key-field:int = -1,
                     || I.E. does the query look like *, or
                     || ROWID, *, with hidden-primary-key-field = 0
                     || This allows optimized INSERT statements to be
                     || used.
                     query-is-full-row?:bool = false,
                     primary-keys:#{Array-of String} = null,
                     load-now?:bool = true,
                     strict-types?:bool = false,
                     ...:EventHandler
                 }:SQLConnectedRecordSet
    {return
        {SQLiteRecordSet.create
            self,
            database-name,
            query,
            request-modifiable? = request-modifiable?,
            size-limit = size-limit,
            table-name = table-name,
            base-where-clause = base-where-clause,
            hidden-primary-key-field = hidden-primary-key-field,
            query-is-full-row? = query-is-full-row?,
            load-now? = load-now?,
            strict-types? = strict-types?,
            ...
        }
    }
  }

  {doc-next
    {purpose
        Execute one or more SQL queries, and provide results, if any.
    }
    {parameter query,
        The SQL query or queries to execute.
    }
    {parameter args-callback,
        Called with the statement before each query is executed
        to allow for binding of arguments.
    }
    {parameter callback,
        Called with each row that results from executing a query.
        May return {ctext false} to stop execution of that query.
    }
    {parameter restart-callback,
        Called after completing execution of the query to ask if query
        should be executed again.
    }
    {parameter throw-on-error?,
        If {ctext true} and executing the statement fails,
        an error will be thrown. Otherwise no error will be thrown and
        the caller is responsible to check the return value of this
        method to see if the statement was successfully
        executed or not.

        It is {ctext true} by default.
    }
    {parameter start-record,
        Row to start calling {param callback} on.  This will use
        LIMIT clauses if the query is a SELECT statement.  This may not
        be used if {param query} contains multiple queries.
    }
    {parameter size-limit,
        Row to stop executing query at.  This will use
        LIMIT clauses if the query is a SELECT statement.  This may not
        be used if {param query} contains multiple queries.
    }
    {return-vals
        Returns {ctext true} if execution succeeded.  If {param callback}
        returns {ctext false} then this will return {ctext true}.
    }
  }
  {method public {execute-sqlite
                     query:String,
                     args-callback:#{proc-type {SQLiteStatement}:void} = null,
                     callback:#{proc-type {row:Array}:bool} = null,
                     restart-callback:#{proc-type {SQLiteStatement}:bool} = null,
                     throw-on-error?:bool = true,
                     start-record:int = 0,
                     size-limit:int = -1
                 }:bool
    || If this is a SELECT statement we can handle start-record/size-limit
    || in the database, if it is PRAGMA or whatever then we do it manually.
    || Note: there had better not be a ; at the end of the statement.
    let limit-already-handled?:bool =
        {if start-record != 0 or size-limit >= 0 and
            {query.prefix? "SELECT", ignore-case? = true}
         then
            set query = query & " LIMIT " & start-record & ", " & size-limit
            true
         else
            false
        }
    let restart?:bool = true
    {with-statement in self.database
        statement = query
     do
        {while true do
            {while restart? do
                {if-non-null args-callback then
                    {args-callback statement}
                }
                let row-index:int = -1
                {while true do
                    let status:SQLiteStatus =
                        {statement.step throw-on-error? = throw-on-error?}
                    {switch status
                     case SQLiteStatus.DONE do
                        {break}
                     case SQLiteStatus.OK, SQLiteStatus.ROW do
                     else
                        {return false}
                    }
                    {inc row-index}
                    {if not limit-already-handled? then
                        {if start-record > row-index then
                            {continue}
                         elseif size-limit >= 0 and
                            row-index > (start-record + size-limit)
                         then
                            {break}
                        }
                    }
                    {if-non-null callback then
                        {if not {callback statement.current-row} then
                            {break}
                        }
                    }
                }
                {statement.reset}
                set restart? =
                    {if-non-null restart-callback then
                        {restart-callback statement}
                     else
                        false
                    }
            }
            {if {statement.prepare-next} then
                {if size-limit >= 0 or start-record != 0 then
                    {error
                        {lmessage 'size-limit' or 'start-record' were supplied for a multistatement query.}
                    }
                }
             else
                {break}
            }
        }
    }
    {return true}
  }

  {method public {execute-sql
                     database-name:String,
                     query:String,
                     callback:#{proc-type {row:Array}:bool} = null,
                     throw-on-error?:bool = true,
                     start-record:int = 0,
                     size-limit:int = -1
                 }:bool
    {return
        {self.execute-sqlite
            query,
            callback = callback,
            throw-on-error? = throw-on-error?,
            start-record = start-record,
            size-limit = size-limit
        }
    }
  }

  {method public {execute ...}:void || ### TRANSITION
    {self.execute-sqlite {splice ...}}
  }
  
  || Internal implementation stuff, copied from old SQLiteConnection
  || Notification
  {method private {define-callbacks
                  }:(SQLiteUpdateHookProcType,
                     SQLiteRollbackHookProcType,
                     SQLiteCommitHookProcType)
    || FIXME: This will result in event handling in the middle of other code,
    || at possibly illegal points in time, or unusual times anyway.
    {return
        {proc {operation:SQLiteOperation,
               database-name:String,
               table-name:String,
               rowid:int64
              }:void
            {self.handle-event 
                {SQLiteUpdateEvent database-name, table-name, operation, rowid}
            }
        },
        {proc {}:void
            {self.handle-event {SQLiteRollbackEvent}}
        },
        {proc {}:bool
            let e:SQLiteCommitEvent = {SQLiteCommitEvent}
            {self.handle-event e}
            {return e.consumed?}
        }
    }
  }

  field private _commit-event?:bool
  {getter public {commit-event?}:bool
    {return self._commit-event?}
  }
  {setter public {commit-event? val:bool}:void
    {if val != self._commit-event? then
        set self._commit-event? = val
        {self.register-commit-hook
            {if val then 
                self.commit-callback
             else 
                null
            }
        }
    }
  }

  field constant private commit-callback:SQLiteCommitHookProcType
  {method private {register-commit-hook
                        callback:#SQLiteCommitHookProcType
                    }:void
    set self.database.commit-hook = callback
  }

  field private _rollback-event?:bool
  {getter public {rollback-event?}:bool
    {return self._rollback-event?}
  }
  {setter public {rollback-event? val:bool}:void
    {if val != self._rollback-event? then
        set self._rollback-event? = val
        {self.register-rollback-hook
            {if val then 
                self.rollback-callback
             else 
                null
            }
        }
    }
  }

  field constant private rollback-callback:SQLiteRollbackHookProcType
  {method private {register-rollback-hook
                        callback:#SQLiteRollbackHookProcType
                 }:void
    set self.database.rollback-hook = callback
  }

  field private _update-event?:bool
  {getter public {update-event?}:bool
    {return self._update-event?}
  }
  {setter public {update-event? val:bool}:void
    {if val != self._update-event? then
        set self._update-event? = val
        {self.register-update-hook
            {if val then 
                self.update-callback
             else 
                null
            }
        }
    }
  }

  field constant private update-callback:SQLiteUpdateHookProcType
  {method private {register-update-hook
                        callback:#SQLiteUpdateHookProcType
                 }:void
    set self.database.update-hook = callback
  }

  || inherited from Connection
  {method public {reset}:void
  }
}


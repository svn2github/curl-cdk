||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 6.0 package}
{package COM.CURL.CDK.SQLITE-LIBRARY-SYNTAX,
    version = "0.9",
    resource-directory = "../resources/",
    translations-file = "messages.xml",
    {compiler-directives careful? = true}
}

{import * from CURL.LANGUAGE.SOURCE}

|| Used for all callback/hooks/handlers to defer exceptions until later.
{define-class public final SQLiteDelayedExceptionEvent
  {inherits Event, BasicEventTarget}

  field private constant exception:Exception
  
  {constructor package {default ex:Exception}
    set self.exception = ex
  }                           
  {define-proc public {create-and-enqueue ex:Exception}:void
    let event:SQLiteDelayedExceptionEvent =
        {SQLiteDelayedExceptionEvent ex}
    {event.enqueue-event event, position = EventQueuePosition.head}
  }
  
  || See BasicEventTarget.
  {method public final {verify-event event:Event}:void
    {assert event == self}
  }

  || See BasicEventTarget.
  {method public final {handle-event event:Event}:void
    {self.verify-event event}
    {throw self.exception}
  }
}

{define-macro public {with-defered-exceptions
                         ?body:statements
                     }
    let exception-type:Identifier =
        {Identifier 
            {if macro-env.meta-data.jit-compiled? then
                "Exception"
             else
                "BasicThrowable"
            }
        }
    {return
        {expand-template
            {try
                ?body
             catch t:?exception-type do
                {SQLiteDelayedExceptionEvent.create-and-enqueue t}
            }
        }
    }
}

||| Copyright (C) 1998-2007, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 5.0 package}
{package COM.CURL.CDK.SQLITE.SYNTAX,
    {compiler-directives careful? = true}
}
{import * from CURL.LANGUAGE.SOURCE}

|| This is a separate package so that it can be used by COM.CURL.CDK.SQLITE,
|| but you should never import this directly, just import COM.CURL.CDK.SQLITE
|| and it will re-export all of the macros below.

|| transaction shorthand
|| --------------------
{define-macro public {with-transaction
                      in ?db:expression
                         ?lock:{one-of 
                                   {pattern deferred},
                                   {pattern immediate},
                                   {pattern exclusive},
                                   {pattern}}
                      do
                         ?body:statements
                     }
    let lock-type:String =
        {syntax-switch lock
         case {pattern} do "deferred"
         else {{lock.get-text}.to-String}}
    {return
        {expand-template
            let body-failed?:bool
            {?db.execute "BEGIN " & ?{Literal lock-type}}
            {try
                ?body
             catch e:Exception do
                set body-failed? = true
                {?db.execute "ROLLBACK"}
                {throw e}
             finally
                {if not body-failed? then
                    {?db.execute "COMMIT"}
                }
            }
        }
    }
}

|| ecological shorthand
|| --------------------
{define-macro public {with-database
                         ?db:identifier = ?database:expression               
                      do
                         ?body:statements
                      }
    {return
        {expand-template
            {value
                let constant ?db:{compile-time-type-of ?database} = 
                    ?database
                {try ?body
                 finally {?db.close}}}
        }
    }
}
{define-macro public {with-statement
                      in ?db:expression               
                          ?stmt:identifier = ?sql:expression 
                      do
                          ?body:statements
                     }
    {return
        {expand-template
            {value
                let constant ?stmt:?={Identifier "SQLiteStatement"} = 
                    {?db.create-statement ?sql}
                {try ?body
                 finally {?stmt.finalize}}}
        }
    }
}

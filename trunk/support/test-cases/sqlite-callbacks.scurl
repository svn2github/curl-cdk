||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{import * from COM.CURL.CDK.SQLITE}
{import * from COM.CURL.CDK.SQLITE-TEST-SUPPORT}
{define-proc public {do-bad db:SQLiteDatabase, stmt:#SQLiteStatement,
                        close-only?:bool = false
                    }:void
    {try
        {db.close}
        {TestCondition.fail message = "database was allowed to close"}
     catch e:SQLiteException do
||        TestCondition.assert {ex.message.find-string "close"} and
        {TestCondition.assert {e.message.find-string "finalize"} >= 0 and
            e.code == SQLiteStatus.MISUSE}
    }
    {if-non-null stmt then
        {try
            {stmt.finalize}
            {TestCondition.fail message = "statement was allow to finalize"}
         catch e:SQLiteException do
            {TestCondition.assert e.code == SQLiteStatus.MISUSE}
            {TestCondition.assert {e.message.find-string "finalize"} >= 0 and
                e.code == SQLiteStatus.MISUSE}
        }
        {try
            {stmt.reset}
            {TestCondition.fail message = "statement was allow to reset"}
         catch e:SQLiteException do
            {TestCondition.assert e.code == SQLiteStatus.MISUSE}
            {TestCondition.assert {e.message.find-string "reset"} >= 0 and
                e.code == SQLiteStatus.MISUSE}
        }
        {try
            {stmt.step}
            {TestCondition.fail message = "statement was allow to step"}
         catch e:SQLiteException do
            {TestCondition.assert e.code == SQLiteStatus.MISUSE}
            {TestCondition.assert {e.message.find-string "step"} >= 0 and
                e.code == SQLiteStatus.MISUSE}
        }
    }
    {try
        {db.sql-value "SELECT * FROM test"}
        {if not close-only? then
            {TestCondition.fail message = "Allowed to make a new statement"}
        }
     catch e:SQLiteException do
        {if not close-only? then
            {TestCondition.assert e.code == SQLiteStatus.MISUSE}
            {TestCondition.assert {e.message.find-string "prepare"} >= 0 and
                e.code == SQLiteStatus.MISUSE}
         else
            {TestCondition.fail message = "New statement failed: " & e.message}
        }
    }
}

{TestSuite "callbacks",
    {test-case "misbehaving function",
        {with-database db = {SQLiteDatabase null} do
            {db.execute "
CREATE TABLE test ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, val);"}
            let did-function?:bool
            let did-agg-function1?:bool
            let did-agg-function2?:bool
            {with-statement in db
                q = "SELECT foo('')"
             do
                {db.install-function
                    "foo",
                    1,
                    {proc {arg:String}:int
                        {do-bad db, q, close-only? = true}
                        set did-function? = true
                        {return 1}
                    }
                }
                {q.step}
            }
            {db.execute "INSERT INTO test (val) VALUES (1)"}
            {db.execute "INSERT INTO test (val) VALUES (2)"}
            {with-statement in db
                q = "SELECT foo2(val) FROM test"
             do
                {db.install-function
                    "foo2",
                    1,
                    {proc {context:int, arg:any}:int
                        {do-bad db, q, close-only? = true}
                        set did-agg-function1? = true
                        {return 1}
                    },
                    final-xfunc =
                        {proc {context:int}:int
                            {do-bad db, q, close-only? = true}
                            set did-agg-function2? = true
                            {return 1}
                        }
                }
                {q.step}
            }
            {TestCondition.assert did-function? and
                did-agg-function1? and did-agg-function2?}
        }
    },
    || Note: testing busy-handler would require multiple processes otherwise
    || a conflict is considered to be insolvable.
    {test-case "update-hook/commit-hook/progress-handler/authorizer",
        {with-database db = {SQLiteDatabase null} do
            let update-happened?:bool
            let commit-happened?:bool
            let progress-happened?:bool
            let authorizer-happened?:bool
            {db.execute "
CREATE TABLE test ( id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, val);"}
            {with-statement in db
                q = "INSERT INTO test (val) VALUES (1)"
             do
                set db.update-hook =
                    {proc {operation:SQLiteOperation,
                           database-name:String,
                           table-name:String,
                           rowid:int64
                          }:void
                        {do-bad db, q}
                        set update-happened? = true
                    }
                set db.commit-hook =
                    {proc {}:bool
                        {do-bad db, q}
                        set commit-happened? = true
                        {return false}
                    }
                {db.set-progress-handler 2,
                    {proc {}:bool
                        {do-bad db, q}
                        set progress-happened? = true
                        {return false}
                    }
                }
                set db.authorizer =
                    {proc {operation:SQLiteOperation,
                           data1:#String,
                           data2:#String,
                           data3:#String,
                           data4:#String
                          }:SQLiteAuthorizerReturnCode
                        || statement isn't prepared until after this
                        || callback happens.
                        {do-bad db, null}
                        set authorizer-happened? = true
                        {return SQLiteAuthorizerReturnCode.OK}
                    }
                {q.step}
                {TestCondition.assert update-happened? and commit-happened? and
                    progress-happened? and authorizer-happened?
                }
            }
        }
    },
    {test-case "rollback-hook",
        {with-database db = {SQLiteDatabase null} do
            let rollback-happened?:bool
            {db.execute "
CREATE TABLE test (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    val);"}
            {db.execute "BEGIN EXCLUSIVE"}
                
            {db.execute "INSERT INTO test (val) VALUES (1)"}
            set db.rollback-hook =
                {proc {}:void
                    {do-bad db, null}
                    set rollback-happened? = true
                }
            {db.execute "ROLLBACK"}
            {TestCondition.assert rollback-happened?}
        }
    }
}

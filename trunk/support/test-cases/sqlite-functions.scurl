||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{import * from COM.CURL.CDK.SQLITE}

{define-class public AvgData
  field public sum:double
  field public count:int
}

{TestSuite "functions",
    {test-case "1 arg",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {s:String}:String
                    {return s & "hi"}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi('bye')"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == "byehi"}
            }
        }
    },
    {test-case "1 arg from table",
        {with-database db = {SQLiteDatabase null} do
            {db.execute "CREATE TABLE test (val);"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES ('x')"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES ('y')"}
            {db.install-function
                "say_hi",
                1,
                {proc {s:String}:String
                    {return s & "hi"}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(val) FROM test"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 2 and ys[0] == "xhi" and ys[1] == "yhi"}
            }
        }
    },
    {test-case "1 arg error",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {s:String}:String
                    {return s & "hi"}
                }
            }
            {try
                {with-statement in db 
                    q = "SELECT say_hi('bye', 'xxx')"
                 do
                    {q.step}
                    {TestCondition.fail message = "Should have gotten error."}
                }
             catch e:SQLiteException do
            }
        }
    },
    {test-case "1 any arg pass String",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {s:any}:String
                    {return s & "hi"}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi('bye')"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == "byehi"}
            }
        }
    },
    {test-case "1 any arg pass int",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {s:any}:String
                    {assert s isa int}
                    {return {format "%d", s}}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(2)"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == "2"}
            }
        }
    },
    {test-case "1 arg pass int to String, return any",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {s:String}:any
                    {return s & "hi"}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(2)"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == "2hi"}
            }
        }
    },
    {test-case "1 arg pass double to String, error",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {s:String}:any
                    {assert s == "1.0"}
                    {error s}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(1.0)"
             do
                let status:SQLiteStatus = {q.step throw-on-error? = false}
                {TestCondition.assert status != SQLiteStatus.OK and
                    status != SQLiteStatus.DONE}
            }
        }
    },
    {test-case "1 float arg rest args, return String",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {s:float, ...}:String
                    {return {String s + 1.1}}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(2.0)"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == "3.1"}
            }
        }
    },
    {test-case "1 float arg rest args, return String",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {s:float, ...}:String
                    {return {String s + 1.1}}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(2.0)"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == "3.1"}
            }
        }
    },
    {test-case "1 arg to rest args, return String",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                1,
                {proc {...}:String
                    let a:Arguments = {Arguments ...}
                    {return a[0] asa String}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi('a')"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == "a"}
            }
        }
    },
    {test-case "3 arg to rest:String args, return String",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                3,
                {proc {...:String}:String
                    let a:Arguments = {Arguments ...}
                    {return a[0] & a[1] & a[2]}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi('a', 1, 2.1)"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == "a12.1"}
            }
        }
    },
    {test-case "String, int16, String, return int",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                3,
                {proc {s1:String, i1:int16, s2:String}:int16
                    {return (s1.size + i1 + s2.size) asa int16}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(11, 7, 'x')"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == 10}
            }
        }
    },
    {test-case "... with int64 return",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                -1,
                {proc {...}:int64
                    let sum:int64 = 0
                    {for a in ... do
                        {inc sum, {String a}.size}
                    }
                    {return sum}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(11, 7.1, '1')"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0] isa int and ys[0] == 6}
            }
            {with-statement in db 
                q = "SELECT say_hi('abc')"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0] isa int and ys[0] == 3}
            }
            {with-statement in db 
                q = "SELECT say_hi()"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0] isa int and ys[0] == 0}
            }
        }
    },
    {test-case "...:any with int64 return",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "say_hi",
                -1,
                {proc {...:any}:int64
                    let sum:int64 = 0
                    {for a in ... do
                        {inc sum, {String a}.size}
                    }
                    {return sum}
                }
            }
            {with-statement in db 
                q = "SELECT say_hi(11, 7.1, '1')"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0] isa int and ys[0] == 6}
            }
            {with-statement in db 
                q = "SELECT say_hi('abc')"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0] isa int and ys[0] == 3}
            }
            {with-statement in db 
                q = "SELECT say_hi()"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0] isa int and ys[0] == 0}
            }
        }
    },
    {test-case "aggregate int",
        {with-database db = {SQLiteDatabase null} do
            {db.execute "CREATE TABLE test (val);"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (1)"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (2)"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (3)"}
            {db.install-function
                "lame_sum",
                1,
                {proc {context:int, s:int}:int
                    {return context + s}
                },
                final-xfunc =
                    {proc {context:int}:int
                        {return context}
                    }
            }
            {with-statement in db 
                q = "SELECT lame_sum(val) from test"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == 6}
            }
            {with-statement in db 
                q = "SELECT lame_sum(val) from test where val = 4"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == 0}
            }
        }
    },
    {test-case "aggregate any as int",
        {with-database db = {SQLiteDatabase null} do
            {db.execute "CREATE TABLE test (val);"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (1)"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (2)"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (3)"}
            {db.install-function
                "lame_sum",
                1,
                {proc {context:any, s:any}:any
                    {return 
                        {if context != null then
                            context asa int + s
                         else
                            s
                        }
                    }
                },
                final-xfunc =
                    {proc {context:any}:any
                        {return 
                            {if context != null then
                                context asa int
                             else
                                0
                            }
                        }
                    }
            }
            {with-statement in db 
                q = "SELECT lame_sum(val) FROM test"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0] == 6}
            }
            {with-statement in db 
                q = "SELECT lame_sum(val) FROM test WHERE val = 4"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == 0}
            }
        }
    },
    {test-case "aggregate int64",
        {with-database db = {SQLiteDatabase null} do
            {db.execute "CREATE TABLE test (val INTEGER);"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (1)"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (2)"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (3)"}
            {db.install-function
                "lame_sum",
                1,
                {proc {context:int64, s:int64}:int64
                    {return context + s}
                },
                final-xfunc =
                    {proc {context:int64}:int64
                        {return context}
                    }
            }
            {with-statement in db 
                q = "SELECT lame_sum(val) FROM test"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0] == 6}
            }
            {with-statement in db 
                q = "SELECT lame_sum(val) FROM test WHERE val = 4;"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == 0}
            }
        }
    },
    {test-case "aggregate float in ... avg",
        {with-database db = {SQLiteDatabase null} do
            {db.execute "CREATE TABLE test (val REAL);"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (1.0)"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (21.0)"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (32.0)"}
            {db.install-function
                "lame_avg",
                1,
                {proc {...}:any
                    {error "Should not be called."}
                },
                final-xfunc =
                    {proc {...}:any
                        {error "Should not be called."}
                    }
            }
            {db.install-function
                "lame_avg",
                1,
                {proc {context:#AvgData, s:any}:any
                    let c:AvgData =
                        {if-non-null context then
                            context
                         else
                            {AvgData}
                        }
                    {inc c.sum, s}
                    {inc c.count}
                    {return c}
                },
                final-xfunc =
                    {proc {context:#AvgData}:any
                        {return
                            {if-non-null context then
                                {if context.sum > 0.0 then
                                    context.sum / context.count
                                 else
                                    0.0
                                }
                             else
                                0.0
                            }
                        }
                    }
            }
            {db.install-function
                "lame_avg",
                2,
                {proc {...}:any
                    {error "Should not be called."}
                }
            }
            {with-statement in db 
                q = "SELECT lame_avg(val) FROM test"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and 
                    {type-of ys[0]} == double and
                    ys[0] == ((1.0 + 21.0 + 32.0) / 3)}
            }
            {with-statement in db 
                q = "SELECT lame_avg(val) FROM test WHERE val = 100.0"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and 
                    {type-of ys[0]} == double and
                    ys[0] == 0.0}
            }
        }
    },
    {test-case "aggregate blob",
        {with-database db = {SQLiteDatabase null} do
            {db.execute "CREATE TABLE test (val BLOB);"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (X'01')"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (X'02')"}
            {db.execute throw-on-error? = false,
                "INSERT INTO test VALUES (X'0304')"}
            {db.install-function
                "byte_concat",
                1,
                {proc {context:#ByteArray, s:ByteArray}:ByteArray
                    {return 
                        {if-non-null context then
                            {context.concat s}
                            context
                         else
                            {s.clone}
                        }
                    }
                },
                final-xfunc =
                    {proc {context:#ByteArray}:#ByteArray
                        {return 
                            {if-non-null context then
                                context
                             else
                                null
                            }
                        }
                    }
            }
            {with-statement in db 
                q = "SELECT byte_concat(val) FROM test"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert
                    ys.size == 1 and ys[0].size == 4 and
                    {ys[0].find 1} >= 0 and {ys[0].find 2} >= 0 and
                    {ys[0].find 3} >= 0 and {ys[0].find 4} >= 0}
            }
            {with-statement in db 
                q = "SELECT byte_concat(val) FROM test WHERE val = X'07'"
             do
                let ys:Array = {q.data-column}
                {TestCondition.assert ys.size == 1 and ys[0] == null}
            }
        }
    },
    {test-case "error message",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "foo",
                1,
                {proc {s:String}:int
                    {error "Rooty-Tooty"}
                }
            }
            let errmsg:#String
            let status:SQLiteStatus = SQLiteStatus.OK
            {try
                {db.sql-value "SELECT foo('')"}
             catch ex:SQLiteException do
                set errmsg = ex.message
                set status = ex.code
            }
            {TestCondition.assert {errmsg.find-string "Rooty-Tooty"} >= 0 and
                status == SQLiteStatus.ERROR
            }
        }
    },
    {test-case "error code",
        {with-database db = {SQLiteDatabase null} do
            {db.install-function
                "foo",
                1,
                {proc {s:String}:int
                    {throw {SQLiteException SQLiteStatus.ABORT, "Rooty-Tooty"}}
                }
            }
            let errmsg:#String
            let status:SQLiteStatus = SQLiteStatus.OK
            {try
                {db.sql-value "SELECT foo('')"}
             catch ex:SQLiteException do
                set errmsg = ex.message
                set status = ex.code
            }
            {TestCondition.assert {errmsg.find-string "Rooty-Tooty"} >= 0 and
                status == SQLiteStatus.ABORT
            }
        }
    }
}

||| Copyright (C) 1998-2007, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 5.0 applet}
{applet manifest = "../manifest.mcurl",
    {compiler-directives careful? = true}
}
{import * from COM.CURL.CDK.SQLITE}
{document-style PlainDocument}
{set-document-properties hstretch? = true, vstretch? = true}

|| ==============================
{import * from COM.CURL.CDK.SQLITE-LIBRARY}
{import CPointer, unsafe-memory-get from CURL.LANGUAGE.DLL-INTERFACE}
{import * from CURL.LANGUAGE.REGEXP}

{value
    let con:SQLiteConnection = {SQLiteConnection {url "census.db"}}
    let db:SQLiteDatabase = con.main-database
    let interface:SQLiteInterface = {SQLiteInterface}
    let callback:{proc-type {arg1:String, arg2:String}:int} =
        {proc {arg1:String, arg2:String}:int
            || call function
            let match?:bool = {regexp-match? arg1, arg2}
            || return result
            {return {if match? then 1 else 0}}
        }
    
    {db.install-function 
        |# name     #| "regexp", 
        |# nargs    #| 2,
        callback
    }
   
    let create-rs:{proc-type {String}:RecordSet} =
        {proc {name:String}:RecordSet
            let w:StopWatch = {StopWatch}
            {w.start}
            let rs:RecordSet = 
                {con.create-record-set "main", name, 
                    request-modifiable? = true}
            {w.stop}
            let msg:String =
                {message Query returned {value rs.size} records in {w.elapsed}}
            {output msg}
            {{get-the-applet}.set-status msg}
            {return rs}
        }
    
    let tables:StringArray = {con.get-tables "main"}
    
    let display:RecordGrid = 
        {RecordGrid |#ANTI GC HACK#| user-data = callback,
            width = {add-stretch}, 
            height = {add-stretch}}
    
    let sample-query:String = "SELECT * FROM census WHERE education REGEXP 'school'"
    
    {VBox
        hstretch? = true,
        {HBox 
            {ComboBox vorigin = 70%,
                width = 6in,
                sample-query,
                {splice tables},
                {on ValueFinished at c:ComboBox do
                    {with-busy-cursor
                        let rs:RecordSet = {create-rs c.value asa String}
                        set display.record-source = rs}},
                {on AttachEvent at c:ComboBox do
                    {c.set-value-with-events sample-query}}},
            {Fill}},
        {hrule},
        display}
}

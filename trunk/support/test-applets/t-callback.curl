||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.
{curl 6.0 applet}
{applet manifest = "../manifest.mcurl",
    {compiler-directives careful? = true}}

{define-proc {gc-count}:int
    {return
        {api-version-switch 
         case "6.0" do {garbage-collect-count}
         else 0}
    }
}
{let gc-count-initial:int = {gc-count}}
{dump gc-count-initial}

{import * from COM.CURL.CDK.SQLITE}
{import * from CURL.DATA-ACCESS.BASE}

{import * from CURL.LANGUAGE.DLL-INTERFACE}

{document-style PlainDocument}
{set-document-properties hstretch? = true, vstretch? = true}

{value
    let dbloc:Url = {get-temp-filename extension = ".db"}
    let con:SQLiteConnection = {SQLiteConnection database-url = dbloc}
    let db:SQLiteDatabase = con.database
    
    || schema
    {db.execute "
CREATE TABLE item
   (
    order_id INTEGER NOT NULL,
    id INTEGER NOT NULL,
    product_id INTEGER NOT NULL,
    quantity INTEGER NOT NULL,
    PRIMARY KEY (order_id, id)
   );"}
    
    || data
    {SQLiteStatement.import-csv db, "item", {url "../test-data/oe-data/item.csv"}}

    || update callback
    || -- this is stored by database
    set db.update-hook =
        {proc {operation:SQLiteOperation,
               database:String,
               table:String,
               rowid:int64
              }:void
            {if not {safe-to-dispatch?} then
                {output "UNSAFE"}}
            {output
                {lmessage
                    SQLite {value operation.name}
                    on '{value database}' 
                    table '{value table}'
                    row {value rowid}
                }}}
    
    let create-rs:{proc-type {String}:RecordSet} =
        {proc {name:String}:RecordSet
            let rs:RecordSet = 
                {con.create-record-set "main", name, 
                    request-modifiable? = true}
            {return rs}
        }
    let do-update:{proc-type {}:void} =
        {proc {}:void
            {db.execute "UPDATE item SET quantity = quantity + 1 WHERE rowid = 1;"}
        }
    let display-gc:TextDisplay = 
        {TextDisplay width = .25in,
            value = {String gc-count-initial},
            {on ValueChanged at c:TextDisplay do
                set c.value = {String {gc-count}}}}
    
    let tables:StringArray = {con.get-tables "main"}
    
    let display:RecordGrid = 
        {RecordGrid 
            width = {add-stretch}, 
            height = {add-stretch}}
    
    {VBox
        hstretch? = true,
        {on AttachEvent do
            set display.record-source =
                {create-rs "item"}},
        {HBox
            {ComboBox
                width = 6in,
                {splice tables},
                {on ValueFinished at c:ComboBox do
                    {with-busy-cursor
                        let rs:RecordSet = {create-rs c.value asa String}
                        set display.record-source = rs
                        {display-gc.handle-event {ValueChanged}}}}},
            {CommandButton label = "Update",
                {on Action do
                    {with-busy-cursor
                        || NOTE: should be in transaction, but that seems to mask the underlying error
                        {do ||with-transaction in db do
                            {db.execute "UPDATE item SET quantity = quantity + 1 WHERE rowid = 1"}}
                        {display-gc.handle-event {ValueChanged}}}}},
            {Fill width = .25in},
            {CommandButton label = "GC",
                {on Action do
                    {with-busy-cursor
                        {garbage-collect}
                        {display-gc.handle-event {ValueChanged}}}}},
            display-gc,
            {Fill}},
        {hrule},
        display}
}

||| Copyright (C) 1998-2007, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 6.0 applet}
{applet manifest = "../manifest.mcurl",
    {compiler-directives careful? = true}
}
{import * from COM.CURL.CDK.SQLITE}
{document-style PlainDocument}
{set-document-properties hstretch? = true, vstretch? = true}

{import * from CURL.IDE.PERFORMANCE}

{value
    let con:SQLiteConnection = {SQLiteConnection database-url = null}
    let db:SQLiteDatabase = con.database
    
    || testing parameters
    || TODO: from query args
    let create?:bool = true
    let demand?:bool = true

    {if create? then
        || schema
        {db.execute "
CREATE TABLE CENSUS (
        ID INTEGER NOT NULL PRIMARY KEY,
        AGE VARCHAR(3),
        CLASSOFWORKER VARCHAR(255),
        EDUCATION VARCHAR(255),
        MARITALSTATUS VARCHAR(255),
        RACE VARCHAR(255),
        SEX VARCHAR(255)
);
--CREATE INDEX census_by_education
--ON census (education)
--;
CREATE VIEW by_education AS
SELECT
 education, 
 COUNT(1) AS count,
 ROUND(AVG(age)) AS age
FROM census 
GROUP BY education 
ORDER BY education
;
"}
        || population
        {SQLiteStatement.import-csv db, "census", {url "census5000.csv"}}
    }
    
    let create-rs:{proc-type {String}:RecordSet} =
        {proc {name:String}:RecordSet
            let w:StopWatch = {StopWatch}
            {w.start}
            let rs:RecordSet = 
                {con.create-record-set "main", name, 
                    request-modifiable? = true}
            {w.stop}
            let msg:String =
                {message Query returned {value rs.size} records in {w.elapsed}}
            {output msg}
            {{get-the-applet}.set-status msg}
            {return rs}
        }
    
    let tables:StringArray = {con.get-tables "main"}
    
    {if demand? then
        {for t in tables do
            {create-rs t}}
    }
    
    let display:RecordGrid = 
        {RecordGrid 
            width = {add-stretch}, 
            height = {add-stretch}}
    
    {VBox
        hstretch? = true,
        {HBox
            {ComboBox
                width = 6in,
                {splice tables},
                {on ValueFinished at c:ComboBox do
                    {with-busy-cursor
                        let rs:RecordSet = {create-rs c.value asa String}
                        set display.record-source = rs}}},
            {CommandButton label = "insert",
                {on Action do
                    {with-busy-cursor
                        let w:StopWatch = {StopWatch}
                        {w.start}
                        || population
                        {SQLiteStatement.import-csv db, "census", {url "census5000.csv"}}
                        {w.stop}
                        set display.record-source = null
                        {{get-the-applet}.set-status 
                            {message Inserted records in {w.elapsed}}}
                    }}},
            {CommandButton label = "clear",
                {on Action do
                    {with-busy-cursor
                        let w:StopWatch = {StopWatch}
                        {w.start}
                        {db.execute "DELETE FROM census;"}
                        {w.stop}
                        set display.record-source = null
                        {{get-the-applet}.set-status 
                            {message Deleted records in {w.elapsed}}}
                    }}},
            {CommandButton label = "perf",
                {on Action do
                    {with-busy-cursor
                        set display.record-source = null
                        {initialize-performance-profiling
                            {get-temp-filename extension = ".cprof"}} 
                        {for i = 0 below 20 do
                            {start-performance-profiling}
                            {SQLiteStatement.import-csv db, "census", {url "census5000.csv"}}
                            {stop-performance-profiling}
                            {db.execute "DELETE FROM census;"}}
                        {finish-performance-profiling display-in-ide? = true}
                    }}},
            {Fill}},
        {hrule},
        display}
}


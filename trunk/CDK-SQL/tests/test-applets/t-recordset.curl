||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 7.0, 8.0 applet}
{applet manifest = "../manifest.mcurl",
    {compiler-directives careful? = true}
}
{import * from COM.CURL.CDK.SQLITE}
{import SQLRecordField from COM.CURL.CDK.SQL-BASE}

{define-enum package SQLiteDecltype
    none = "",
    blob = "BLOB", || Will end up as affinity none
    text = "VARCHAR",
    integer = "INTEGER",
    real = "REAL",
    numeric = "NUMERIC"
}

{let constant package defaults:FastArray =
    {FastArray |"'a'"|, "x'01'", |"'b'"|, 1, 1.1, 2}}
{let constant package defaults-as-values:FastArray =
    {FastArray "a", {ByteArray 1}, "b", 1, 1.1, 2}}

{define-enum package SQLiteNullness
    maybe-null = "",
    non-null = "NOT NULL"
}

{define-proc public {any-equal? x:any, y:any}:bool
    def array-equal? =
        {proc {xs:any, ys:any}:bool
            {with-compiler-directives allow-any-calls? = true do
                {if xs.size != ys.size then
                    {return false}
                }
                {for xv key i in xs do
                    {if not {any-equal? xv, ys[i]} then
                        {return false}
                    }
                }}
            {return true}
        }
    {if x == y then
        {return true}
    }
    {type-switch x
     case xs:ByteArray do
        {type-switch y
         case ys:ByteArray do
            {if {xs.equal? ys} then
                {return true}
            }
        }
     case xs:Array do
        {type-switch y
         case ys:Array do
            {return {array-equal? xs, ys}}
        }
     case xs:{Array-of Array} do
        {type-switch y
         case ys:{Array-of Array} do
            {return {array-equal? xs, ys}}
        }
    }
    {return false}
}

{let number-of-columns:int =
    ({enum-size SQLiteDecltype} * {enum-size SQLiteNullness} * 2)
}
{let number-of-rows:int = 10}

|| Should we add a strict column?  How much non-strict data are we going to
|| put in?
{define-proc package {make-base-columns}:StringArray
    let column-index:int = 0
    let base-columns:StringArray = {new StringArray}
    {for i in SQLiteDecltype do
        {for j in SQLiteNullness do
            {base-columns.append
                {format "t%d %s %s", column-index, i.value, j.value}
            }
            {inc column-index}
            {base-columns.append
                {format "t%d %s %s DEFAULT %s",
                    column-index, i.value, j.value,
                    {if column-index == 1 then
                        "NULL" ||""
                     else
                        defaults[i.index]
                    }
                }
            }
            {inc column-index}
        }
    }
    {return base-columns}
}

{define-proc package {join-strings as:StringArray}:String
    let buf:StringBuf = {StringBuf}
    {for s key i in as do
        {if i > 0 then
            {buf.concat ", "}
        }
        {buf.concat s}
    }
    {return {buf.to-String}}
}

{define-proc package {make-tables-columns}:StringArray

    let base:StringArray = {make-base-columns}
    let tables-columns:StringArray = {new StringArray}
    || plain
    {tables-columns.append {join-strings base}}

    || with all fields as keys
    || Note: this and odds as keys may need to be changed if SQLite starts
    || enforcing that PRIMARY KEY requires NOT NULL
    let all-primary-keys:StringBuf = {StringBuf ", PRIMARY KEY("}
    {for key i in base do
        {if i > 0 then
            {all-primary-keys.concat ", "}
        }
        {format out = all-primary-keys, "t%d", i}
    }
    {all-primary-keys.concat ")"}
    {tables-columns.append {join-strings base} & all-primary-keys}

    || every other field as keys
    let odds-primary-keys:StringBuf = {StringBuf ", PRIMARY KEY("}
    {for key i in base do
        {if i mod 2 == 1 then
            {if i > 2 then
                {odds-primary-keys.concat ", "}
            }
            {format out = odds-primary-keys, "t%d", i}
        }
    }
    {odds-primary-keys.concat ")"}
    {tables-columns.append {join-strings base} & odds-primary-keys}

    || first int as key
    let first-int-as-key:StringArray = {base.clone}
    {for k key i in first-int-as-key do
        {if {k.find-string "INT"} >= 0 and {k.find-string "NOT NULL"} >= 0 then
            set first-int-as-key[i] = k & " PRIMARY KEY"
            {break}
        }
    }
    {tables-columns.append {join-strings first-int-as-key}}
    || second int as auto-inc key
    let second-int-as-key:StringArray = {base.clone}
    let seen-first?:bool
    {for k key i in second-int-as-key do
        {if {k.find-string "INT"} >= 0 and {k.find-string "NOT NULL"} >= 0 then
            {if seen-first? then
                set second-int-as-key[i] = k & " PRIMARY KEY AUTOINCREMENT"
                {break}
             else
                set seen-first? = true
            }
        }
    }
    {tables-columns.append {join-strings second-int-as-key}}
    {return tables-columns}
}

{define-proc {create-table
                database:SQLiteDatabase,
                database-name:String,
                table-name:String,
                columns:String,
                create-view?:bool = true
             }:void
    {database.execute
        "CREATE " &
        {if database-name == "temp" then
            "TEMP "
         else
            ""
        } &
        "TABLE " &
        {switch database-name
         case "main", "", "temp" do
            table-name
         else
            database-name & "." & table-name
        } & " (" & columns & ")"

    }
    {if create-view? then
        {database.execute
            "CREATE " & {if database-name == "temp" then "TEMP " else ""} &
            "VIEW " &
            {make-table-name database-name, table-name & "view"} &
            " AS SELECT * FROM " &
            {make-table-name database-name, table-name}
        }
    }
}

{define-proc package {drop-table
                         database:SQLiteDatabase,
                         database-name:String,
                         table-name:String
                     }:void
    {database.execute
        "DROP TABLE " & {make-table-name database-name, table-name},
        throw-on-error? = false
    }
    {database.execute
        "DROP VIEW " & {make-table-name database-name, table-name & "view"},
        throw-on-error? = false
    }
}

{define-proc package {generate-value
                         type:SQLiteDecltype,
                         row-index:int,
                         column-index:int
                     }:any

    {if type == SQLiteDecltype.none then
        || re-assign none to one of the other types.
        set type =
            {SQLiteDecltype index =
                (row-index mod ({enum-size SQLiteDecltype} - 1) + 1)}
    }
    {if type == SQLiteDecltype.numeric then
        set type = 
            {if row-index mod 1 == 0 then
                SQLiteDecltype.integer 
             else
                SQLiteDecltype.real 
            }
    }
    {return
        {switch type
         case SQLiteDecltype.none do
            {error}
         case SQLiteDecltype.blob do
            {ByteArray row-index asa byte, column-index asa byte}
         case SQLiteDecltype.text do
            ('A' + row-index) asa char &
            ('a' + column-index) asa char
         case SQLiteDecltype.integer do
            row-index * 1000 + column-index
         case SQLiteDecltype.real do
            (row-index * 1000 + column-index) asa double + 0.1
         case SQLiteDecltype.numeric do
            {error}
         else
            {error}
        }
    }
}

{define-proc package {data-for-row
                         row-index:int,
                         include-defaults?:bool = false
                     }:(values:Array, sql-values:StringBuf, sql-names:StringBuf)
    let column-index:int = 0
    let column-values:Array = {Array}
    let sql-column-values-buf:StringBuf = {StringBuf}
    let sql-column-names-buf:StringBuf = {StringBuf}
    {for i in SQLiteDecltype do
        {for j in SQLiteNullness do
            {if j == SQLiteNullness.maybe-null and row-index == 0 then
                || non-defaulted
                {column-values.append null}
                {if sql-column-values-buf.size > 0 then
                    {sql-column-values-buf.concat ","}
                    {sql-column-names-buf.concat ","}
                }
                {sql-column-names-buf.concat {format "t%d", column-index}}
                {sql-column-values-buf.concat "?"}
                {inc column-index}
                || defaulted
                {if include-defaults? then
                    {column-values.append 
                        {if column-index == 1 then
                            null
                         else
                            defaults-as-values[i.index]
                        }
                    }
                }
                {inc column-index}
             else
                {if sql-column-values-buf.size > 0 then
                    {sql-column-values-buf.concat ","}
                    {if row-index == 0 then
                        {sql-column-names-buf.concat ","}
                    }
                }
                {if row-index == 0 then
                    {sql-column-names-buf.concat {format "t%d", column-index}}
                }
                {sql-column-values-buf.concat "?"}
                || non-defaulted
                {column-values.append
                    {generate-value i, row-index, column-index}
                }
                
                {inc column-index}

                || defaulted
                {sql-column-values-buf.concat ",?"}
                {if row-index == 0 then
                    {sql-column-names-buf.concat {format ", t%d", column-index}}
                }
                {column-values.append
                    {generate-value i, row-index, column-index}
                }
                {inc column-index}
            }
        }
    }
    {return column-values, sql-column-values-buf, sql-column-names-buf}
}

{define-proc package {make-table-name
                         database-name:String,
                         table-name:String
                     }:String
    {return
        {switch database-name
         case "main", "" do
            table-name
         else
            database-name & "." & table-name
        }
    }
}

{define-proc package {insert-test-data
                         database:SQLiteDatabase,
                         database-name:String,
                         table-name:String
                     }:void
    {for row-index = 0 below number-of-rows do
        let column-index:int = 0
        let (column-values:Array, sql-column-values-buf:StringBuf,
             sql-column-names-buf:StringBuf) =
            {data-for-row row-index}
        let sql:String =
            "INSERT INTO " &
            {make-table-name database-name, table-name} & 
            {if row-index == 0 then
                " (" & sql-column-names-buf & ") "
             else
                " "
            } &
            "VALUES(" & sql-column-values-buf & ")"
        {with-statement in database statement = sql do
            {statement.bind {splice column-values}}
            {statement.step}
        }
    }
}

{define-proc package {check-normal-rows
                         rs:SQLiteRecordSet,
                         start-row:int = 0,
                         skip-rows:#{Array-of int} = null,
                         skip-columns:#{Array-of int} = null
                     }:void
    let row-index:int = start-row
    {for record in {rs.to-Iterator} do
        {if-non-null skip-rows then
            {while {skip-rows.find row-index} >= 0 do
                {inc row-index}
            }
        }
        let data:Array = {data-for-row row-index, include-defaults? = true}
        let column-index:int = 0
        {for d in data do
            {if-non-null skip-columns then
                {if {skip-columns.find column-index} >= 0 then
                    {inc column-index}
                    {continue}
                }
            }
            let record-value:any = record[{format "t%d", column-index}]
            {assert {type-of d} == {type-of record-value} and
                {any-equal? d, record-value}}
            {inc column-index}
        }
        {inc row-index}
    }
}

{define-proc package {test-write-record-set
                         rs:SQLiteRecordSet,
                         skip-rows:#{Array-of int} = null,
                         skip-columns:#{Array-of int} = null,
                         commit-frequently?:bool = false
                     }:void
    || FIXME: Don't do this for VIEWS (until we make up some triggers to
    || make that work...)
    || Don't do this for things that skip rows because we don't know how to
    || calculate what is already missing properly.
    {if skip-rows == null and rs.modifiable? and
        not {rs.table-name.suffix? "view"}
     then
        {rs.load}
        let row-index:int = 0
        || Delete a few rows.
        {for r in {rs.to-Iterator} do
            {if row-index == 2 or row-index == 8 or row-index == 9 then
                {r.delete}
            }
            {inc row-index}
        }
        {if commit-frequently? then
            {rs.commit}
            {rs.load}
            {assert rs.size == 7}
            {check-normal-rows rs,
                skip-rows = {{Array-of int} 2, 8, 9},
                skip-columns = skip-columns
            }
        }
        || Don't do this for things that skip columns because there end up
        || being NOT NULL columns that aren't in the record set.
        {if skip-columns == null then
            || append a freshly made row 9
            let data:Array = {data-for-row 9}
            let rd:RecordData = {RecordData}
            {for d key i in data do
                let field-name:String = {format "t%d", i}
                let (rf:RecordField, found?:bool) =
                    {rs.fields.get-if-exists field-name}
                {if found? then
                    set rd[field-name] = d
                }
            }
            {rs.append rd}
            {if commit-frequently? then
                {rs.commit}
                {rs.load}
                {assert rs.size == 8}
                {check-normal-rows rs,
                    skip-rows = {{Array-of int} 2, 8},
                    skip-columns = skip-columns
                }
            }
        }
        let base-row-index:int =
            {if commit-frequently? then
                {if skip-columns == null then 7 else 6}
             else
                {if skip-columns == null then 10 else 7}
            }
        || Change last row into the values for row 8
        set row-index = 0
        {for r in {rs.to-Iterator} do
            {if row-index == base-row-index then
                let data:Array = {data-for-row 8}
                || batch events to make them easier to check
                {with rs.batch-events? = true do
                    {for d key i in data do
                        let field-name:String = {format "t%d", i}
                        let (rf:RecordField, found?:bool) =
                            {rs.fields.get-if-exists field-name}
                        {if found? then
                            set r[field-name] = d
                        }
                    }
                }
            }
            {inc row-index}
        }
        {rs.commit}
        {rs.load}
        {assert rs.size == {if skip-columns == null then 8 else 7}}
        {check-normal-rows rs,
            skip-rows =
                {if skip-columns == null then
                    {{Array-of int} 2, 9}
                 else
                    {{Array-of int} 2, 7, 9}
                },
            skip-columns = skip-columns
        }

        || Clear the recordset...
        {for r in {rs.to-Iterator} do
            {r.delete}
        }
        {rs.commit}
        {rs.load}
        {assert rs.size == 0}
        {if skip-columns == null then
            {rs.append {rs.new-record}}
            {for r in {rs.to-Iterator} do
                let data:Array = {data-for-row 0, include-defaults? = true}
                let column-index:int
                || batch events to make them easier to check
                {with rs.batch-events? = true do
                    {for i in SQLiteDecltype do
                        {for j in SQLiteNullness do
                            || non-defaulted
                            let field-name:String = {format "t%d", column-index}
                            let (rf:RecordField, found?:bool) =
                                {rs.fields.get-if-exists field-name}
                            {if found? then
                                set r[field-name] = data[column-index]
                            }
                            {inc column-index}
                            || Skip defaulted if maybe-null
                            {if j != SQLiteNullness.maybe-null then
                                let field-name:String =
                                    {format "t%d", column-index}
                                let (rf:RecordField, found?:bool) =
                                    {rs.fields.get-if-exists field-name}
                                {if found? then
                                    set r[field-name] = data[column-index]
                                }
                            }
                            {inc column-index}
                        }
                    }
                    {break}
                }
            }
            {rs.commit}
            {rs.load}
            {assert rs.size == 1}
            {rs.load}
            {assert rs.size == 1}
            {check-normal-rows rs,
                skip-rows = {{Array-of int} 1, 2, 3, 4, 5, 6, 7, 8, 9},
                skip-columns = skip-columns
            }
        }

        let database:SQLiteDatabase = (rs.connection asa SQLiteConnection).database
        let database-name:String = rs.database-name
        let table-name:String = {non-null rs.table-name}
        {database.execute "DELETE FROM " & {make-table-name database-name, table-name}}
        {insert-test-data (rs.connection asa SQLiteConnection).database, database-name, table-name}
    }
}

{define-proc package {test-load-record-set
                         rs:SQLiteRecordSet,
                         pre-loaded?:bool = true,
                         skip-rows:#{Array-of int} = null,
                         skip-columns:#{Array-of int} = null
                     }:void

    {assert rs.fields.size ==
        number-of-columns -
        {if-non-null skip-columns then skip-columns.size else 0}}
    {if not pre-loaded? then
        {assert rs.size == 0}
        {rs.load}
    }
    {assert rs.size ==
        number-of-rows - {if-non-null skip-rows then skip-rows.size else 0}}
    {check-normal-rows
        rs, start-row = 0,
        skip-rows = skip-rows, skip-columns = skip-columns
    }

    {if skip-rows == null or skip-rows.size < (number-of-rows - 7) then
        {rs.load-range 2, 5}
        {assert rs.size == 5}
        {check-normal-rows rs, start-row = 2,
            skip-rows = skip-rows, skip-columns = skip-columns
        }
    }

    {rs.load-range 0, 1}
    {assert rs.size == 1}
    {check-normal-rows rs, start-row = 0,
        skip-rows = skip-rows, skip-columns = skip-columns
    }
    {if skip-rows == null or skip-rows.size < (number-of-rows - 2) then
        {rs.load-range 2, 0}
        {assert rs.size == 0}
    }

    {if skip-rows == null or skip-rows.size < (number-of-rows - 8) then
        {rs.load-range 8, -1}
        {assert rs.size == number-of-rows - 8}
        {check-normal-rows rs, start-row = 8,
            skip-rows = skip-rows, skip-columns = skip-columns
        }
    }

    {test-write-record-set rs,
        skip-rows = skip-rows,
        skip-columns = skip-columns,
        commit-frequently? = true
    }
    {test-write-record-set rs,
        skip-rows = skip-rows,
        skip-columns = skip-columns,
        commit-frequently? = false
    }
}

{define-proc package {check-events
                         ra1:{Array-of RecordSetEvent},
                         ra2:{Array-of ClassType},
                         check-length:int = ra2.size
                     }:void
    {assert ra1.size == check-length}
    {for i = 0 below check-length do
        let ra:RecordSetEvent = ra1[i]
        {assert {type-of ra} == ra2[i]}
    }
}

{let package constant event-types:{Array-of ClassType} =
    {new {Array-of ClassType},
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordAdded,
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges, || until 7.0.5 RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordAdded,
        RecordsBulkChanges, || until RTE 7.0.5 RecordModified
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordAdded,
        RecordsBulkChanges, || until RTE 7.0.5 RecordModified
        RecordsBulkChanges,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordAdded,
        RecordsBulkChanges, || until RTE 7.0.5 RecordModified
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged
    }
}
{let package constant skip-columns-event-types:{Array-of ClassType} =
    {new {Array-of ClassType},
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges, || until RTE 7.0.5 RecordModified
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges, || until RTE 7.0.5 RecordModified
        RecordsBulkChanges,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged
    }
}

{let package constant skip-columns-event-types2:{Array-of ClassType} =
    {new {Array-of ClassType},
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified, || not modified
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified, || not modified 
        RecordsBulkChanges,
        RecordsBulkChanges,
        RecordSetLoadStateChanged,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordModified,
        RecordsBulkChanges,
        RecordSetLoadStateChanged
    }
}

{define-proc package {do-recordsets-read
                         con:SQLiteConnection,
                         database:SQLiteDatabase,
                         database-name:String,
                         table-name:String
                     }:void
    let r:{Array-of RecordSetEvent} = {new {Array-of RecordSetEvent}}
    let rs:SQLiteRecordSet =
        {con.create-sql-record-set-from-table-name
            database-name,
            table-name,
            request-modifiable? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {test-load-record-set rs}
    {assert rs.modifiable?}
    {check-events r, event-types}
    {r.clear}

    set rs =
        {con.create-sql-record-set-from-table-name
            database-name,
            table-name,
            load-now? = false,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {test-load-record-set rs, pre-loaded? = false}
    {assert not rs.modifiable?}
    {check-events r, event-types, check-length = 10}
    {r.clear}

    set rs =
        {con.create-sql-record-set-from-table-name
            database-name,
            table-name,
            strict-types? = true,
            request-modifiable? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {test-load-record-set rs}
    {assert rs.modifiable?}
    {check-events r, event-types}
    {r.clear}

    set rs =
        {con.create-sql-record-set-from-table-name
            database-name,
            table-name,
            || Should we also test a base-where-clause that does something?
            base-where-clause = |"t0 <> 'xxx' OR t0 ISNULL"|,
            request-modifiable? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {test-load-record-set rs}
    {assert rs.modifiable?}
    {check-events r, event-types}
    {r.clear}

    set rs =
        {SQLiteRecordSet.create-from-table-name
            con,
            database-name,
            table-name,
            || Should we also test a base-where-clause that does something?
            base-where-clause = |"t2 <> ?"|,
            base-where-clause-parameters = {Arguments "yyy"},
            {on e:RecordSetEvent do
                {r.append e}
            }
        }
    {test-load-record-set rs}
    {assert not rs.modifiable?}
    {check-events r, event-types, check-length = 10}
    {r.clear}

    set rs =
        {SQLiteRecordSet.create-from-table-name
            con,
            database-name,
            table-name,
            || Should we also test a base-where-clause that does something?
            base-where-clause = |"t2 == @abc"|,
            base-where-clause-parameters = {Arguments abc = "Bc"},
            request-modifiable? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        }
    {test-load-record-set
        rs,
        skip-rows =
            {new {Array-of int},
                0, 2, 3, 4, 5, 6, 7, 8, 9
            }
    }
    {assert rs.modifiable?}
    {check-events r,
        {{Array-of ClassType}
            RecordAdded,
            RecordSetLoadStateChanged,
            RecordsBulkChanges,
            RecordSetLoadStateChanged
        }
    }
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            "SELECT * from " & {make-table-name database-name, table-name},
            table-name = table-name,
            request-modifiable? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {test-load-record-set rs}
    || table0 has no declared primary-key, so it can only be modifiable
    || when primary keys are in the query (since ROWID is not part of query.)
    {assert rs.modifiable? == (table-name != "table0")}
    {check-events r, event-types,
        check-length =
            {if (table-name == "table0") then 10 else event-types.size}
    }
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            || Without "as ROWID", t14 gets renamed for table3
            "SELECT ROWID as ROWID, * from " &
                {make-table-name database-name, table-name},
            table-name = table-name,
            request-modifiable? = true,
            hidden-primary-key-field = 0,
            strict-types? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {test-load-record-set rs}
    {assert rs.modifiable?}
    {check-events r, event-types}
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            "SELECT t0 from " &
                {make-table-name database-name, table-name},
            table-name = table-name,
            request-modifiable? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    || table1 is all primary-keys.
    || This would not actually work unless it had a narrowing base-where-clause
    || that made t0 a stand alone primary-key.
    {assert rs.modifiable? == (table-name == "table1")}
    {test-load-record-set
        rs,
        skip-columns =
            {new {Array-of int},
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,
                13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
            }
    }
    {check-events r, skip-columns-event-types2,
        check-length =
            {if (table-name == "table1") then skip-columns-event-types.size else 10}
    }
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            "SELECT ROWID as ROWID, t0, t8, t22 from " &
                {make-table-name database-name, table-name},
            table-name = table-name,
            request-modifiable? = true,
            strict-types? = true,
            hidden-primary-key-field = 0,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    || table1 is all primary-keys.
    || This would not actually work unless it had a narrowing base-where-clause
    || that made t0 a stand alone primary-key.
    {assert rs.modifiable?}
    {test-load-record-set
        rs,
        skip-columns =
            {new {Array-of int},
                1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12,
                13, 14, 15, 16, 17, 18, 19, 20, 21, 23
            }
    }
    {check-events r, skip-columns-event-types}
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            "SeLeCt tb0.t0, tb1.t8, tb0.t22 FROM " &
                {make-table-name database-name, "table0"} & " AS tb0, " &
                {make-table-name database-name, table-name} & " AS tb1" &
                " WHERE tb0.t2 == tb1.t2"
            ,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {test-load-record-set
        rs,
        skip-columns =
            {new {Array-of int},
                1, 2, 3, 4, 5, 6, 7, 9, 10, 11, 12,
                13, 14, 15, 16, 17, 18, 19, 20, 21, 23
            }
    }
    {check-events r, skip-columns-event-types, check-length = 10}
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            "PRAGMA " & {make-table-name database-name, "table_info"} &
            "(" & table-name & ")",
            table-name = null,
            request-modifiable? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {assert rs.size == number-of-columns}
    {assert rs.fields.size == 6}
    {rs.load-range 2, 5}
    {assert {{rs.to-Iterator}.read-one}["name"] == "t2"}
    {assert rs.size == 5}
    {rs.load-range 0, 1}
    {assert rs.size == 1}
    {rs.load-range 2, 0}
    {assert rs.size == 0}
    {rs.load-range 8, -1}
    {assert {{rs.to-Iterator}.read-one}["name"] == "t8"}
    {assert rs.size ==
        (number-of-columns - 8)}
    {assert not rs.modifiable?}
    {check-events r, event-types, check-length = 10}
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            "SELECT count(*) from " &
                {make-table-name database-name, table-name},
            table-name = table-name,
            request-modifiable? = true,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    {assert not rs.modifiable?}
    {assert rs.size == 1}
    {assert rs.fields.size == 1}
    {check-events r, {{Array-of ClassType} RecordAdded, RecordSetLoadStateChanged}}
    {r.clear}

    set rs =
        {SQLiteRecordSet.create-from-table-name
            con,
            database-name,
            table-name & "view",
            request-modifiable? = true,
            load-now? = false,
            {on e:RecordSetEvent do
                {r.append e}
            }
        }
    {assert not rs.modifiable?}
    {test-load-record-set rs, pre-loaded? = false}
    {assert not rs.modifiable?}
    {check-events r, event-types, check-length = 10}
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            || Without "as ROWID", t14 gets renamed for table3
            "SELECT ROWID as ROWID, * from " &
                {make-table-name database-name, table-name & "view"},
            table-name = table-name & "view",
            request-modifiable? = true,
            hidden-primary-key-field = 0,
            strict-types? = true,
            load-now? = false,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    || Can't tell that it isn't modifiable? until we load.
    {assert rs.modifiable?}
    {test-load-record-set rs, pre-loaded? = false}
    {assert not rs.modifiable?}
    {check-events r, event-types, check-length = 10}
    {r.clear}

    set rs =
        {con.create-sql-record-set
            database-name,
            "SELECT * from " &
                {make-table-name database-name, table-name & "view"},
            table-name = table-name & "view",
            request-modifiable? = true,
            primary-keys = {StringArray "t14"},
            load-now? = false,
            {on e:RecordSetEvent do
                {r.append e}
            }
        } asa SQLiteRecordSet
    || modifiable because we are providing a primary-key
    {assert rs.modifiable?}
    {test-load-record-set rs, pre-loaded? = false}
    {assert rs.modifiable?}
    {check-events r, event-types, check-length = 10}
    {r.clear}

}

{define-proc package {do-once-per-database-tests
                         con:SQLiteConnection,
                         database:SQLiteDatabase,
                         database-name:String
                     }:void
    {try
        let rs:SQLiteRecordSet =
            {con.create-sql-record-set
                database-name,
                "SELECT * from " &
                    {make-table-name database-name, "dne"},
                table-name = "dne"
            }
        {error "Should have failed..."}
     catch ex:SQLiteException do
        || TODO: Is this the right type of exception?
    }
    {try
        let rs:SQLiteRecordSet =
            {con.create-sql-record-set
                database-name,
                "bork bork bork"
            }
        {error "Should have failed..."}
     catch ex:SQLiteException do
        || TODO: Is this the right type of exception?
    }

    || test that auto-increment markings are right.
    {try
        {create-table
            database, database-name, "testai1",
            "id INTEGER PRIMARY KEY, val", create-view? = false
        }
        def rs =
            {SQLiteRecordSet.create-from-table-name
                con,
                database-name,
                "testai1",
                request-modifiable? = true
            }
        {assert ({rs.fields.get-if-exists "id"} asa SQLRecordField).auto-increment?}
     finally
        {drop-table database, database-name, "testai1"}
    }
    {try
        {create-table
            database, database-name, "testai2",
            "id2 INTEGER PRIMARY KEY AUTOINCREMENT, val", create-view? = false
        }
        def rs =
            {SQLiteRecordSet.create-from-table-name
                con,
                database-name,
                "testai2",
                request-modifiable? = true
            }
        {assert ({rs.fields.get-if-exists "id2"} asa SQLRecordField).auto-increment?}
     finally
        {drop-table database, database-name, "testai2"}
    }
    {try
        {create-table
            database, database-name, "testai3", "val",
            create-view? = false
        }
        def rs =
            {con.create-sql-record-set
                database-name,
                "SELECT rowid, val from " &
                    {make-table-name database-name, "testai3"},
                primary-keys = {StringArray "rowid"},
                table-name = "testai3",
                request-modifiable? = true
            }
        {assert ({rs.fields.get-if-exists "rowid"} asa SQLRecordField).auto-increment?}
     finally
        {drop-table database, database-name, "testai3"}
    }
}

{define-proc package {do-recordsets-for-all-tables
                         database:SQLiteDatabase, database-name:String,
                         database-count:int = 1
                     }:void
    let con:SQLiteConnection = {SQLiteConnection database}
    let tables-columns:StringArray = {make-tables-columns}
||--    {output "== ", database-name, " - ", database.url}
||--    {output {DateTime}}
    {try

        {for tc key i in tables-columns do
            let table-name:String = {format "table%d", i}
||--            {output "  == ", table-name, " at ", {DateTime}}
            {drop-table database, database-name, table-name}
            {create-table database, database-name, table-name, tc}
            {insert-test-data database, database-name, table-name}

            {assert {con.table-exists? database-name, table-name}}
            {assert {con.table-exists? database-name, table-name & "view"}}
            {do-recordsets-read con, database, database-name, table-name}
            || reset table.
        }
        {do-once-per-database-tests con, database, database-name}
        {assert {con.get-database-names}.size == database-count}
        {assert
            {con.get-tables database-name}.size == (tables-columns.size * 2)}
     finally
        {for tc key i in tables-columns do
            let table-name:String = {format "table%d", i}
            {drop-table database, database-name, table-name}
        }
    }
}

{define-proc package {localfile-pragma
                         db:SQLiteDatabase,
                         name:String = ""
                     }:void
    || enormously faster
    {switch name
     case "", "main", "temp" do
        {db.execute "PRAGMA synchronous = OFF"}
     else
        || attached databases need prefix
        {db.execute "PRAGMA " & name & ".synchronous = OFF"}
    }
    {db.execute "PRAGMA temp_store = MEMORY"}

}

{define-proc package {do-databases}:void
    {with-database
        db = {SQLiteDatabase null}
     do
        {do-recordsets-for-all-tables db, ""}
    }
    {with-database
        db = {SQLiteDatabase {url "curl://temp/xyz"}}
     do
        {localfile-pragma db}
        {do-recordsets-for-all-tables db, "main"}
    }
    {with-database
        db = {SQLiteDatabase {url "curl://temp/xyz2"}}
     do
        {localfile-pragma db}
||        {db.execute "ATTACH '" &
||            {url "curl://temp/xyz"}.local-filename & "' AS xyz"}
        {db.attach {url "curl://temp/xyz"}, "xyz"}
        {localfile-pragma db, name = "xyz"}
        {do-recordsets-for-all-tables db, "xyz", database-count = 2}
        {do-recordsets-for-all-tables db, "", database-count = 2}
        {db.detach "xyz"}
    }
    {with-database
        db = {SQLiteDatabase null}
     do
        {localfile-pragma db, name = "temp"}
        {do-recordsets-for-all-tables db, "temp", database-count = 2}
    }

    {delete {url "curl://temp/xyz"}, error-if-missing? = false}
    {delete {url "curl://temp/xyz2"}, error-if-missing? = false}
    || How can we test HTTP copying...
}

{do-databases}

|#
FIXME: missing test cases
*
Test each RecordSet for with strict? = true where it will fail due to
some bogus type data.
Test fill* with various sorts of changes (although fill* is a strange API...)
For modifiable ones, insert with wrong type/value values,
modify with bad values.

Add test to test NULL/CURRENT_DATE/CURRENT_TIME/CURRENT_TIMESTAMP defaulting.
#|

||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
|||
|||     http://www.apache.org/licenses/LICENSE-2.0
|||
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl-file-attributes character-encoding = "windows-latin-1"}

{let display:Frame = 
    {Frame vstretch? = true, hstretch? = true}
}

{let last-url-key:String = "SQLite-example last URL"}
{let last-url:String = ""} || The url last used}
{persistent-data "SQLite-example last URL", duration=60s}

|| ----------------------------------------------------------------------

{define-enum Priority
    normal = 0,
    high = 1,
    low = 2,
    hold = 3
}

{define-enum Status
    unstarted = 0,
    ongoing = 1,
    done = 2
}

{define-class public {EnumDropdownCell-of E:EnumType}  {inherits StandardDropdownCell}
 
 {method protected {create-editor}:DropdownList
   || allowable values from enum
   def choices = {Array}
   {for k in E do
       {choices.append {ListValueItem k.index, label = k.name}}}
   || NOTE: because SRGDropdownCell is not public
   def ui-object = {super.create-editor}.ui-object asa DropdownListUI
      {return
       {DropdownList
           active-traversal-container = null,
           margin = 2px,
           vorigin = 0.0,
           horigin = 0.0,
           ui-object = ui-object,
           {splice choices},
           test-visible? = false,
           {on ValueFinished at ddl:DropdownList do
               || don't use self! (see docstring)
               {if-non-null ddl-parent = ddl.parent then
                   {type-switch ddl-parent.parent
                    case srgc:StandardRecordGridCell do
                       {if srgc.can-update? then
                           {srgc.attempt-update ddl.value}}
                   }
               }
           }
       }
   }
 }

  {method public {format data:any}:String
    let ret:String = {super.format data}
    {if not ret.empty? then
        set ret = {E index = {ret.to-int}}.name
    }
    {return ret}
  }
}
{def priority-cell = {EnumDropdownCell-of Priority}}
{def status-cell = {EnumDropdownCell-of Status}}

|| ----------------------------------------------------------------------

{let constant arb-color:FillPattern = "#f1F1FF"}

{define-class public open SQLiteDialog {inherits Dialog}
  field public connection:SQLiteConnection
  field public task-rg:RecordGrid
  field public task-rs:ConnectedRecordSet
  field public contact-rg:RecordGrid
  field public contact-rs:ConnectedRecordSet
  field public stat-frame:Frame = 
      {Frame margin = 2px, font-weight = "bold"}

  {method protected {get-rg-height}:any
    {return {make-elastic 
                minimum-size = 3in, 
                preferred-size = 5in
            }
    }
  }

  {method protected {get-rg-width}:any
    {return {make-elastic 
                minimum-size = 3.5in + 60pt + 60pt + 8pt,
                preferred-size = 6in,
                compress-order = rigid-compress-order
            }
    }
  }

  {constructor public {default
                          url:Url
                      }
    set self.connection = {SQLiteConnection database-url = url, error-if-missing? = true}
    set self.task-rs =
        {self.connection.create-sql-record-set-from-table-name
            "main", "task", request-modifiable? = true
        }
    set self.contact-rs =
        {self.connection.create-sql-record-set-from-table-name
            "main", "contact", request-modifiable? = true
        }

    set self.task-rg = 
        {RecordGrid
            background = "#f0f0f0",
            width = {self.get-rg-width},
            height = {self.get-rg-height},
            display-navigation-panel? = false,
            record-source = self.task-rs,
            alternate-row-background=arb-color,
            display-record-selectors? = false,
            automatic-columns? = false,
            {RecordGridColumn "task", 
                width = {make-elastic minimum-size = 2in, 
                            preferred-size = 5in,
                            compress-order = rigid-compress-order
                        },
                header-spec = "Task"
            },
            {RecordGridColumn "priority", width=60pt, header-spec = "Priority", cell-spec = priority-cell},
            {RecordGridColumn "status", width=60pt, header-spec = "Status", cell-spec = status-cell}
        }

    set self.contact-rg = 
        {RecordGrid
            width = {self.get-rg-width},
            height = {self.get-rg-height},
            display-navigation-panel? = false,
            record-source = self.contact-rs,
            alternate-row-background=arb-color,
            display-record-selectors? = false,
            automatic-columns? = false,
            {RecordGridColumn "name", width=90pt, header-spec = "Name"},
            {RecordGridColumn "e_mail", width=120pt, header-spec = "e-mail"},
            {RecordGridColumn "work_phone", width=60pt, header-spec = "Work Phone"},
            {RecordGridColumn "home_phone", width=60pt, header-spec = "Home Phone"}
        }

    let task-panel:TabPane = 
        {TabPane label = "&Tasks", {self.make-panel self.task-rg}}
    let contact-panel:TabPane = 
        {TabPane label = "&Contacts", {self.make-panel self.contact-rg}}

    let vb:VBox = {VBox hstretch? = true, spacing = 2px}

    {self.add vb}
    {vb.add {HBox {Fill}, self.stat-frame}}

    {vb.add {TabContainer 
                  width = {add-stretch},
                  height = {add-stretch},
                  task-panel, contact-panel, {self.utility-pane}
              }
    }
    {self.task-rs.add-event-handler
        {self.create-rs-handler task? = true}
    }
    {self.contact-rs.add-event-handler
        {self.create-rs-handler}
    }
    {self.add-event-handler
        {on ae:AttachEvent at sd:SQLiteDialog do
            {after 0s do
                {ae.root-frame.set-size-from-child}
            }
        }
    }

  }
  
  {method private {create-rs-handler task?:bool = false}:EventHandler
    let committing-rs?:bool = false
    let eh:EventHandler = {on rme:RecordModified at rs:RecordSet do
                              {if committing-rs? then {return}}
                              
                              {with committing-rs? = true do
                                  let record:Record = rme.record
                                  {try
                                      {if record.state == RecordState.deleted
                                       then
                                          {after 0s do {rs.commit}}
                                       elseif record.state !=
                                          RecordState.appended or
                                          || make sure row is complete.
                                          (task? and
                                           (record["task"] != null and 
                                            record["priority"] asa int >= 0 and
                                            record["status"] asa int >= 0)) or
                                          (not task? and
                                           (record["name"] != null))
                                       then
                                          {rs.commit}
                                      }
                                   catch ex:Exception do
                                      {popup-message ex.message}
                                      {after 0s do
                                          {rs.revert}}
                                  }
                              }
                          }
    {return eh}
  }


  {method protected open {set-task-rg-height}:void
    {set self.task-rg.height = (self.task-rg.records.size + 2) * 15.0pt}
  }

  {method protected open {make-panel rg:RecordGrid}:Graphic
    let r:Graphic = 
        {VBox
            hstretch? = true,
            rg,
            {Fill},
            {HBox spacing = 4pt,
                {CommandButton label = "&Save", 
                    bound-command = {rg.get-command "commit"}
                },
                {Fill},
                {CommandButton label="&Delete Item", 
                    {on Action do
                            {rg.current-record.delete}
                            {self.set-task-rg-height}
|#
                        {type-switch rg.current-record 
                         case cr:DelegatingRecord do
                            {cr.source-record.delete}
                            {self.set-task-rg-height}
                        }
#|
                    }
                },
                {CommandButton label="&Add Item", 
                    {on Action do
                        {self.add-item rg}
                        {self.set-task-rg-height}
                    }
                }
            }
        }
    {return r}
  }

  {method public open {add-item rg:RecordGrid}:Record
    {if-non-null rs:RecordSet = rg.record-source then
        let r:Record = {rs.new-record}
        {rs.append r}
        {if-non-null last = {rg.get-command "move-last"} then
            {if-non-null impl = last.impl then
                {if impl.enabled? then
                    {impl.do-command}
                }
            }
        }
        {rg.become-active-from-traversal}
        {return r}
     else
        {error "Internal error: null rs"}
    }
  }

  {method public open {utility-pane}:Graphic
    let r:TabPane = 
        {TabPane
            label = "&Utility",

            {Table columns = 2,
                width = {make-elastic preferred-size = 4in,
                            minimum-size = 2in,
                            compress-order = rigid-neutral-stretch-order
                        },

                {text Create a new SQLite database. You will be asked to
                    choose a file where the db files will be saved.
                    It is best to create a new file. 
                },
                {CommandButton
                    label = "&Create...",
                    width = standard-button-width,
                    {on Action do
                        {create-db}
                    }
                },

                {text Open an existing SQLite database. You will be asked
                    to navigate to the database file.
                },
                {CommandButton
                    label = "&Open...",
                    width = standard-button-width,
                    {on Action do
                        {if-non-null url =
                            {choose-file
                                title = "Locate the SQLite file"
                            }
                         then
                            {open-db url}
                        }
                    }
                }||,
||--                {CommandButton
||--                    label = "&Remove...",
||--                    {on Action do
||--                        {remove-persistent-data
||--                            last-url-key,
||--                            error-if-missing? = false
||--                        }
||--                        {commit-persistent-data}
||--                    }
||--                }
            }
        }
    {return r}
  }
}

{define-proc {open-db url:Url}:void
    let sd:SQLiteDialog = {SQLiteDialog url}
    {sd.stat-frame.add replace? = true, url.name}
    {display.add replace? = true, sd}
    
    || Update the value in the repository
    set last-url = url.name
    {set-persistent-data last-url-key, last-url}
    {commit-persistent-data}
}

{define-proc {create-db}:void
    {if-non-null url =
        {choose-file
            style = FileDialogStyle.save-as, 
            title = "Specify db file to save"
        }
     then
        def db = {SQLiteDatabase url}

        {db.execute "
CREATE TABLE task (
task TEXT NOT NULL,
priority INTEGER CHECK(priority >= 0 AND priority <= 3),
status INTEGER CHECK(status >= 0 AND status <= 2));"}

        {db.execute "
CREATE TABLE contact (
name TEXT NOT NULL, 
e_mail TEXT, 
work_phone TEXT, 
home_phone TEXT);"}

        {open-db url}
    }
}

{do
    {try
        set last-url = {get-persistent-data last-url-key} asa String
        {after 0s do
            {try
                {open-db {url last-url}}
             catch mfe:MissingFileException do
                || Failed to open previous url. Start fresh.
                set last-url = ""
                {create-db}

             catch se:SQLiteException do
                set last-url = ""
                {create-db}
            }
        }
     catch not-found:KeyNotFoundException do
        || Key not found in repository, start fresh
        set last-url = ""
        {create-db}
    }
}

||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public abstract AbstractOperation {inherits AbstractInvoker}
  field public arguments:#Arguments
  field public name:#String
  field public service:#AbstractService

  {constructor public {default
                          service:#AbstractService = null,
                          name:#String = null,
                          ...:EventHandler
                      }
    set self.service = service
    set self.name = name
  }

  {method public abstract {send ...:any}:#AsyncToken}

  {method protected {set-service service:AbstractService}:void
    {if-non-null self.service then
        {throw {new Exception, "Can not reset service"}}
     else
        set self.service = service
    }
  }

  {method protected {dispatch-rpc-event event:AbstractEvent}:void
    {event.call-token-responders}
||--    {if not {event.is-default-prevented?} then
        {if {self.accepts-event-class? {type-of event} asa ClassType} then
            {self.enqueue-event event}
         else
            {self.service.enqueue-event event}
        }
||--    }
  }
}

||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public CurlConnectionMessageResponder {inherits MessageResponder}

  {constructor public {default
                          agent:#MessageAgent,
                          message:IMessage,
                          channel:#CurlConnectionChannel = null
                      }
    {construct-super agent, message, channel = channel}
    {if-non-null self.channel then
        {self.channel.add-event-handler
            {on e:ChannelEvent do
                {switch e.type
                 case ChannelEvent.DISCONNECT do
                    {self.channel-disconnect-handler e}
                }
            }
        }
        {self.channel.add-event-handler
            {on e:ChannelFaultEvent do
                {self.channel-fault-handler e}
            }
        }
    }
  }

  {method protected {request-timed-out}:void
    {self.disconnect}
    {self.status-handler {self.create-request-timeout-error-message}}
  }

  {method protected {disconnect}:void
    || TODO:
||--    {self.channel.remove-event-handler
||--        ChannelEvent.DISCONNECT,
||--        channel-disconnect-handler
||--    }
||--    {self.channel.remove-event-handler
||--        ChannelFaultEvent.FAULT,
||--        channel-fault-handler
||--    }
  }

  {method public {channel-disconnect-handler e:ChannelEvent}:void
    {self.disconnect}
    def err = {new ErrorMessage}
    set err.correlation-id = self.message.message-id
    set err.fault-string = "Delivery in doubt"
    set err.fault-detail = "TODO: Delivery in doubt details"
    set err.fault-code = ErrorMessage.MESSAGE_DELIVERY_IN_DOUBT
    {self.agent.fault err, self.message}
  }

  {method public {channel-fault-handler e:ChannelFaultEvent}:void
    {self.disconnect}
    def err = {new ErrorMessage}
    set err.correlation-id = self.message.message-id
    {if-non-null channel = e.channel then
        {if not channel.connected? then
            set err.fault-code = ErrorMessage.MESSAGE_DELIVERY_IN_DOUBT
        }
    }
    {self.agent.fault err, self.message}
  }

  {method protected {init-handlers}:void
    {super.init-handlers}
    set self.result-handler =
        {proc {msg:IMessage}:void
            {self.disconnect}
            {type-switch msg
             case am:AsyncMessage do
                {if am.correlation-id == self.message.message-id then
                    {self.agent.acknowledge
                        am asa AcknowledgeMessage,
                        self.message
                    }
                 else
                    def err = {new ErrorMessage}
                    set err.fault-code = "Server.Acknowledge.Failed"
                    set err.fault-string = "Acknowledge Failed"
                    set err.fault-detail =
                        am.correlation-id " != " self.message.message-id
                    set err.correlation-id = self.message.message-id
                    {self.agent.fault err, self.message}
                }
             else
                def err = {new ErrorMessage}
                set err.fault-code = "Server.Acknowledge.Failed"
                set err.fault-string = "Acknowledge Failed"
                set err.fault-detail = "No details available"
                set err.correlation-id = self.message.message-id
                {self.agent.fault err, self.message}
            }
        }
    set self.status-handler =
        {proc {msg:IMessage}:void
            {self.disconnect}
            {type-switch msg
             case am:AsyncMessage do
                {if am.correlation-id == self.message.message-id then
                    def ack = {new AcknowledgeMessage}
                    set ack.correlation-id = am.correlation-id
                    set ack.headers[AcknowledgeMessage.ERROR_HINT_HEADER] = true
                    {self.agent.acknowledge ack, self.message}
                    {self.agent.fault am asa ErrorMessage, self.message}
                 else
                    {type-switch am
                     case err:ErrorMessage do
                        {self.agent.fault err, self.message}
                     else
                        def err = {new ErrorMessage}
                        set err.fault-code = "Server.Acknowledge.Failed"
                        set err.fault-string = "No message available"
                        set err.fault-detail = "No details available"
                        set err.correlation-id = self.message.message-id
                        {self.agent.fault err, self.message}
                    }
                }
             else
                def err = {new ErrorMessage}
                set err.fault-code = "Server.Acknowledge.Failed"
                set err.fault-string = "Acknowledge Failed"
                set err.fault-detail = "No details available"
                set err.correlation-id = self.message.message-id
                {self.agent.fault err, self.message}
            }
        }
  }
 }

||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public ChannelFaultEvent {inherits ChannelEvent}
  field public fault-code:#String
  field public fault-detail:#String
  field public fault-string:#String
  field public root-cause:any

  let public constant FAULT:String = "channelFault"

  {constructor public {default
                          type:String,
                          bubbles?:bool = false,
                          cancelable?:bool = false,
                          channel:#Channel = null,
                          reconnecting?:bool = false,
                          code:#String = null,
                          level:#String = null,
                          description:#String = null,
                          rejected?:bool = false,
                          connected?:bool = false,
                          root-cause:any = null
                      }
    {construct-super
        type,
        bubbles? = bubbles?,
        cancelable? = cancelable?,
        channel = channel,
        reconnecting? = reconnecting?,
        rejected? = rejected?,
        connected? = connected?
    }
    set self.fault-code = code
    set self.fault-string = level
    set self.fault-detail = description
    set self.root-cause = root-cause
  }

  {method public {clone}:Event
    {return
        {new ChannelFaultEvent,
            self.type,
            bubbles? = self.bubbles?,
            cancelable? = self.cancelable?,
            channel = self.channel,
            reconnecting? = self.reconnecting?,
            code = self.fault-code,
            level = self.fault-string,
            description = self.fault-detail,
            rejected? = self.rejected?,
            connected? = self.connected?,
            root-cause = self.root-cause
        }
    }
  }

  {method public {to-String}:String
    {return {format "%s", self}}
  }
}

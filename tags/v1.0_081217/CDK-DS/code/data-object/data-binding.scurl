||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{doc-next ||=== DataObjectDataBindingContext
    {purpose An implementation of {docref DataBindingContext} 
        for a {docref dataObject} data source.}
}
{define-class public DataObjectDataBindingContext 
  {inherits DataBindingContext, ConcreteEventTarget}
  || TODO: make source modifiable
  || TODO: consider array source
  {doc-next ||=== DataObjectDataBindingContext.source
    {purpose The data source.}
  }
  field public-get constant source:DataObject
  {doc-next ||=== DataObjectDataBindingContext.fields
    {purpose Specifies the {docref DataObject} data source
    for this {ctext DataObjectDataBindingContext}.}
  }
  field public-get constant fields:#RecordFields
  {doc-next ||=== DataObjectDataBindingContext.default
    {purpose Create a {ctext DataObjectDataBindingContext} instance.}
    {parameter source, the {docref DataObject} data source.}
    {parameter fields, metadata characterizing the properties of the data source.}
    {parameter ..., the rest arguments may contain {docref EventHandler}s.}
  }
  {constructor public {default 
                          source:DataObject,
                          fields:#RecordFields = null,
                          ...} 
    set self.source = source
    set self.fields = fields
    {construct-super.DataBindingContext}
    || TODO: add weakly
    {self.source.add-event-handler
        {on e:DataObjectChanged do
            {for b in {self.bindings-for e.selector} do
                {b.refresh}}}}
    {self.process-rest-args ...}
  }
  || DataBinding implementation
  || --------------------
  || NOTE: docstring inherited
  {method public {get-data selector:any}:(any, bool)
    let (val:any, found?:bool) =
        {self.source.get-if-exists selector asa String}
    {return val, found?}
  }
  || NOTE: docstring inherited
  {method public {update-internal
                     ...:DataBinding
                 }:#DataBindingValidationFailure
    {return {self.operate-internal true, ...}}
  }
  || NOTE: docstring inherited
  {method public {validate-internal
                     ...:DataBinding
                 }:#DataBindingValidationFailure
    {return {self.operate-internal false, ...}}
  }
  {doc-next ||=== DataObjectDataBindingContext.operate-internal
    {purpose Used by {docref-abbr DataObjectDataBindingContext.update-internal}
        and {docref-abbr DataObjectDataBindingContext.validate-internal}.}
  }
  {method public {operate-internal 
                     update?:bool,
                     ...:DataBinding
                 }:#DataBindingValidationFailure
    let vs:{Array-of DataBindingValidationFailure} = 
        {{Array-of DataBindingValidationFailure}}
    {for b in ... do   
        let selector:String = b.data-selector asa String
        let failure:#DataBindingValidationFailure = null
        || get value from target
        let val:any = {b.get-parsed-value}
        {type-switch val
         case v:DataBindingValidationFailure do 
            set failure = v
         else
            || validate new value
            {if-non-null fields = self.fields then
                {if-non-null 
                    ex = {self.fields[selector].domain.validate val}
                 then
                    || convert ValidationException
                    set failure =
                        {DataBindingValidationFailure binding = b,
                            ex.message}}}
            || update source, if so requested and valid
            {if update? and failure == null then
                set self.source[selector] = val}}
        || report status
        set b.validation-failure = failure
        {if-non-null failure then            
            {vs.append failure}}
    }
    {return 
        {if vs.empty? then null
         elseif vs.size == 1 then vs[0]
         else {DataBindingMultipleValidationFailure {splice vs}}}}
  }
  || NOTE: docstring inherited
  {method public {parse val:any, binding:DataBinding}:any
    || use specified domain to parse if possible
    {if-non-null fields = self.fields then
        {type-switch val
         case str:String do
            let selector:String = binding.data-selector asa String
            let d:Domain = fields[selector].domain
            {try
                set val = {d.parse str}
             catch e:DataException do
                set val = {DataBindingValidationFailure e.message}}
        }}
    {return val}
  }
  || NOTE: docstring inherited
  {method public {format val:any, binding:DataBinding}:any
    {return
        {if val == null then
            DataBinding.unset
         elseif {binding.property-type.subtype-of? String} then
            || use specified domain to format if possible
            {if-non-null fields = self.fields then
                let selector:String = binding.data-selector asa String
                let d:Domain = fields[selector].domain
                {d.format val}
             else
                val}
         else
            val}}
  }
  {doc-next ||=== DataObjectDataBindingContext
    {purpose Returns the {docref DataBinding}s registered for 
        the specified selector.}
  }
  {method public {bindings-for selector:any}:{Set-of DataBinding}
    || TODO: inefficient
    || - better would be FilterIterator-of
    {return
        {self.registered-bindings.filter-clone 
            {proc {b:DataBinding}:bool
                {return b.data-selector == selector}}}}
  }
}
{doc-next ||=== ConcreteEventTarget
    {purpose An {docref EventTarget} that is not abstract.}
}
{define-class public ConcreteEventTarget {inherits EventTarget, InitRestArgParser}
  {constructor public {default ...}
    {construct-super.EventTarget}
    {self.process-rest-args ...}
  }
  {method public {non-keyword-init-arg x:any}:void
    {type-switch x
     case h:EventHandler do
        {self.add-event-handler h}
     else {super.non-keyword-init-arg x}}
  }
}

||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public PollSyncMessageResponder
  {inherits CurlConnectionMessageResponder}

    {constructor public {default
                            agent:MessageAgent,
                            imessage:IMessage,
                            channel:CurlConnectionChannel
                        }
      {construct-super agent, imessage, channel = channel}
    }

  {method protected {channel-disconnect-handler e:ChannelEvent}:void
    || This implementation intentionally left blank.
  }

  {method protected {channel-fault-handler e:ChannelFaultEvent}:void
    || This implementation intentionally left blank.
  }

  {method protected {init-handlers}:void
    {super.init-handlers}
    set self.result-handler =
        {proc {msg:IMessage}:void
||--            {super.result-handler msg}
            {self.disconnect}
            {type-switch msg
             case am:AsyncMessage do
                {if am.correlation-id == self.message.message-id then
                    {self.agent.acknowledge
                        am asa AcknowledgeMessage,
                        self.message
                    }
                 else
                    def err = {new ErrorMessage}
                    set err.fault-code = "Server.Acknowledge.Failed" ||""
                    set err.fault-string = {lmessage Acknowledge Failed}
                    set err.fault-detail =
                        {lmessage {value am.correlation-id} != 
                            {value self.message.message-id}}
                    set err.correlation-id = self.message.message-id
                    {self.agent.fault err, self.message}
                }
             else
                def err = {new ErrorMessage}
                set err.fault-code = "Server.Acknowledge.Failed" ||""
                set err.fault-string = {lmessage Acknowledge Failed}
                set err.fault-detail = {lmessage No details available}
                set err.correlation-id = self.message.message-id
                {self.agent.fault err, self.message}
            }
            {type-switch msg
             case am:AsyncMessage do
                {if am.correlation-id == self.message.message-id then
                    {type-switch self.message
                     case cm:CommandMessage do
                        {switch cm.operation
                         case CommandMessage.SUBSCRIBE_OPERATION do
                            {(self.channel asa
                              CurlConnectionChannel).enable-polling}
                         case CommandMessage.UNSUBSCRIBE_OPERATION do
                            {(self.channel asa
                              CurlConnectionChannel).disable-polling}
                        }
                    }
                }
            }
        }
  }
}

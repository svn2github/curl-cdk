||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public AuthenticationAgent {inherits MessageAgent}

  field private _state:int
  field private constant responders:{Array-of AuthenticationResultResponder}

  let public constant LOGGED_OUT_STATE:int = 0
  let public constant LOGGING_IN_STATE:int = 1
  let public constant LOGGED_IN_STATE:int = 2
  let public constant LOGGING_OUT_STATE:int = 3
  let public constant SHUTDOWN_STATE:int = 4

  {constructor public {default channel-set:ChannelSet}
    set self._state = AuthenticationAgent.LOGGED_OUT_STATE
    set self.responders = {{Array-of AuthenticationResultResponder}}
    set self.agent-type = "authentication agent" ||""
    set self.channel-set = channel-set
  }

  {getter public {state}:int
    {return self._state}
  }

  {setter public {state val:int}:void
    set self._state = val
    {if val == AuthenticationAgent.SHUTDOWN_STATE then
        {self.responders.clear}
    }
  }

  {method protected {call-result msg:IMessage}:void
    {for r in self.responders do
        {r.result msg}
    }
  }

  {method protected {call-status msg:IMessage}:void
    {for r in self.responders do
        {r.status msg}
    }
  }

  {method public {register-responder responder:AuthenticationResultResponder}:void
    {self.responders.append responder}
  }

  {method protected {acknowledge ack-msg:AcknowledgeMessage, msg:IMessage}:void
    {if self.state == AuthenticationAgent.SHUTDOWN_STATE then
        {return}
    }
    def (val, found?) = {ack-msg.headers.get-if-exists
                            AcknowledgeMessage.ERROR_HINT_HEADER}
    def error? = (found? and (val asa bool))

    {super.acknowledge ack-msg, msg}

    {if not error? then
        {self.channel-set.authenticate-succeeded
            self, (msg asa CommandMessage), ack-msg
        }
    }
  }

  {method protected {fault err-msg:ErrorMessage, msg:IMessage}:void
    {if self.state == AuthenticationAgent.SHUTDOWN_STATE then
        {return}
    }
    {super.fault err-msg, msg}

    {self.channel-set.authenticate-failed
        self, (msg asa CommandMessage), err-msg
    }
  }
}

||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public AsyncMessage {inherits AbstractMessage}

    || The storage and getters and setters for these are inherited
    || from IMessage.
    def public traits =
      {DataObjectTraits
        "flex.messaging.messages.AsyncMessage", ||""
        dynamic? = false,
        {StringArray
            ||""((
            "timestamp",
            "headers",
            "body",
            "correlationId",
            "messageId",
            "timeToLive",
            "clientId",
            "destination"
            ||""))
        }
      }

  field private _correlation-id:#String
  field private correlation-id-bytes:#ByteArray

  let public constant SUBTOPIC_HEADER:String = "DSSubtopic" ||""

  let private constant CORRELATION_ID_FLAG:uint = 1
  let private constant CORRELATION_ID_BYTES_FLAG:uint = 2

  {constructor public {default
                          body:any = null,
                          headers:IMessageHeaders = {IMessageHeaders}
                      }
    {construct-super body = body, headers = headers}
    set self.correlation-id = ""
  }

  {getter public {correlation-id}:#String
    {return self._correlation-id}
  }

  {setter public {correlation-id s:#String}:void
    set self._correlation-id = s
    set self.correlation-id-bytes = null
  }

  {method public {get-small-message}:#IMessage
    {if {type-of self} == AsyncMessage then
        {return {AsyncMessageExt message = self}}
    }
    {return null}
  }

  || A convenience method for deserializing externalizable AsyncMessages.
  {method public {read-external deserializer:AMFDeserializer}:void
    {super.read-external deserializer}
    def flags-array = {AbstractMessage.read-flags deserializer.input}
    {for flags key i in flags-array do
        let reserved-position:uint8 = 0
        {switch i
         case 0 do
            {if {bit-and flags, AsyncMessage.CORRELATION_ID_FLAG} != 0 then
                set self.correlation-id = {deserializer.read-one} asa String
            }
            {if {bit-and flags, AsyncMessage.CORRELATION_ID_BYTES_FLAG} != 0
             then
                set self.correlation-id-bytes = {deserializer.read-one} asa ByteArray
                {if-non-null bytes = self.correlation-id-bytes then
                    set self.correlation-id =
                        {AbstractMessage.uid-from-ByteArray bytes}
                }
            }
            set reserved-position = 2
        }
        {if {bit-srl flags, reserved-position} != 0 then
            {for j = reserved-position below 6 do
                {if {bit-and {bit-srl flags, j}, 1} != 0 then
                    {deserializer.read-one}
                }
            }
        }
    }
  }

  {method public {write-external serializer:AMFSerializer}:void
    {super.write-external serializer}

    {if self.correlation-id-bytes == null then
        set self.correlation-id-bytes =
            {AbstractMessage.uid-to-ByteArray self.correlation-id}
    }

    let flags:uint = 0

    {if not self.correlation-id.empty? and self.correlation-id-bytes == null then
        set flags = {bit-or flags, AsyncMessage.CORRELATION_ID_FLAG}
    }
    {if self.correlation-id-bytes != null then
        set flags = {bit-or flags, AsyncMessage.CORRELATION_ID_BYTES_FLAG}
    }
    {serializer.output.write-one flags asa uint8}

    {if not self.correlation-id.empty? and self.correlation-id-bytes == null then
        {serializer.write-one self.correlation-id}
    }
    {if-non-null correlation-id-bytes = self.correlation-id-bytes then
        {serializer.write-one correlation-id-bytes}
    }
  }
}

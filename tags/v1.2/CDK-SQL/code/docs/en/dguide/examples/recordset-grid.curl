||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 7.0, 8.0 applet}
{applet manifest = "../manifest.mcurl",
    {compiler-directives careful? = true}}
{import * from COM.CURL.CDK.SQLITE}

{value
    || database and connection
    def db = {SQLiteDatabase null}
    def con = {SQLiteConnection db}
    || schema and data
    {db.execute {read-from {url "products.sql"}}}
    || recordset
    def rs =
        {SQLiteRecordSet.create-from-table-name con, "main",  
            "products",
            request-modifiable? = true,
            strict-types? = true}
    || grid display
    def rg =
        {RecordGrid record-source = rs,        
            width = 4in,       
            height = 3in,
            display-filler-column? = true,
            automatic-columns? = false,
            {RecordGridColumn "name", header-spec = "Name",
                width = 1in},
            {RecordGridColumn "price", header-spec = "Price",
                width = .75in,
                format-spec = "%.02f", halign = "right"},
            row-background-spec =
                {proc {rg:RecordGrid, r:Record, i:int}:#Background
                    {return
                        {switch r.state
                         case RecordState.original do null
                         else "lightblue"}}}}
    || operations
    def autocommit =
        {proc {}:bool
            let ok?:bool = true
            {if rg.current-record.pending-update? then
                {try
                    || attempt commit
                    {rs.commit}
                 catch ex:Exception do
                    || commit failed: probably constraint violation
                    {if {popup-question title = {lmessage Warning},
                            {paragraph
                                {text color = "red", {value ex}}
                                
                                Cancel pending update?}
                        } == Dialog.yes
                     then
                        || retract pending change
                        {rs.revert}
                     else
                        || veto change request, allowing correction
                        set ok? = false
                    }}}
            {return ok?}}
    def insert-record =
        {proc {}:void
            {autocommit}
            || allocate record
            def r = {rs.new-record}
            || default values
            set r["name"] = "(name)"
            set r["price"] = 0.0
            || insert
            {rs.append r}
            || focus on new record
            || NOTE: identified by its lack of ID
            set rg.current-index = 
                {rg.records.find
                    {RecordData id = null}}
        }
    || coordination
    {rg.add-event-handler
        {on e:CurrentRecordChangeRequest do
            || autocommit pending update
            {if not {autocommit} then
                || veto change request, allowing correction
                {e.consume}}
        }}
    || display
    {VBox spacing = 3px,
        rg,
        {HBox margin = 3px, spacing = 6px,
            {CommandButton label = {message Insert Record},
                {on Action do
                    {insert-record}}},
            {CommandButton label = {message Delete Record},
                {on Action do
                    {if-non-null r = rg.current-record then
                        {r.delete}}}},
            {CommandButton label = {message Commit},
                bound-command = {rg.get-command "commit"}},
            {CommandButton label = {message Revert},
                bound-command = {rg.get-command "revert"}},
            {Fill}}}
}

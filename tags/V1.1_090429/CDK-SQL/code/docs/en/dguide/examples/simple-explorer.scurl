||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public QueryDisplay {inherits BaseFrame}
  || model
  field public-get constant database:SQLiteDatabase
  field public-get constant query-model:QueryModel
  field public-get policy:#AuthorizationPolicy
  || presentation
  field grid:RecordGrid
  field query-panel:TextArea
  field progress:ProgressBar
  
  || construction
  {constructor public {default 
                          database:SQLiteDatabase,
                          policy:#AuthorizationPolicy = null, 
                          ...}
    set self.policy = policy
    set self.database = database
    {if-non-null policy = self.policy then
        {policy.register self.database}}
    set self.query-model = {QueryModel self.database}
    
    || controls
    set self.query-panel =
        {TextArea
            width = {add-stretch},
            height = {add-stretch},
            {on ValueChanged at c:TextArea do
                set self.query-model.sql = c.value}}
    set self.grid =
        {RecordGrid
            width = {add-stretch},
            height = {add-stretch}}
    set self.progress =
        {ProgressBar width = .75in}
    def command-bar =
        {HBox
            {CommandButton label = "Execute",
                {on Action do
                    {self.execute}}},
            {CommandButton label = "Cancel",
                {on Action do
                    {self.database.interrupt}}},
            {Fill},
            self.progress}
    
    || layout
    def main = {PanedWindow orientation = "vertical"}
    {main.add-pane self.query-panel}
    {main.add-pane
        self.grid}
    {main.set-pane-sizes {{Array-of double} 20%, 80%}}
    def display =
        {VBox
            hstretch? = true,
            command-bar,
            main}
    {construct-super {splice ...}}
    {self.add-internal display}
    
    || coordination
    {self.query-model.add-event-handler
        {on QueryStateChanged at q:QueryModel do
            {self.note-query-state-changed q}
        }}
    
    || progress
    def instructions-interval = 50
    {self.database.set-progress-handler instructions-interval,
        {proc {}:bool
            || NOTE: allow refresh display, possible cancel
            {dispatch-events false}
            {self.note-progress-ongoing}
            {return false}
        }}
  }
  || operations
  {method {execute}:void
    {with-busy-cursor
        {self.query-model.execute}}
  }
  || presentation
  {method {note-query-state-changed q:QueryModel}:void
    {self.note-progress-stop}
    {switch q.state
        
     case QueryState.unknown do
        || nothing to do
        
     case QueryState.running do
        {self.note-progress-start}
        
     case QueryState.complete do
        {self.note-result
            {non-null q.result}}
        
     case QueryState.failure do
        {self.note-failure
            {non-null q.exception}}
        
     else {unreachable}}
  }
  {method {note-result result:RecordSet}:void
    def elapsed = {self.started.elapsed}
    {output {message selected {value result.size} in  {value elapsed}}}
    {self.refresh-grid result}
  }
  {method {note-failure exception:Exception}:void
    {popup-message exception.message}
  }
  || progress
  field started:DateTime = {DateTime}
  field last-progress-report:Time
  {method {note-progress-start}:void
    {self.report-progress ""}
    set self.started = {DateTime}
    set self.last-progress-report = 0s
  }
  {method {note-progress-stop}:void
    {self.report-progress ""}
  }
  def progress-interval = .5s
  {method {note-progress-ongoing}:void
    def elapsed = {self.started.elapsed}
    {if elapsed - self.last-progress-report > QueryDisplay.progress-interval then
        set self.last-progress-report = elapsed
        def caption = {String {value elapsed}}
        {self.report-progress caption}}
  }
  {method {report-progress caption:String}:void
    set self.progress.caption = caption
    set self.progress.indeterminate? = not caption.empty?
  }
  || display support
  {method {refresh-grid rs:RecordSet}:void
    {self.reset-grid}
    set self.grid.record-source = rs
    {dwim-grid self.grid}
  }
  {method {reset-grid}:void
    || NOTE: clears vestigial column specs
    set self.grid.record-source = null
    set self.grid.sort = null
    set self.grid.filter = null
  }
}
|| --------------------
{define-enum public QueryState
    unknown,
    running,
    complete,
    failure
}
{define-class public abstract QueryStatus {inherits Event}}
{define-class public QueryStateChanged {inherits QueryStatus}}
|| --------------------
{define-class public QueryModel {inherits EventTarget}
  field public-get constant database:SQLiteDatabase
  field public-get constant connection:SQLiteConnection
  field _state:QueryState
  field _sql:String = ""
  field public-get result:#RecordSet
  field public-get exception:#Exception
  field public-get last-sql:#String
  {constructor public {default
                          database:SQLiteDatabase,
                          sql:String = "",
                          ...:EventHandler}
    set self.database = database
    set self.connection = {SQLiteConnection database}
    set self.sql = sql
    set self.last-sql = null
    {construct-super {splice ...}}
  }
  || the query
  {getter public {sql}:String
    {return self._sql}
  }
  {setter public {sql val:String}
    {if val != self._sql then
        set self._sql = val
        set self.state = QueryState.unknown}
  }
  {getter public {state}:QueryState
    {return self._state}
  }
  || query state
  {setter {state val:QueryState}
    {if val != self._state then
        set self._state = val
        def e = {QueryStateChanged}
        {self.handle-event e}}
  }
  {getter public {empty?}:bool
    {return self.sql.empty?}
  }
  {getter public {current?}:bool
    {return self.sql == self.last-sql}
  }
  {getter public {enabled?}:bool
    {return
        not self.current? and
        not self.sql.empty?}
  }
  || operation
  {method public {execute}:void
    set self.exception = null
    set self.state = QueryState.running
    {try
        def rs =
            {SQLiteRecordSet.create self.connection, "main", self.sql}
        set self.result = rs
        set self.last-sql = self.sql
        || report success
        set self.state = QueryState.complete
     catch e:Exception do
        set self.exception = e
        || report failure
        set self.state = QueryState.failure
    }
  }
}
{define-proc {dwim-grid rg:RecordGrid}:void
    def n = rg.columns.size
    def w =
        {if n < 6 then 1in
         elseif n < 12 then .75in
         else .375in}
    {for col in rg.columns do
        def numeric? =
            {if-non-null f = col.field then
                def d = f.domain
                {type-switch d
                 case d:SQLiteVariantDomain do
                    {switch d.affinity
                     case SQLiteDatatypeAffinity.NUMERIC,
                        SQLiteDatatypeAffinity.REAL,
                        SQLiteDatatypeAffinity.INTEGER
                     do true
                     else false}
                 else d.type isa NumericType}
             else false}
        {if numeric? then
            set col.halign = "right"}
        set col.width = w}
}


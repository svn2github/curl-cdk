||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public CurlConnectionChannel {inherits PollingChannel}
  field private _connection:CurlConnection

  field public status-handler:{proc-type {net-status-event:Event}:void} =
    {proc {event:Event}:void
        || TODO: Do we need such a thing as a NetStatusEvent?
        || Default implementation does nothing
    }

  {constructor public {default
                          id:#String = null, uri:#Url = null,
                          mapper:AMFObjectAdapters = AMFObjectAdapters.standard
                      }
    {construct-super id = id, uri = uri}
    || TODO: Flex creates a NetConnection object. We need a similar,
    ||       bi-directional connection manager.
    set self._connection =
        {CurlConnection
            object-encoding = CurlConnection.AMF3,
            mapper = mapper
        }
  }

  {getter public {connection}:CurlConnection
    {return self._connection}
  }

  {getter public {use-small-messages?}:bool
    {return
        super.use-small-messages? and
        self._connection.object-encoding >= CurlConnection.AMF3
    }
  }

  {method protected {internal-connect}:void
||--    || NOTE: This call to {super.internal-connect} bubbles up to an empty method
||--    ||       in Channel.scurl. Thus, it's probably unnecessary.
||--    {super.internal-connect}
    || TODO: Various NetConnection things happen here, but the short of it is a
    ||       call to net-connection.connect(endpoint)
    {if-non-null u = self.uri then
        {self._connection.connect u}
    }
  }

  {method protected {internal-disconnect rejected?:bool = false}:void
    {super.internal-disconnect rejected? = rejected?}
    || TODO: shut-down-net-connection
    {self.disconnect-succeeded rejected? = rejected?}
  }

  {method protected {internal-send message-responder:MessageResponder}:void
    let message:IMessage = message-responder.message
    {self.set-flex-client-id-on-message message}

    {if self.use-small-messages? then
        {type-switch message
         case sm:ISmallMessage do
            {if-non-null small-msg = {sm.get-small-message} then
                set message = small-msg
            }
        }
    }
    
    {self.connection.call
        command = null,
        responder = message-responder,
        message
    }
  }

  {method protected {get-default-message-responder
                        agent:MessageAgent,
                        message:IMessage
                    }:MessageResponder
    {return
        {new CurlConnectionMessageResponder, agent, message, channel = self}
    }
  }

}

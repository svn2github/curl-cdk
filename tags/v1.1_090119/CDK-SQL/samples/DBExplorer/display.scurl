||| Copyright (C) 1998-2009, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| TODO
|| - modifiable recordgrid where appropriate
|| - differentiate DML (select) from DDL (create, etc)
|| - statement with parameters => form
|| - order history by timestamp; avoid duplicates

|| --------------------
{define-class public DBExplorer {inherits BaseFrame}
  def private split-chat-newline:CharClass = {CharClass "\n"}
  
  field private _database:SQLiteDatabase
  field private _cancel?:bool
  field private _running?:bool
  field private progress-display:Graphic
  field private progress-bar:ProgressBar

  field private commands:CommandContext
  field private query-panes:TabContainer
  field private views:TabContainer
  field private history-pane:TabPane
  field private schema-pane:TabPane
  field private history-lb:ListBox
  field private database-selector:DropdownList
  field private schema-frame:Frame
  field private last-database-name:String = ""
  field private last-sql:String = ""
  
  {constructor public {default
                          database:SQLiteDatabase,
                          ...
                      }
    {construct-super {splice ...}}
    set self.schema-frame = {Frame hstretch? = true, vstretch? = true}
    set self.query-panes = {self.create-query-panes}
    set self.views = {self.create-views-container}
    set self.history-lb = {self.create-history-listbox}
    set self.database-selector = {self.create-database-selector}
    set self.history-pane = {self.create-history-pane}
    set self.schema-pane = {self.create-schema-pane}
        
    {self.views.add-pane show? = true, self.schema-pane}
    {self.views.add-pane show? = false, self.history-pane}
    || commands
    set self.commands = {self.make-commands}    
    || controls
    def menu-bar = {self.create-menu-bar}
    {add-context-popup
        self.query-panes, menu-pane = {self.create-context-menu-pane}
    }
    || display
    def title-file = {Frame style-class = "title-file"}
    def title-panel =
        {Frame style-class = "title-bar",
            hstretch? = true,
            {spaced-hbox
                menu-bar,
                title-file,
                {Fill width = 2pt}
            }
        }
    def status = {Frame style-class = "status"}
    set self.progress-bar =
        {ProgressBar width = .75in}
    def cancel-button =
        {CommandButton label = {bold color = "red", X},
            tooltip = {lmessage Cancel},
            bound-command = {self.commands.get-command "cancel"}}
    set self.progress-display  =
        {HBox
            visible? = false,
            self.progress-bar,
            cancel-button}
    def status-panel =
        {Frame style-class = "status-bar",
            {HBox
                status,
                {Fill},
                self.progress-display}
        }
    def main = {PanedWindow orientation = "horizontal"}
    {main.add-pane self.query-panes}
    {main.add-pane self.views}
    {main.set-pane-sizes {{Array-of double} 80%, 20%}}
    {self.add-internal
        {VBox
            hstretch? = true,
            title-panel,   
            main,
            status-panel
        }
    }
    
    || coordination
    {self.add-event-handler
        {on DBXDatabaseChanged do
            {title-file.add replace? = true,
                {if-non-null loc = self.database.url then
                    {text
                        tooltip = {Tooltip style = "immediate", loc.name},
                        {value loc.filename}
                    }
                 else
                    {lmessage in-memory database}
                }
            }
        }
    }
    {self.add-event-handler
        {on e:DBXInfo do
            {status.add replace? = true, e.info}
            def exception? = e.info isa Exception
            {if exception? then
                {self.current-query-display.reset-grid}
            }
            set status.style-class =
                {if exception? then
                    "status sql-error"
                 else
                    "status"
                }
            {dispatch-events false}
        }
    }
    {self.add-event-handler
        {on e:DBXProgress do
            {self.note-progress-ongoing}
            {dispatch-events false}
            {if self._cancel? then
                set self._cancel? = false
                set e.cancel? = true
            }
        }
    }
    {self.add-event-handler
        {on e:DBXSchemaChanged do
            {self.schema-changed}
        }
    }
    || init
    set self._database = database
    {self.database-changed}
  }
  
  || state
  || --------------------
  {getter public {running?}:bool
    {return self._running?}
  }

  {setter private {running? val:bool}
    {if val != self._running? then
        set self._cancel? = false
        set self._running? = val
        {self.refresh-commands}
    }
  }
  
  || properties
  || --------------------
  {getter public {database}:SQLiteDatabase
    {return self._database}
  }
  
  {setter public {database val:SQLiteDatabase}
    {if val != self._database then
        {self._database.close}
        set self._database = val
        {self.database-changed}
    }
  }
  
  {setter {query sql:String}:void
    {if self.query-panes.tab-panes.size == 0 then
        {self.add-query-pane}
    }
    {if-non-null qd = self.current-query-display then
        set qd.query = sql
    }
  }
  
  {getter {query}:String
      {return
          {if-non-null qd = self.current-query-display then
              qd.query
           else
              ""
          }
      }
  }
  
  {getter {current-query-display}:#QueryDisplay
    {if-non-null pane = self.query-panes.current-pane then
        {type-switch pane.content
         case qd:QueryDisplay do
            {return qd}
        }
    }
    {return null}
  }
  
  || commands
  || --------------------
  {method {make-commands}:CommandContext
    def cc = {CommandContext}
    {cc.add-command
        {self.make-command "open",
            {fn => {self.choose-database}},
            null
        }
    }
    {cc.add-command
        {self.make-command "close",
            {fn =>{self.open-database null}},
            null
        }
    }
    {cc.add-command
        {self.make-command "execute",
            {fn =>
                {with-busy-cursor
                    {with self.running? = true do
                        {self.current-query-display.execute}
                    }
                    {self.note-schema-changes}
                }
            },
            {fn =>
                {if-non-null qd = self.current-query-display then
                    qd.query-model.enabled?
                 else
                    false
                }
            }
        }
    }
    {cc.add-command
        {self.make-command "show-schema",
            {fn =>
                {with-busy-cursor
                    def pane = self.schema-pane 
                    {if pane.display-context == null then
                        || Add it.
                        {self.views.add-pane show? = true, pane}
                     else
                        set self.views.current-pane = pane
                    }
                }
            },
            null
        }
    }
    {cc.add-command
        {self.make-command "show-history",
            {fn =>
                {with-busy-cursor
                    def pane = self.history-pane 
                    {if pane.display-context == null then
                        || Add it.
                        {self.views.add-pane show? = true, pane}
                     else
                        set self.views.current-pane = pane
                    }
                }
            },
            null
        }
    }
    {cc.add-command
        {self.make-command "clear-history",
            {fn =>
                {with-busy-cursor
                    def answer =
                        {popup-question
                            "Do you want to clear all items in the history database?"
                        }
                    {if answer == Dialog.yes then
                        {{HistoryManager}.delete-all}
                        {self.maybe-populate-history-box}
                    }
                }
            },
            null
        }
    }
    {cc.add-command
        {self.make-command "save-query",
            {fn =>
                {with-busy-cursor
                    {self.current-query-display.save-query}
                }
            },
            {fn =>
                {if-non-null qd = self.current-query-display then
                    qd.query-model.enabled?
                 else
                    false
                }
            }
        }
    }
    {cc.add-command
        {self.make-command "cancel",
            {fn =>
                set self._cancel? = true
            },
            {fn => self.running?}
        }
    }
    {cc.add-command
        {self.make-command "add-pane",
            {fn => {self.add-query-pane}},
            null
        }
    }
    {cc.add-command
        {self.make-command "copy-pane",
            {fn => {self.add-query-pane copy? = true}},
            {fn => self.current-query-display != null}
        }
    }
    {return cc}        
  }
  
  {method private {make-command 
              name:String,
              execute-proc:{proc-type {}:void},
              enabled-proc:#{proc-type {}:bool}
          }:Command
    {return
        {SimpleCommand name, 
            execute-proc = execute-proc,
            enabled-proc =
                {if-non-null enabled-proc then
                    enabled-proc
                 else
                    {fn => true}
                }
        }
    }
  }

  {method private {create-menu-bar}:MenuBar
    || TODO: refresh when there is a change
    def recent-files = {Array}
    def recent-file-limit = 4
    {if-non-null files = {{HistoryManager}.get-databases} then
        {files.reverse}
        {for f in files do
            {if recent-files.size > recent-file-limit then
                {break}} 
            def loc = {abs-url f}
            {if not {local-file-exists? loc} then
                {continue}}
            def prefix = loc.stem.name
            def name = {loc.pathname.tail prefix.size}
            def index = recent-files.size + 1
            || TODO: truncate if too long
            def label = {format "&%d %s", index, name}
            {recent-files.append
                {MenuAction label = label,
                    {on Action do
                        {self.open-database loc}}}}
        }
        {recent-files.insert {menu-separator}, 0}
    }
    {return
        {MenuBar
            use-look-and-feel? = false,
            {SubMenu label = {lmessage &File},
                {MenuAction label = {lmessage &Open...},
                    bound-command = {self.commands.get-command "open"}
                },
                {MenuAction label = {lmessage Clos&e},
                    bound-command = {self.commands.get-command "close"}
                },
                {menu-separator},
                {MenuAction label = {lmessage &Save Query},
                    bound-command = {self.commands.get-command "save-query"}
                },
                {menu-separator},
                {MenuAction label = {lmessage &Add Query Pane},
                    bound-command = {self.commands.get-command "add-pane"}
                },
                {MenuAction label = {lmessage &Copy Query Pane},
                    bound-command = {self.commands.get-command "copy-pane"}
                },
                {splice recent-files}
            },
            {SubMenu label = {lmessage &Run},
                {MenuAction label = {lmessage &Execute}, key-accel-string = "CTRL+X",
                    bound-command = {self.commands.get-command "execute"}
                },
                {menu-separator},
                {MenuAction label = {lmessage &Cancel},
                    bound-command = {self.commands.get-command "cancel"}
                }
            },
            {SubMenu label = {lmessage &Window},
                {MenuAction label = {lmessage &Schema},
                    bound-command = {self.commands.get-command "show-schema"}
                },
                {MenuAction label = {lmessage &History},
                    bound-command = {self.commands.get-command "show-history"}
                },
                {menu-separator},
                {MenuAction label = {lmessage &Clear History},
                    bound-command = {self.commands.get-command "clear-history"}
                }
            },
            {SubMenu label = {lmessage &Help},
                {MenuAction label = {lmessage &Guide}},
                {MenuAction label = {lmessage &About}}
            }
        }
    }
  }
  
  || GUI construction
  || --------------------
  {method private {create-query-panes}:TabContainer
    {return
        {TabContainer style-class = "sql",
            width = {add-stretch},
            height = {add-stretch},
            close-button-proc =
                {proc {tc:TabContainer}:void
                    {if-non-null pane = tc.current-pane  then
                        {tc.remove-pane pane}
                    }
                }
        }
    }
  }

  || This contains the history and the schema pane.
  {method private {create-views-container}:TabContainer
    {return
        {TabContainer style-class = "sql",
            width = {add-stretch},
            height = {add-stretch},
            close-button-proc =
                {proc {tc:TabContainer}:void
                    {if-non-null pane = tc.current-pane  then
                        {tc.remove-pane pane}
                    }
                }
        }
    }
  }
  
  {method private {create-history-listbox}:ListBox
    {return
        {ListBox
            style-class = "sql",
            selection-policy = SelectionPolicy.single,
            list-item-creation-proc =
                {fn val =>
                    let item:String = val asa String
                    set item = {item.trim-clone}
                    let lines:StringArray =
                        {item.split split-chars = DBExplorer.split-chat-newline}
                    let tp:Tooltip =
                        {Tooltip
                            {text text-preserve-whitespace? = true, {value item}}
                        }
                    || Display only the first line. 
                    || Rest of it should should be in the tooltip.
                    {ListValueItem 
                        item, 
                        label = {ClipFrame {value lines[0]}, tooltip = tp}
                    }
                },
            {on e:Action at lb:ListBox do
                {if lb.has-value? then
                    {type-switch lb.value
                     case arr:Array do
                        set self.query = arr[0] asa String
                    }
                }
            }
        }
    }
  }

  {method private {create-database-selector}:DropdownList
    {return
        {DropdownList
            dropdown-width = 0m,
            style-class = "sql",
            {on e:ValueFinished at dd:DropdownList do
                def listbox = self.history-lb
                def val = dd.value asa String
                {listbox.clear-items}
                def queries =
                    {if val == "All databases" then
                        {{HistoryManager}.get-all-queries}
                     else
                        {{HistoryManager}.get-queries-for val}
                    }
                {if-non-null queries then
                    {for q in queries do
                        {listbox.append q}
                    }
                }
            }
        }
    }
  }

  {method private {create-history-pane}:TabPane
    {return
        {TabPane
            label = "Histor&y", style-class = "sql",
            {spaced-vbox
                hstretch? = true,
                self.database-selector,
                self.history-lb
            },
            {on e:AttachEvent do
                {self.maybe-populate-history-box}
            }
        }
    }
  }

  {method private {create-schema-pane}:TabPane
    {return
        {TabPane
            label = "&Schema", style-class = "sql",
            self.schema-frame
        }
    }
  }

  {method private {maybe-populate-history-box}:void
    def listbox = self.history-lb
    || If history box is not showing then simply return.
    {if listbox.display-context == null then {return}}
    {listbox.clear-items}
    def queries = {{HistoryManager}.get-all-queries}
    {if-non-null queries then
        {for q in queries do
            {listbox.insert q, 0}
        }
    }

    def databases = {{HistoryManager}.get-databases}
    def database-selector = self.database-selector
    {database-selector.clear-items}
    {database-selector.append "All databases"}
    set database-selector.value = "All databases"

    {if-non-null databases then
        {for db in databases do
            {database-selector.append db}
        }
    }
  }

  {method private {create-context-menu-pane}:MenuPane
    {return
        {MenuPane
            || TODO: why doesn't this get styled ?
            use-look-and-feel? = false,
            {MenuAction label = {lmessage Add Query Pane},
                bound-command = {self.commands.get-command "add-pane"}
            },
            {MenuAction label = {lmessage Copy Query Pane},
                bound-command = {self.commands.get-command "copy-pane"}
            }
        }
    }
  }
  
  || operations
  || --------------------
  {method {open-database loc:#Url}:void    
    {try
        set self.database = {SQLiteDatabase error-if-missing? = true, loc}
     catch e:Exception do
        {popup-message
            title = {lmessage Failed to open database.},
            {spaced-vbox
                {lmessage Failed to open {value loc}.}, 
                {value e.message}
            }
        }
    }
  }
  
  {method {choose-database}:void
    {if-non-null loc =
        {choose-file style = FileDialogStyle.read,
            title = {lmessage Choose SQLite Database},
            filters =
                {FileDialogFilterArray
                    {FileDialogFilter "SQLite databases",
                        {FileDialogTypeFilterArray
                            {FileDialogTypeFilter "db"}
                        }
                    }
                }
        }
     then
        {self.open-database loc}
    }
  }
  
  {method {add-query-pane copy?:bool = false, ...}:void        
    def qd = {QueryDisplay self}
    def query = self.query
    {self.query-panes.add-pane
        show? = true, {splice ...},
        {TabPane style-class = "sql", qd}
    }
    {if copy? then
        set qd.query = query
    }
  }
  
  {method {handle-schema-action node:TreeNode}:void
    {type-switch node
     case node:SchemaTreeNode do
        def query =
            {switch node.kind
             case "table", "view" do
                {format "SELECT * FROM %s;", node.name}
             case "column" do
                {format
                    "SELECT %s FROM %s;",
                    node.name, node.parent.node-data
                }
             else null
            }
        {if-non-null query then
            set self.query = query
        }
    }
  }
  
  || coordination
  || --------------------
  {method {refresh-commands}:void
    {self.commands.request-update-commands}
  }
  
  || -- query progress
  def progress-interval = .2s
  def progress-instructions-interval = 15 || TODO: suitable value
  field progress-started:DateTime = {DateTime}
  field last-progress-report:Time
  
  {method {note-progress-start}:void
    {self.report-progress ""}
    set self.progress-started = {DateTime}
    set self.last-progress-report = 0s
  }
  
  {method {note-progress-stop}:void
    {self.report-progress ""}
    set self.progress-display.visible? = false
  }
  
  {method {note-progress-ongoing}:void
    {if self.running? then
        def elapsed = {self.progress-started.elapsed}
        {if elapsed - self.last-progress-report > DBExplorer.progress-interval then
            set self.last-progress-report = elapsed
            def caption = {String {value elapsed}}
            {self.report-progress caption}
            set self.progress-display.visible? = true
        }
    }
  }
  
  {method {report-progress caption:String}:void
    set self.progress-bar.caption = caption
    set self.progress-bar.indeterminate? = not caption.empty?
  }

  || -- query history
  {method public {note-query-executed qm:QueryModel}:void
    def database-name = qm.database.url.full-filename
    def sql = qm.sql
    {if database-name == self.last-database-name and
        sql == self.last-sql
     then
        {return}
    }
    def index = {{HistoryManager}.get-index-for database-name} 
    {{HistoryManager}.add-query qm}
    || FIXME: See if the Database can inform when data is added or
    || removed from it. In any case history-lb should not be directly
    || accessable from here.
    def history-lb = self.history-lb
    {if history-lb.display-context != null then
        def database-selector = self.database-selector
        {if index == -1 then
            {database-selector.append database-name}
        }
        def selected-db = database-selector.value asa String
        {if selected-db == "All databases" or
            selected-db == database-name
         then
            {history-lb.insert self.query, 0}
        }
    }
    set self.last-database-name = database-name
    set self.last-sql = sql
  }

  || -- new database
  {method {database-changed}:void
    || detect schema changes
    set self.database.authorizer =
        {proc {operation:SQLiteOperation,
               data1:#String, data2:#String,
               data3:#String, data4:#String
              }:SQLiteAuthorizerReturnCode
            {self.note-database-operation operation}
            {return SQLiteAuthorizerReturnCode.OK}
        }
    || allow interruption
    {self.database.set-progress-handler
        DBExplorer.progress-instructions-interval,
        {fn =>
            def e = {DBXProgress}
            {self.handle-event e}
            e.cancel?
        }
    }
    || refresh GUI
    {self.update-display}
    {self.schema-changed}
    {self.handle-event {DBXDatabaseChanged}}
  }
  
  || -- changed schema
  {method {schema-changed}:void
    set self._schema-changed? = false
    {self.schema-frame.add
        replace? = true,
        {self.make-schema-frame}
    }
  }
  
  field _schema-changed?:bool
  def schema-operations =
      {{Set-of SQLiteOperation}
        SQLiteOperation.COPY,
        SQLiteOperation.CREATE_INDEX,
        SQLiteOperation.CREATE_TABLE,
        SQLiteOperation.CREATE_TRIGGER,
        SQLiteOperation.CREATE_VIEW,
        SQLiteOperation.DROP_INDEX,
        SQLiteOperation.DROP_TABLE,
        SQLiteOperation.DROP_TRIGGER,
        SQLiteOperation.DROP_VIEW,
        SQLiteOperation.ALTER_TABLE
      }
  
  {method {note-schema-changes}:void
    {if self._schema-changed? then
        {self.handle-event
            {DBXSchemaChanged}
        }
    }
  }

  {method {note-database-operation operation:SQLiteOperation}:void
    {if not self._schema-changed? and
        {DBExplorer.schema-operations.member? operation}
     then
        set self._schema-changed? = true
    }
  }
  
  {method {update-display}:void
    || panes
    {self.query-panes.remove-all-panes}
    {self.add-query-pane}
  }
  
  || adapters
  || --------------------
  {method {make-schema-frame}:Graphic
    def tm = {schema-tree-model self.database}
    {return
        {ScrollBox hscroll? = false,
            {TreeControl style-class = "sql",
                display-root? = false,
                data-model = tm,                      
                {on Action at tc:TreeControl do
                    {self.handle-schema-action {non-null tc.current-node}}
                }
            }
        }
    }
  }
}

|| --------------------
{define-class public QueryDisplay {inherits BaseFrame}
  field public-get constant dbx:DBExplorer
  field public-get constant query-model:QueryModel
  {getter {database}:SQLiteDatabase
    {return self.dbx.database}
  }
  field grid:RecordGrid
  field query-panel:TextArea

  {constructor public {default dbx:DBExplorer}
    set self.dbx = dbx
    set self.query-model = {QueryModel self.database}
    || controls
    set self.query-panel =
        {TextArea style-class = "sql",
            width = {add-stretch},
            height = {add-stretch},
            {on ValueChanged at c:TextArea do
                set self.query-model.sql = c.value
                {self.dbx.refresh-commands}
            }
        }
    set self.grid =
        {RecordGrid style-class = "sql",
            width = {add-stretch},
            height = {add-stretch}
        }
    || layout
    def main =
        {PanedWindow orientation = "vertical"}
    {do
        || NOTE: set explicitly, because not affected by stylesheet
        || -- when added to existing display
        set main.background = "#E6F3FA"
        set main.sash-background = "transparent"
    }
    {main.add-pane self.query-panel}
    {main.add-pane self.grid}
    {main.set-pane-sizes {{Array-of double} 10%, 90%}}
    def display =
        {VBox
            style-class = "sql",
            hstretch? = true,
            main
        }
    {self.add-internal display}
  }
  {method {execute}:void
    || TODO: modifiable?
    def w = {StopWatch}
    {try
        {self.report-status "running query ..."}
        {self.dbx.note-progress-start}
        {w.start}
        {self.query-model.execute}
        || report success
        {w.stop}
        {self.dbx.note-progress-stop}
        def rs = {non-null self.query-model.result}
        {self.report-status
            {lmessage selected {value rs.size} rows in {w.elapsed}}
        }
        {self.reset-grid}
        set self.grid.record-source = rs
        {dwim-grid self.grid}
        {self.dbx.note-query-executed self.query-model}
     catch e:Exception do
        || report failure
        {w.stop}
        {self.dbx.note-progress-stop}
        {self.report-status e}
    }
  }

  {method package {save-query}:void
    def file-url =
        {choose-file
            style = FileDialogStyle.save-as,
            filters =
                {{Array-of FileDialogFilter}
                    {FileDialogFilter
                        "Text File",
                        {new
                            {Array-of FileDialogTypeFilter},
                            {FileDialogTypeFilter "txt"}
                        }
                    }
                }
        }

    {if-non-null file-url then
        {try
            def tos = {write-open file-url}
            {tos.write-one-string self.query}
            {tos.close}                
         catch e:Exception do
            {popup-message
                title = "Failed to save SQL Query",
                e.message
            }
        }
    }
  }
  
  {getter {query}:String
    {return self.query-model.sql}
  }
  
  {setter {query sql:String}:void
    set self.query-model.sql = sql
    {self.query-panel.set-value-with-events sql}
  }
  
  {method {report-status info:any}:void
    {self.dbx.handle-event {DBXInfo info}}
  }
  
  {method {reset-grid}:void
    || NOTE: clears vestigial column specs
    set self.grid.record-source = null
    set self.grid.sort = null
    set self.grid.filter = null
  }
}

|| --------------------
{define-class public QueryModel
  field public-get constant database:SQLiteDatabase
  field public-get sql:String
  field public-get result:#RecordSet
  field public-get last-sql:#String
  {constructor public {default
                          database:SQLiteDatabase,
                          sql:String = ""
                      }
    set self.database = database
    set self.sql = sql
    set self.last-sql = null
  }
  {getter public {empty?}:bool
    {return self.sql.empty?}
  }
  {getter public {current?}:bool
    {return self.sql == self.last-sql}
  }
  {getter public {enabled?}:bool
    {return not self.sql.empty?}
||--    {return
||--        not self.current? and not self.sql.empty?
||--    }
  }
  {method public {execute}:void
    set self.result = {SQLiteBasicRecordSet self.database, self.sql}
    set self.last-sql = self.sql
  }
}
|| --------------------
{define-class public abstract DBXEvent {inherits Event}
}
{define-class public DBXDatabaseChanged {inherits DBXEvent}
}
{define-class public DBXSchemaChanged {inherits DBXEvent}
}
{define-class public DBXInfo {inherits DBXEvent}
  field public-get constant info:any
  {constructor public {default info:any}
    set self.info = info
  }
}
{define-class public DBXProgress {inherits DBXEvent}
  field public cancel?:bool = false
}
|| --------------------
{define-class SchemaTreeNode {inherits DefaultTreeNode}
  field public-get constant name:String
  field public-get constant kind:String
  field public-get constant caption:Graphic
  {constructor {default name:String, kind:String, caption:Graphic = name}
    set self.name = name
    set self.kind = kind
    set self.caption = caption
    {construct-super node-data = name}
  }
  {getter public {node-label}:any
    {return self.caption}
  }
}

{define-proc {get-column-tooltip-graphic array:Array}:Graphic
    def pk? = (array[5] != 0)
    def nullable? = not pk? and (array[3] == 0)
    {return
        {spaced-vbox
            hstretch? = true,
            {Frame halign = "center", {value array[1]}},
            {Table || TODO: style-class = "tooltip",
                columns = 2,
                border-width = 1pt,
                border-color = "#aaaaff",
                vertical-line-width = 1pt,
                vertical-line-color ="#aaaaff",
                horizontal-line-width = 1pt,
                horizontal-line-color ="#aaaaff",
                "columnID", array[0],
                "dataType", array[2],
                "defaultValue", array[4],
                "allowNull", {CheckButton label = "", value = nullable?},
                "primaryKey", {CheckButton label = "", value = pk?}
            }
        }
    }
}

{define-proc {schema-tree-model db:SQLiteDatabase}:TreeModel
    def tables =
        {db.sql-column
            "select name from sqlite_master where type='table' order by name"}
    def root = {TreeNode node-data = {bold Tables}}
    {for t in tables do
        {if t == "sqlite_sequence" then {continue}}
        def nt = {SchemaTreeNode t asa String, "table"}
        def fs = {db.sql-rows {format "PRAGMA table_info (%s)", t}}
        {for f in fs do
            def name = f[1] asa String
            def caption =
                {Frame
                    name,
                    tooltips-when-inactive? = true,
                    tooltip = {get-column-tooltip-graphic f}
                }
            def nf =
                {SchemaTreeNode name, "column", caption = caption}
            
            {nt.append nf}
        }
        {root.append nt}
    }
    def views =
        {db.sql-column
            "select name from sqlite_master where type='view' order by name"
        }
    def rootv = {TreeNode node-data = {bold Views}}
    {for t in views do
        def nt = {SchemaTreeNode t asa String, "view"}
        {rootv.append nt}
    }
    
    def indexs =
        {db.sql-column
            "select name from sqlite_master where type='index' order by name"
        }
    def rooti = {TreeNode node-data = {bold Indexes}}
    {for t in indexs do
        def nt = {SchemaTreeNode t asa String, "index"}
        {rooti.append nt}
    }
    
    {return
        {TreeModel root = {TreeNode root, rootv, rooti}}
    }
}

{define-proc {dwim-grid rg:RecordGrid}:void
    def n = rg.columns.size
    def w =
        {if n < 6 then 1in
         elseif n < 12 then .75in
         else .375in
        }
    {for col in rg.columns do
        def numeric? =
            {if-non-null f = col.field then
                def d = f.domain
                {type-switch d
                 case d:SQLiteVariantDomain do
                    {switch d.affinity
                     case SQLiteDatatypeAffinity.NUMERIC,
                        SQLiteDatatypeAffinity.INTEGER,
                        SQLiteDatatypeAffinity.REAL
                     do
                        true
                     else
                        false
                    }
                 else
                    d.type isa NumericType
                }
             else
                false
            }
        {if numeric? then
            set col.halign = "right"
        }
        set col.width = w
    }
}
|| TEMP: connectionless RecordSet
|| --------------------
{define-class public SQLiteBasicRecordSet {inherits SQLiteRecordSet}
  {constructor public {default
                          database-name:SQLiteDatabase,
                          sql:String,
                          request-modifiable?:bool = false,
                          parameters:#Arguments = null,
                          strict-types?:bool = false,
                          ...:EventHandler}
    def connection = connection-cache[database-name]
    {construct-super.create connection, "main", sql,
        request-modifiable? = request-modifiable?,
        strict-types? = strict-types?,
        {splice ...}
    }
    set self.query-parameters = parameters
  }
}
{def connection-cache =
    {{Memoizer-of SQLiteDatabase, SQLiteConnection}
        {fn db => {SQLiteConnection db}}
    }
}

|| generic container
|| --------------------
{define-proc public {app-view
                        content:Graphic,
                        title:String = {message Sample},
                        || default values
                        window-left:Distance = 1in,
                        window-top:Distance = 1in,
                        window-width:Distance = 8in,
                        window-height:Distance = 6in,
                        || minimum values
                        min-width:Distance = 1in,
                        min-height:Distance = 1in,
                        ...
                    }:View
    def label = {bold {value title}}

    || settings
    def settings = {get-persistent-data-repository}
    {type-switch {settings.get-if-exists "window-height"}
     case val:Distance do
        set window-height = val}
    {type-switch {settings.get-if-exists "window-width"}
     case val:Distance do
        set window-width = val}
    {type-switch {settings.get-if-exists "window-left"}
     case val:Distance do
        set window-left = {max val, 0mm}}
    {type-switch {settings.get-if-exists "window-top"}
     case val:Distance do
        set window-top = {max val, 0mm}}

    || applet
    {{get-the-applet}.set-title title}
    {on-applet-suspend do
        {commit-persistent-data repository = settings}}

    || application view
    def view =
        {View
            title = title,
            visibility = "normal",
            width = window-width,
            height = window-height,

            || maintain view state
            {on ViewActivateEvent do
                {view.set-window-position window-left, window-top}},
            {on ViewMoveEvent do
                set (window-left,  window-top) = {view.get-window-position}
                {set-persistent-data "window-left", window-left,
                    repository = settings}
                {set-persistent-data "window-top", window-top,
                    repository = settings}},
            {on ViewResizeEvent do
                set (window-width, window-height) = {view.get-window-size}
                {set-persistent-data "window-width", window-width,
                    repository = settings}
                {set-persistent-data "window-height", window-height,
                    repository = settings}},

            || terminate
            {on WindowClose do
                {exit}},

            {splice ...}
        }
    || content
    {view.add content}

    {return view}
}

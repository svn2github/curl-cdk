
{define-class public DataObjectDataBindingContext 
  {inherits DataBindingContext, ConcreteEventTarget}
  || TODO: make source modifiable
  || TODO: consider array source
  field public-get constant source:DataObject
  field public-get constant fields:#RecordFields
  {constructor public {default 
                          source:DataObject,
                          fields:#RecordFields = null,
                          ...} 
    set self.source = source
    set self.fields = fields
    {construct-super.DataBindingContext}
    || TODO: add weakly
    {self.source.add-event-handler
        {on e:DataObjectChanged do
            {for b in {self.bindings-for e.selector} do
                {b.refresh}}}}
    {self.process-rest-args ...}
  }
  || DataBinding implementation
  {method public {get-data selector:any}:(any, bool)
    let (val:any, found?:bool) =
        {self.source.get-if-exists selector asa String}
    {return val, found?}
  }
  {method public {update-internal
                     ...:DataBinding
                 }:#DataBindingValidationFailure
    {return {self.operate-internal true, ...}}
  }
  {method public {validate-internal
                     ...:DataBinding
                 }:#DataBindingValidationFailure
    {return {self.operate-internal false, ...}}
  }
  {method public {operate-internal 
                     update?:bool,
                     ...:DataBinding
                 }:#DataBindingValidationFailure
    let vs:{Array-of DataBindingValidationFailure} = 
        {{Array-of DataBindingValidationFailure}}
    {for b in ... do   
        let selector:String = b.data-selector asa String
        let failure:#DataBindingValidationFailure = null
        || get value from target
        let val:any = {b.get-parsed-value}
        {type-switch val
         case v:DataBindingValidationFailure do 
            set failure = v
         else
            || validate new value
            {if-non-null fields = self.fields then
                {if-non-null 
                    ex = {self.fields[selector].domain.validate val}
                 then
                    || convert ValidationException
                    set failure =
                        {DataBindingValidationFailure binding = b,
                            ex.message}}}
            || update source, if so requested and valid
            {if update? and failure == null then
                set self.source[selector] = val}}
        || report status
        set b.validation-failure = failure
        {if-non-null failure then            
            {vs.append failure}}
    }
    {return 
        {if vs.empty? then null
         elseif vs.size == 1 then vs[0]
         else {DataBindingMultipleValidationFailure {splice vs}}}}
  }
  {method public {parse val:any, binding:DataBinding}:any
    || use specified domain to parse if possible
    {if-non-null fields = self.fields then
        {type-switch val
         case str:String do
            let selector:String = binding.data-selector asa String
            let d:Domain = fields[selector].domain
            {try
                set val = {d.parse str}
             catch e:DataException do
                set val = {DataBindingValidationFailure e.message}}
        }}
    {return val}
  }
  {method public {format val:any, binding:DataBinding}:any
    {return
        {if val == null then
            DataBinding.unset
         elseif {binding.property-type.subtype-of? String} then
            || use specified domain to parse if possible
            {if-non-null fields = self.fields then
                let selector:String = binding.data-selector asa String
                let d:Domain = fields[selector].domain
                {d.format val}
             else
                val}
         else
            val}}
  }
  || TODO: inefficient
  || - better would be FilterIterator-of
  {method public {bindings-for selector:any}:{Set-of DataBinding}
    {return
        {self.registered-bindings.filter-clone 
            {proc {b:DataBinding}:bool
                {return b.data-selector == selector}}}}
  }
}
{define-class public ConcreteEventTarget {inherits EventTarget, InitRestArgParser}
  {constructor public {default ...}
    {construct-super.EventTarget}
    {self.process-rest-args ...}
  }
  {method public {non-keyword-init-arg x:any}:void
    {type-switch x
     case h:EventHandler do
        {self.add-event-handler h}
     else {super.non-keyword-init-arg x}}
  }
}
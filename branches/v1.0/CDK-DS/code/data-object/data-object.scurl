||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

|| model protocol
|| ====================
{doc-next ||=== DataObject
    {purpose 
        Represents a set of data values.}
    {details
        Each {ctext DataObject} maps from property names to data values.

        It may be characterized by its {docref-abbr DataObject.traits}.

        When the object is modified, its original state is preserved,
        so that changes can be confirmed by {docref-abbr DataObject.commit} 
        or rejected by {docref-abbr DataObject.revert}.

        {itemize
            {item {docref StandardDataObject}}
            {item {docref OpenDataObject}}
            {item {docref SealedDataObject}}
        }
    }
    {expected-events
        {event DataObjectChanged, indicates that the object has been modified.}
    }
    {usage
        {itemize
            {item Use {docref DataObjectRecordSet} to work with collections
                of (similar) {ctext DataObject}s as a {docref RecordSet}.}
            {item Use {docref DataObjectDataBindingContext} to bind {ctext DataObject}
                values to properties of graphical elements.}
            {item Remote procedure calls through {docref RemoteObject} 
                may return {ctext DataObject} values.}
            {item Messaging through {docref Producer} and {docref Consumer} 
                may use {ctext DataObject} values.}
        }
    }
}
{define-class public abstract shared DataObject {inherits EventTarget}
  || metadata
  {doc-next ||=== DataObject.traits
    {purpose The {docref DataObjectTraits} that characterize this object.}
  }
  {getter public abstract {traits}:DataObjectTraits}

  || Association-of
  {doc-next ||=== DataObject.size
    {purpose The number of elements in this object.}
  }
  {getter public abstract {size}:int}

  {doc-next ||=== DataObject.get
    {purpose Returns a specific element.}
    {parameter key, identifies the desired element.}
    {return-vals The element corresponding to the specifed key.}
  }
  {method public abstract {get key:String}:any}

  {doc-next ||=== DataObject.get-if-exists
    {purpose Returns a specific element, together with an indication whether it was found.}
    {parameter key, identifies the desired element.}
    {return-vals 
        {itemize
            {item The element corresponding to the specifed key.}
            {item A boolean idicating whether the specified key exists.}}}
  }
  {method public abstract {get-if-exists key:String}:(any, bool)}

  {doc-next ||=== DataObject.set
    {purpose Sets the value of an element.}
    {parameter key, identifies the desired element.}
    {parameter val, the corresponding value.}
  }
  {method public abstract {set key:String, val:any}:void}

  {doc-next ||=== DataObject.set?
    {purpose Indicates whether the specified key exists.}
    {parameter key, identifies the key to check.}
  }
  {method public abstract {set? key:String}:bool}

  {doc-next ||=== DataObject.unset
    {purpose Removes an element.}
    {parameter key, identifies the desired element.}
  }
  {method public abstract {unset key:String}:void}

  {doc-next ||=== DataObject.to-Iterator
    {purpose Returns an {docref Iterator-of} containing each element.}
  }
  {method public abstract {to-Iterator}:{Iterator-of any}}

  {doc-next ||=== DataObject.keys-to-Iterator
    {purpose Returns an {docref Iterator-of} containing each key.}
  }
  {method public abstract {keys-to-Iterator}:{Iterator-of String}}
  || change management

  {doc-next ||=== DataObject.pending-update?
    {purpose Indicates whether there is an uncommitted change to this object.}
  }
  {getter public abstract {pending-update?}:bool}

  {doc-next ||=== DataObject.commit
    {purpose Commits any pending changes to this object.}
  }
  {method public abstract {commit}:void}

  {doc-next ||=== DataObject.revert
    {purpose Reverts any pending changes to this object.}  
}
  {method public abstract {revert}:void}

  {doc-next ||=== DataObject.get-original
    {purpose Returns the original value corresponding to the specified key.}
    {parameter key, identifies the desired element.}
    {details This will be the same as the current value, unless there is a 
        {docref-abbr DataObject.pending-update?}}
  }
  {method public abstract {get-original key:String}:any}  || TODO: if-exixts

  || utility
  {doc-next ||=== DataObject.clone
    {purpose Returns a clone of this object.}
  }
  {method public abstract {clone}:DataObject}

  {doc-next ||=== DataObject.equal?
    {purpose Compares its argument with this object for structural equality.}
    {parameter other, the object to be compared.}
    {return-vals A {ctext bool} indicating whether the objects are equal.}
  }
  {method public abstract {equal? other:DataObject}:bool}

  || convenience
  {doc-next ||=== DataObject.empty?
    {purpose Indicates whether this object has any elements.}
  }
  {getter public {empty?}:bool
    {return self.size == 0}
  }
  || conversion

  {doc-next ||=== DataObject.to-HashTable
    {purpose Return the {docref HashTable-of} equivalent of this object.}
  }
  {method public abstract {to-HashTable}:{HashTable-of String, any}}

  {doc-next ||=== DataObject.to-RecordData
    {purpose Return the {docref RecordData} equivalent of this object.}
  }
  {method public abstract {to-RecordData}:RecordData}

  {doc-next ||=== DataObject.to-JsonObject
    {purpose Return the {docref JsonObject} equivalent of this object.}
  }
  {method public abstract {to-JsonObject}:JsonObject}
  
  || performance hacks

  {doc-next ||=== DataObject.set-internal
    {purpose Sets a data value in this object.}
    {parameter index, the index of the property to set.}
    {parameter val, the corresponding value.}
    {usage Not for application use.  For use by deserialization.}
  }
  {method public abstract {set-internal index:int, val:any}:void}

  || construction

  {doc-next ||=== DataObject.default
    {purpose Create a {ctext DataObject} instance.}
    {parameter ..., The rest args may contain key/value pairs and {docref EventHandler}s.
        Key/value pairs may be specified either as keyword arguments, 
        or as alternating positional arguments.}
  }
  {factory public {default ...}:StandardDataObject
    {return
        {StandardDataObject {splice ...}}}
  }

  {doc-next ||=== DataObject.from-traits
    {purpose Create a {ctext DataObject} instance, given its {docref DataObjectTraits}.}
    {parameter traits, the metadata characterizing the {ctext DataObject}.}
  }
  {factory public {from-traits traits:DataObjectTraits}:DataObject
    {return
        {StandardDataObject.from-traits traits}}
  }
  || =====
||--  def public adapters =
||--      {{HashTable-of String, {proc-type {traits:DataObjectTraits}:DataObject}}}
||--  {factory public {from-traits traits:DataObjectTraits}:DataObject
||--    def (adapter, adapter?) =
||--        {DataObject.adapters.get-if-exists traits.name}
||--    || TODO: ensure congruency
||--    {return
||--        {if adapter? then
||--            {adapter traits}
||--         else        
||--            {StandardDataObject.from-traits traits}}}
||--  }
  || =====
  || NOTE: docstring inherited
  {method public {object-describe out:TextOutputStream, locale:Locale}:void
    {wrap-object-description out = out, self,
        description = {message '{value self.traits.name}' ({value self.size})}}
  }
}
{doc-next ||=== DataObjectChanged
    {purpose Describes a change to a {docref DataObject}.}
}
{define-class public DataObjectChanged {inherits Event}

  {doc-next ||=== DataObjectChanged.selector
    {purpose The name of the property that changed.}
  }
  field public-get constant selector:String

  {doc-next ||=== DataObjectChanged.subject
    {purpose The {docref DataObject} that changed.}
  }
  field public-get constant subject:DataObject

  {doc-next ||=== DataObjectChanged.default
    {purpose Create an instance of a {ctext DataObjectChanged}.}
  }
  {constructor public {default subject:DataObject, selector:String}
    set self.subject = subject
    set self.selector = selector
  }
}
|| model standard
|| ====================
{doc-next ||=== StandardDataObject
    {purpose A basic implementation of common {docref DataObject} functionality.}
}
{define-class public abstract StandardDataObject {inherits DataObject}

  {doc-next ||=== StandardDataObject.from-traits
    {purpose Create a {ctext DataObject} instance, given its {docref DataObjectTraits}.}
    {parameter traits, the metadata characterizing the {ctext DataObject}.}
  }
  {factory public {from-traits traits:DataObjectTraits}:StandardDataObject
    {return
        {if traits.dynamic? then
            {OpenDataObject.from-traits traits}
         else
            {SealedDataObject.from-traits traits}
        }}
  }

  {doc-next ||=== StandardDataObject.default
    {purpose Create a {ctext DataObject} instance.}
    {parameter traits,  the metadata characterizing the {ctext DataObject}.}
    {parameter ..., The rest args may contain key/value pairs and {docref EventHandler}s.
        Key/value pairs may be specified either as keyword arguments, 
        or as alternating positional arguments.}
  }
  {factory public {default 
                      traits:DataObjectTraits =
                          DataObjectTraits.anonymous,
                      default-values:#{Association-of String, any} = null,
                      ...}:StandardDataObject
    {return
        {if traits.dynamic? then
            {OpenDataObject
                traits = traits,
                default-values = default-values,
                {splice ...}}
         else
            {SealedDataObject traits,
                default-values = default-values,
                {splice ...}}
        }}
  }
  || construction
  || ----------
  || NOTE: docstring inherited
  {method public {to-HashTable}:{HashTable-of String, any}
    def xs = {{HashTable-of String, any} efficient-size = self.size}
    {for x key k in self do
        set xs[k] = x}
    {return xs}
  }
  || NOTE: docstring inherited
  {method public {to-RecordData}:RecordData
    def xs = {RecordData}
    set xs.efficient-size = self.size
    {for x key k in self do
        set xs[k] = x}
    {return xs}
  }
  || NOTE: docstring inherited
  {method public {to-JsonObject}:JsonObject
    def xs = {JsonObject efficient-size = self.size}
    {for x key k in self do
        set xs[k] = x}
    {return xs}
  }
  || common
  || ----------

  {doc-next ||=== StandardDataObject.trigger-data-changed
    {purpose Called to trigger a {docref DataObjectChanged} event to be fired at {ctext self}.}
  }
  {method protected {trigger-data-changed k:String}:void
    {self.enqueue-event
        {DataObjectChanged self, k}}
  }
  || NOTE: docstring inherited
  {method public {equal? other:DataObject}:bool
    || TODO: traits ??
    {if self.size == other.size then
        {for x key k in self do
            {if x != other[k] then
                {return false}}}
        {return true}
     else
        {return false}}
  }
  || Association-of compatibility
  || --------------------
  || TODO: eliminate when IMessageHeaders curlified

  {doc-next ||=== StandardDataObject.key-exists?
    {purpose Check if a key exists.}
    {parameter key, identifies the desired key.}
  }
  {method public {key-exists? key:String}:bool
    {return {self.set? key}}
  }

  {doc-next ||=== StandardDataObject.remove
    {purpose Remove an element.}
    {parameter key, identifies the desired key.}
  }
  {method public {remove key:String, error-if-missing?:bool = true}:void
    {if error-if-missing? and not {self.set? key} then
        {error {lmessage Key not found: {value key} in {value self}}}}
    {self.unset key}
  }
}
|| ====================
{doc-next ||=== OpenDataObject
    {purpose An implmentation of {docref DataObject} for objects
        with {docref DataObjectTraits.dynamic?} = {ctext true}}
}
{define-class public OpenDataObject 
  {inherits {OpenDataObject-of {BucketHashTable-of String, any}}}

  {doc-next ||=== OpenDataObject.default
    {purpose Create an {ctext OpenDataObject} instance.}
    {parameter traits,  the metadata characterizing the {ctext DataObject}.}
    {parameter ..., The rest args may contain key/value pairs and {docref EventHandler}s.
        Key/value pairs may be specified either as keyword arguments, 
        or as alternating positional arguments.}
  }
  {constructor public {default
                          traits:DataObjectTraits =
                              DataObjectTraits.anonymous,
                          default-values:#{Association-of String, any} = null,
                          ...}
    def members = traits.members
    def data = {{BucketHashTable-of String, any} efficient-size = members.size}
    {construct-super traits, data}
    def dynamic? = traits.dynamic?
    {if-non-null default-values then
        {for x key k in default-values do
            || restrict to declared traits unless dynamic
            {if dynamic? or {data.key-exists? k} then
                set data[k] = x}}}
    {self.process-rest-args {splice ...}}
  }

  {doc-next ||=== OpenDataObject.from-traits
    {purpose Create an {ctext OpenDataObject} instance, given its {docref DataObjectTraits}.}
    {parameter traits, the metadata characterizing the {ctext DataObject}.}
  }
  {constructor public {from-traits traits:DataObjectTraits}
    def members = traits.members
    def data = {{BucketHashTable-of String, any} efficient-size = members.size}
    {construct-super traits, data}
  }
}
{doc-next ||=== OpenDataObject-of
    {purpose A specialized implmentation of {docref StandardDataObject}
        that wraps an underlying data association.}
}
{define-class public {OpenDataObject-of T:ClassType} {inherits StandardDataObject}
  field protected constant data:T
  field private constant _traits:DataObjectTraits
  || NOTE: docstring inherited
  {getter public {traits}:DataObjectTraits
    {return self._traits}
  }

  {doc-next ||=== OpenDataObject-of.default
    {purpose Create a {ctext OpenDataObject-of} instance.}
    {parameter traits, the metadata characterizing the {ctext DataObject}.}
    {parameter data, the underlying data (some kind of {docref Association-of}).}
  }
  {constructor public {default
                          traits:DataObjectTraits,
                          data:T}
    set self._traits = traits
    def members = traits.members
    {for k in members do
        set data[k] = null}
    set self.data = data
    || TODO: proper default if not initialized
  }
  || NOTE: docstring inherited
  {method public {process-rest-args ...}:void
    || process rest args
    def data = self.data
    let key:#String = null
    {for (x, k) in ... do
        {if-non-null k then
            || keyword arg
            set data[k] = x
         else
            || treat positional as alternating key, value pairs
            {if-non-null k = key then
                set data[k] = x
                set key = null
             else
                set key =
                    {type-switch x
                     case x:String do x
                     case x:int do {String x}
                     case x:EventHandler do
                        || NOTE: not alternating key
                        {self.add-event-handler x}
                        null
                     else {data-exception {lmessage DataObject key must be String or int, not {type-of x}}}}
            }}}
    {if-non-null key then
        {data-exception {lmessage DataObject key '{value key}' has no value}}}
  }
  || NOTE: docstring inherited
  {getter public {size}:int
    {return self.data.size}
  }
  || NOTE: docstring inherited
  {method public {get key:String}:any
    {return self.data[key]}
  }
  || NOTE: docstring inherited
  {method public {get-if-exists key:String}:(any, bool)
    {return {self.data.get-if-exists key}}
  }
  || NOTE: docstring inherited
  {method public {set? key:String}:bool
    {return {self.data.key-exists? key}}
  }
  || NOTE: docstring inherited
  {method public {set key:String, val:any}:void
    def set? = {self.set? key}
    || NOTE: enforce dynamic
    {if not self.traits.dynamic?
        and not set?
     then
        {data-exception {message Can not add member '{value key}': {value self} is not dynamic?}}}
    let changed?:bool = not set? or self[key] != val
    {if changed? then
        {self.preserve-original-data}
        set self.data[key] = val
        || TODO: consider DWIM "revert" if now unchanged
        {self.trigger-data-changed key}}
  }
  || NOTE: docstring inherited
  {method public {unset key:String}:void
    || NOTE: enforce static members
    {if ||not self.traits.dynamic? and
        {self.traits.members.find key} >= 0
     then
        {data-exception {message Can not remove member '{value key}': {value self} declares it static.}}}
    let changed?:bool = {self.set? key}
    {if changed? then
        {self.preserve-original-data}
        {self.data.remove key}
        {self.trigger-data-changed key}}
  }
  || NOTE: docstring inherited
  {method public {to-Iterator}:{Iterator-of any}
    {return {self.data.to-Iterator}}
  }
  || NOTE: docstring inherited
  {method public {keys-to-Iterator}:{Iterator-of String}
    {return {self.data.keys-to-Iterator}}
  }
  || NOTE: docstring inherited
  {method public {clone}:OpenDataObject
    def clone = {OpenDataObject.from-traits self.traits}
    {for x key k in self.data do
        set clone.data[k] = x}
    {return clone}
  }
  || performance hacks
  || --------------------
  || NOTE: docstring inherited
  {method public {set-internal index:int, val:any}:void
    def key = self._traits.members[index]
    set self.data[key] = val
  }
  || change management
  || --------------------
  field protected original-data:#T
  || NOTE: docstring inherited
  {getter public {pending-update?}:bool
    {return self.original-data != null}
  }
  || NOTE: docstring inherited
  {method public {get-original key:String}:any
    {return
        {if-non-null original = self.original-data then
            original[key]
         else
            self[key]}}
  }
  || NOTE: docstring inherited
  {method public {commit}:void
    || NOTE: subclasses responsible for external coordination
    set self.original-data = null
  }
  || NOTE: docstring inherited
  {method public {revert}:void
    || NOTE: change propagation is damped by 'changed?' checks above
    {if-non-null original = self.original-data then
        || delete additions
        {for key k in self.data do
            {if not {original.key-exists? k} then
                {self.unset k}}}
        || duplicate original
        {for x key k in original do
            set self[k] = x}
        || now its the same
        set self.original-data = null}
  }
  {method protected {preserve-original-data}:void
    {if self.original-data == null then
        set self.original-data = {self.data.clone}}
  }
}
|| ====================
{doc-next ||=== SealedDataObject
    {purpose 
        {purpose An implmentation of {docref DataObject} for objects
            with {docref DataObjectTraits.dynamic?} = {ctext false}}
    }
}
{define-class public SealedDataObject {inherits StandardDataObject}
  field protected constant data:FastArray
  field private constant _traits:DataObjectTraits
  || NOTE: docstring inherited
  {getter public {traits}:DataObjectTraits
    {return self._traits}
  }

  {doc-next ||=== SealedDataObject.default
    {purpose Create a {ctext SealedDataObject} instance.}
    {parameter traits,  the metadata characterizing the {ctext DataObject}.}
    {parameter ..., The rest args may contain key/value pairs and {docref EventHandler}s.
        Key/value pairs may be specified either as keyword arguments, 
        or as alternating positional arguments.}
  }
  {constructor public {default
                          traits:DataObjectTraits,
                          default-values:#{Association-of String, any} = null,
                          ...}
    {assert not traits.dynamic?}
    set self._traits = traits
    def members = traits.members
    def data = {FastArray.from-size members.size, null}
    set self.data = data
    {if-non-null default-values then
        {for x key k in default-values do
            {self.set-internal-key k, x}}}
    || process rest args
    let key:#String = null
    {for (x, k) in ... do
        {if-non-null k then
            || keyword arg
            {self.set-internal-key k, x}
         else
            || treat positional as alternating key, value pairs
            {if-non-null k = key then
                {self.set-internal-key k, x}
                set key = null
             else
                set key =
                    {type-switch x
                     case x:String do x
                     case x:EventHandler do
                        || NOTE: not alternating key
                        {self.add-event-handler x}
                        null
                     else {data-exception {lmessage DataObject key must be String, not {type-of x}}}}
            }}}
    {if-non-null key then
        {data-exception {lmessage DataObject key '{value key}' has no value}}}
  }  

  {doc-next ||=== SealedDataObject.from-traits
    {purpose Create a {ctext SealedDataObject} instance, given its {docref DataObjectTraits}.}
    {parameter traits, the metadata characterizing the {ctext DataObject}.}
  }
  {constructor public {from-traits traits:DataObjectTraits}
    set self._traits = traits
    def members = traits.members
    set self.data = {FastArray.from-size members.size, null}
  }
  || NOTE: docstring inherited
  {getter public {size}:int
    {return self.data.size}
  }
  || NOTE: docstring inherited
  {method public {get key:String}:any
    def index = {self.index-for key}
    {if index < 0 then
        {data-exception {message Key '{value key}' not found in {value self}}}}
    {return self.data[index]}
  }
  || NOTE: docstring inherited
  {method public {get-if-exists key:String}:(any, bool)
    def index = {self.index-for key}
    {return
        {if index >= 0 then
            (self.data[index], true)
         else
            (null, false)}}
  }
  || NOTE: docstring inherited
  {method public {set? key:String}:bool
    {return {self.index-for key} >= 0}
  }
  || NOTE: docstring inherited
  {method public {set key:String, val:any}:void
    def index = {self.index-for key}
    {if index < 0 then
        {data-exception {message Can not add member '{value key}': {value self} is not dynamic?}}}
    let changed?:bool = self.data[index] != val
    {if changed? then
        {self.preserve-original-data}
        set self.data[index] = val
        || TODO: consider DWIM "revert" if now unchanged
        {self.trigger-data-changed key}}
  }
  || NOTE: docstring inherited
  {method public {unset key:String}:void
    {data-exception {message Can not remove member '{value key}': {value self} is not dynamic?}}
  }
  || NOTE: docstring inherited
  {method public {to-Iterator}:{Iterator-of any}
    {return {{FastArray-Iterator-of any} self.data}}
  }
  || NOTE: docstring inherited
  {method public {keys-to-Iterator}:{Iterator-of String}
    {return {self.traits.members.to-Iterator}}
  }
  || NOTE: docstring inherited
  {method public {clone}:SealedDataObject
    def clone = {SealedDataObject.from-traits self.traits}
    {self.data.copy-into
        clone.data, 0, 0, self.data.size
    }
    {return clone}
  }
  || performance hacks
  || --------------------
  || NOTE: docstring inherited
  {method public {set-internal-key key:String, val:any}:void
    def index = {self.index-for key}
    set self.data[index] = val
  }
  || NOTE: docstring inherited
  {method public {set-internal index:int, val:any}:void
    set self.data[index] = val
  }
  {method final inline {index-for k:String}:int
    {return {self._traits.index-for k}}
  }
  || change management
  || --------------------
  field protected original-data:#FastArray
  || NOTE: docstring inherited
  {getter public {pending-update?}:bool
    {return self.original-data != null}
  }
  || NOTE: docstring inherited
  {method public {get-original key:String}:any
    def index = {self.index-for key}
    {if index < 0 then
        {data-exception {message Key '{value key}' not found in {value self}}}}
    {return
        {if-non-null original = self.original-data then
            original[index]
         else
            self.data[index]}}
  }
  || NOTE: docstring inherited
  {method public {commit}:void
    || NOTE: subclasses responsible for external coordination
    set self.original-data = null
  }
  || NOTE: docstring inherited
  {method public {revert}:void
    || NOTE: change propagation is damped by 'changed?' checks above
    {if-non-null original = self.original-data then
        {original.copy-into
            self.data, 0, 0, original.size
        }
        || now its the same
        set self.original-data = null}
  }
  {method protected {preserve-original-data}:void
    {if self.original-data == null then
        set self.original-data = {self.data.clone}}
  }
}
|| ====================
{define-class public abstract DataObjectProxy

  {doc-next ||=== DataObjectProxy.subject
    {purpose The underlying data.}
  }
  {getter public abstract {subject}:Object}
}
{doc-next ||=== DynamicDataObject
    {purpose A {docref DataObject} wrapping some data association.}
}
{define-class public abstract DynamicDataObject {inherits DataObject, DataObjectProxy}

  {doc-next ||=== DynamicDataObject.from-JsonObject
    {purpose Create a {docref DataObject} wrapping the specified {docref JsonObject}.}
  }
  {factory public implicit
    {from-JsonObject subject:JsonObject, ...}:DynamicDataObject
    {return
        {{DynamicDataObject-of JsonObject}
            subject, {splice ...}}}
  }

  {doc-next ||=== DynamicDataObject.from-RecordData
    {purpose Create a {docref DataObject} wrapping the specified {docref RecordData}.}
  }
  {factory public implicit
    {from-RecordData subject:RecordData, ...}:DynamicDataObject
    {return
        {{DynamicDataObject-of RecordData}
            subject, {splice ...}}}
  }

  {doc-next ||=== DynamicDataObject.default
    {purpose Create a {docref DataObject} wrapping the specified {ctext HashTable}.}
  }
  {factory public implicit
    {default subject:{HashTable-of String, any}, ...}:DynamicDataObject
    {return
        {{DynamicDataObject-of {HashTable-of String, any}}
            subject, {splice ...}}}
  }
}
{doc-next ||=== DynamicDataObject-of
    {purpose A {docref DataObject} wrapping some data association.}
}
{define-class public {DynamicDataObject-of T:ClassType}
  {inherits {OpenDataObject-of T}, DynamicDataObject}

  {doc-next ||=== DynamicDataObject-of.default
    {purpose Create a {docref DataObject} wrapping the specified subject.}
  }
  {constructor public {default
                          subject:T,
                          traits:DataObjectTraits = DataObjectTraits.anonymous,
                          ...}
    {construct-super.{OpenDataObject-of T} traits, subject}
    {self.process-rest-args {splice ...}}
  }

  || NOTE: docstring inherited
  {getter public {subject}:T
    {return self.data}
  }
  || NOTE: subject does no change management
  || - call this to propagate changes from subject

  {doc-next ||=== DynamicDataObject-of.subject-changed
    {purpose Indicate that properties of underlying data association have changed.}
    {parameter ..., the rest arguments can contain names of changed properties.
        Otherwise, all properties are assumed changed.}
    {details Use this method to induce {docref DataObjectChanged} notifications,
        when underlying data association is modified.}
  }
  {method public {subject-changed
                     || specific properties that changed
                     ...:String
                 }:void
    {if {count-arguments ...} > 0 then
        {for k in ... do
            {self.trigger-data-changed k}}
     else
        {for key k in self do
            {self.trigger-data-changed k}}
    }
  }
}
|| RecordSet adapter 
|| --------------------
{doc-next ||=== DataObjectRecordSet
    {purpose An implementation of the {docref RecordSet} protocol
        for collections of {docref DataObject}s.}
    {notes
        All member {docref DataObject}s must have similar {docref-abbr DataObject.traits}.}
}
{define-class public DataObjectRecordSet {inherits GenericRecordSet}

  {doc-next ||=== DataObjectRecordSet.default
    {purpose Create a {ctext DataObjectRecordSet} instance.}
    {parameter traits, the metadata characterizing the {docref DataObject}s.}
    {parameter ..., the rest arguments can be 
        {docref DataObject}s or {docref EventHandler}s.}
  }
  {constructor public {default 
                          traits:DataObjectTraits,
                          type-info:#GenericRecordData = null,
                          ...}
    def fields = {DataObjectRecordFields traits, type-info = type-info}
    {construct-super fields, {splice ...}}
  }
  || NOTE: docstring inherited
  {method public {append val:any}:void
    {type-switch val
     case d:DataObject do
        {self.ensure-consistent-traits d.traits}
        def r = {DataObjectRecord d, record-set = self}
        {r.internal-attach self}
     case r:DataObjectRecord do
        {self.ensure-consistent-traits r.subject.traits}
        {r.internal-attach self}
     else
        {self.inconsistent-traits-error}}
  }
  || NOTE: docstring inherited
  {method public {new-record}:DataObjectRecord
    def data = {DataObject traits = self.traits}
    {return {DataObjectRecord data, record-set = self}}
  }
  || NOTE: docstring inherited
  {getter public {fields}:DataObjectRecordFields
    {return super.fields asa DataObjectRecordFields}
  }
  || NOTE: docstring inherited
  {getter public {traits}:DataObjectTraits
    {return self.fields.traits}
  }
  {method {ensure-consistent-traits traits:DataObjectTraits}:void
    {if not {self.traits.equal? traits} then
        {self.inconsistent-traits-error}}
  }
  {method {inconsistent-traits-error}:never-returns
    {data-exception {message {this-class}: requires {value self.traits} data}}
  }
}
{doc-next ||=== DataObjectRecord
    {purpose An implementation of {docref Record} for use by {docref DataObjectRecordSet}.}
    {details This object uses the underlying {docref DataObject} 
        for storage and change management,
        making it efficient in its performance and memory utilization.}
}
{define-class public DataObjectRecord {inherits GenericRecord}

  {doc-next ||=== DataObjectRecord.subject
    {purpose The underlying {docref DataObject}.}
  }
  field public-get constant subject:DataObject

  {doc-next ||=== DataObjectRecord.default
    {purpose Create a {ctext DataObjectRecord} instance.}
    {parameter subject, the underlying {docref DataObject}.}
    {parameter record-set, the containing {ctext DataObjectRecordSet}.}
  }
  {constructor public {default 
                          subject:DataObject,
                          record-set:#DataObjectRecordSet = null}
    set self.subject = subject
    {construct-super record-set}
  }
  || GenericRecord protocol
  || NOTE: docstring inherited
  {method protected {internal-get k:String}:any
    {return self.subject[k]}
  }
  || NOTE: docstring inherited
  {method protected {internal-set k:String, x:any}:void
    set self.subject[k] = x
  }
  || implementation:
  || - use DataObject change management
  || - bypass GenericRecord change management
  || NOTE: docstring inherited
  {method public {commit}:void
    {self.subject.commit}
    {super.commit}
  }
  || NOTE: docstring inherited
  {method public {revert}:void
    {self.subject.revert}
    {super.revert}
  }
  {method protected {preserve-data}:void
    || NOTE: done in DataObject
  }
}
{doc-next ||=== DataObjectRecordFields
    {purpose An implementyation of {docref RecordField} 
        for use by {docref DataObjectRecordSet}.}
}
{define-class public DataObjectRecordFields {inherits DefaultRecordFields}

  {doc-next ||=== DataObjectRecordFields.traits
    {purpose The {docref DataObjectTraits} that characterize properties
        of member {docref DataObjectRecord}s.}
  }
  field public-get constant traits:DataObjectTraits

  {doc-next ||=== DataObjectRecordFields.default
    {purpose Create a {ctext DataObjectRecordFields} instance.}
    {parameter traits, the metadata characterizing the {ctext DataObject}.}
    {parameter type-info, an association containing hints
        specifying type of properties.}
    {details
        The {docref-abbr RecordField.domain} of constituent {docref RecordField}s 
        will be derived from the corresponding entry in {ctext type-info}, 
        if specified.  The following kinds of values are allowed
        {itemize
            {item {docref Domain} {em-dash} the specified domain.}
            {item {docref Type} {em-dash} the default domain for 
                the specified type.}
            {item {docref null} {em-dash} {docref StandardAnyDomain}.}
            {item {docref any} {em-dash} the default domain for the 
                {docref type-of} the specified value.}}
        Otherwise it will be {docref StandardAnyDomain}.}
    {usage It is convenient to use a typical member {docref DataObject}.}
  }
  {constructor public {default
                          traits:DataObjectTraits,
                          type-info:#GenericRecordData = null}
    set self.traits = traits
    || DWIM domain
    def any-domain = {Domain.from-type any}
    def domain-for-type =
        {proc {t:Type}:Domain
            {return
                {try {Domain.from-type t}
                 catch e:Exception do any-domain}}}
    def domain-for = 
        {if-non-null type-info then
            {proc {k:String}:Domain
                def x = {type-info.get-if-exists k}
                {return
                    {type-switch x
                     case d:Domain do d
                     case t:Type do {domain-for-type t}
                     case x:Null do any-domain
                     else {domain-for-type {type-of x}}}
                }}
         else
            {proc {k:String}:Domain
                {return any-domain}}
        }
    || derive field descriptors from traits
    def ks = traits.members
    def fs = {{Array-of RecordField}}
    {for k in ks do
        def domain = {domain-for k}
        {fs.append
            {RecordField k,
                domain = domain}}}
    {construct-super {splice fs}}
  }
}
{doc-next ||=== GenericRecordData
    {purpose An implementation of {docref DefaultRecordData}
        with implicit constructors from other kinds of association.}
}
|| Used to "canonicalize" key-value info
|| -- in lieu of duck-typing
{define-class public GenericRecordData {inherits DefaultRecordData}

  {doc-next ||=== GenericRecordData.from-data-object
    {purpose Create a {ctext GenericRecordData} instance
        derived from any {docref DataObject}.}
  }
  {factory public implicit {from-data-object data:DataObject}:GenericRecordData
    def self = {GenericRecordData}
    {for k in data.traits.members do
        set self[k] = data[k]}
    {return self}
  }

  {doc-next ||=== GenericRecordData.from-association
    {purpose Create a {ctext GenericRecordData} instance
        derived from any {ctext{ Association-of String, any}}.}
  }
  {factory public implicit {from-association data:{Association-of String, any}}:GenericRecordData
    def self = {GenericRecordData}
    {for x key k in data do
        set self[k] = x}
    {return self}
  }
  {constructor {default ...}
    {construct-super {splice ...}}
  }
}
|| ECMA Array
|| - can have named members
|| ====================
{doc-next ||=== ExtendedArray
    {purpose Represents an {docref Array} extended by named properties.}
    {details Used for "ECMA Array" data 
        with {docref AMFDeserializer} and {docref AMFSerializer}}.
}
{define-class public ExtendedArray {inherits Array}

  {doc-next ||=== ExtendedArray.data
    {purpose The named properties that extend this object.}
  }
  field public data:#DataObject

  {doc-next ||=== ExtendedArray.default
    {purpose Create an {ctext ExtendedArray} instance.}
    {parameter data, the named properties that extend this object.}
    {parameter ..., the rest arguments are supplied to {docref Array}.}
  }
  {constructor public {default data:#DataObject = null, ...}
    set self.data = data
    {construct-super {splice ...}}
  }

  {doc-next ||=== ExtendedArray.clone
    {purpose Returns a clone of this object.}
  }
  {method public {clone}:ExtendedArray
    def other = {ExtendedArray efficient-size = self.size}
    {for x in self do
        {other.append x}}
    {if-non-null data = self.data then
        set other.data = {data.clone}}
    {return other}
  }

  {doc-next ||=== ExtendedArray.equal?
    {purpose Compares its argument with this object for structural equality.}
  }
  {method public {equal? other:{Sequence-of any}}:bool
    {type-switch other
     case other:ExtendedArray do
        def equal? = 
            {if-non-null data = self.data then
                {if-non-null other-data = other.data then
                    {data.equal? other-data}                     
                 else false}
             else other.data == null}
        {if not equal? then
            {return false}}}
    {return
        {super.equal? other}}
  }
}
|| support 
|| ====================
{define-class {FastArray-Iterator-of T:Type} {inherits {Iterator-of T}}
  field constant subject:{FastArray-of T}
  field index:int
  {constructor {default subject:{FastArray-of T}}
    set self.subject = subject
    {self.reset}
  }
  {method public {reset}:void
    set self.index = 0
  }
  {method public {read-one}:(T, bool)
    def index = self.index
    def subject = self.subject
    {return
        {if index < subject.size then
            {inc self.index}
            (subject[index], false)
         else
            ({uninitialized-value-for-type T}, true)
        }}
  }
}

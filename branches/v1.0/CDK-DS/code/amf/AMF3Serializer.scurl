||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{let package constant max-uint29:int = 0x1FFFFFFF}
{let package constant max-int29:int = 0xFFFFFFF}
{let package constant min-int29:int = -0x10000000}

{define-class public open AMF3Serializer {inherits AMFSerializer}

  field private constant references:AMF3References
  field private constant mapper:AMFObjectAdapters

  {constructor public {default
                          output:ByteOutputStream,
                          mapper:AMFObjectAdapters = AMFObjectAdapters.standard}
    set self.references = {AMF3References}
    set self.mapper = mapper
    {construct-super output}
  }

  {method public open {write-one obj:any}:void
    let output:ByteOutputStream = self.output
    
    {type-switch obj
     case n:Null do
        {output.write-one AMF3Marker.null-marker.value}

     case b:bool do
        {output.write-one 
            {if b then
                AMF3Marker.true-marker.value
            else
                AMF3Marker.false-marker.value
            }
        }

     case s:String do
        {output.write-one AMF3Marker.string-marker.value}
        {self.write-string s}

     case data:DataObject do
        {output.write-one AMF3Marker.object-marker.value}
        {self.write-object data}

     case ext:Externalizable do
        {output.write-one AMF3Marker.object-marker.value}
        {self.write-object ext}

     case array:ExtendedArray do
        || TODO: write the dynamic data
        {output.write-one AMF3Marker.array-marker.value}
        {self.write-array array}

     case array:Array do
        {output.write-one AMF3Marker.array-marker.value}
        {self.write-array array}
        
     case hash:{HashTable-of String, any} do
        {output.write-one AMF3Marker.object-marker.value}
        {self.write-object hash}

     case b-array:ByteArray do
        {output.write-one AMF3Marker.byte-array-marker.value}
        {self.write-byte-array b-array}

     case dt:DateTime do
        {output.write-one AMF3Marker.date-marker.value}
        {self.write-date dt}

     case axd:AMFXmlDocument do
        {output.write-one AMF3Marker.xml-doc-marker.value}
        {self.write-xml-doc axd}

     case d:double do
        {self.write-double d}
        
     case f:float do
        {self.write-double f}

     case obj:Object do
        def (traits, traits?) =
            {self.mapper.traits-for-class.get-if-exists {type-of obj} asa ClassType}
        {if traits? then
            {output.write-one AMF3Marker.object-marker.value}
            {self.write-object obj}
        }

     else
        {if {number? obj} and not obj isa char then
            {self.write-amf-integer (obj asa int)}
         else
            {output.write-one AMF3Marker.undefined-marker.value}
        }
    }
  }

  {method public open {write-amf-integer i:int}:void
    {if i < min-int29 or i > max-int29 then
        {self.write-double i}
     else
        {self.output.write-one AMF3Marker.integer-marker.value}
        {self.write-29-bit-integer i}
    }
  }

  {method public open {write-29-bit-integer i:int}:void

    def low-mask = 0x7F
    def next-sign = 0x80
    
    def bit-shift =
        {proc {quantity:int}:int
            {return
                {bit-or {bit-and {bit-srl i, quantity}, low-mask}, next-sign}}
        }

    {switch i using <
     case 0x0 do
        {self.write-masked-int {bit-shift 22}}
        {self.write-masked-int {bit-shift 15}}
        {self.write-masked-int {bit-shift 8}}
        {self.write-masked-int {bit-and i, 0xFF}}
     case 0x80 do
        {self.write-masked-int i}
     case 0x4000 do
        {self.write-masked-int {bit-shift 7}}
        {self.write-masked-int {bit-and i, low-mask}}
     case 0x200000 do
        {self.write-masked-int {bit-shift 14}}
        {self.write-masked-int {bit-shift 7}}
        {self.write-masked-int {bit-and i, low-mask}}
     else
        {self.write-masked-int {bit-shift 22}}
        {self.write-masked-int {bit-shift 15}}
        {self.write-masked-int {bit-shift 8}}
        {self.write-masked-int {bit-and i, 0xFF}}
    }
  }
  {method private {write-masked-int i:int}:void 
    def masked-i = {bit-and 0xFF, i}
    {self.output.write-one (masked-i asa byte)}
  }

  {method public open {write-double d:double}:void
    {self.output.write-one AMF3Marker.double-marker.value}
    {marshal-out-double self.output, d}
  }

  {method public open {write-string str:String}:void
    || reference
    def ref-index = {self.references.get-string-index str}
    {if ref-index != -1 then
        {self.write-reference-marker ref-index}
     else
        || inline
        {self.write-inline-string str}
    }
  }
  {method private {write-inline-string str:String}:void
    def ce = CharEncoding.utf8
    def out = {ByteVec max-size = str.size * ce.transcode-max-expansion-factor}
    def (in-used, out-made) = {encode-characters str, out, ce}
    {self.write-length out-made}
    {for b in out do
        {self.output.write-one b}
    }
  }
  {method private {write-reference-marker index:int}:void
    def ref-index = {bit-or {bit-sll index, 1}, 0x0}
    {self.write-29-bit-integer ref-index}
  }
  {method private {write-length length:int}:void
    {if length < max-uint29 then
        def val = {bit-or {bit-sll length, 1}, 0x01}
        {self.write-29-bit-integer val}
     else
        {throw {AMFException {lmessage Length value {value length} is too long.}}}
    }
  }
  
  {method public open {write-xml-doc xml:AMFXmlDocument}:void
    def ref-index = {self.references.get-object-index xml}
    {if ref-index != -1 then
        {self.write-reference-marker ref-index}
     else
        {self.write-inline-string xml.xml}
    }
  }

  {method public open {write-date dt:DateTime}:void
    def ref-index = {self.references.get-object-index dt}
    {if ref-index != -1 then
        {self.write-reference-marker ref-index}
     else
        {self.write-length 0}
        let elasped-seconds:double = 
            ((dt.data.epoch-second -
              DateTimeData.epoch-simple.epoch-second) asa double +
             dt.data.fraction) * 1000.0
        {marshal-out-double self.output, elasped-seconds}
    }
  }

  {method public open {write-array array:{Array-of any}}:void
    def ref-index = {self.references.get-object-index array}
    {if ref-index != -1 then
        {self.write-reference-marker ref-index}
     else
        {self.write-length array.size}
        {type-switch array
         case ea:ExtendedArray do
            {if-non-null data = ea.data then
                {for val key name in data do
                    {self.write-string name}
                    {self.write-one val}
                }
            }
        }         
        {self.write-string ""}
        {for val in array do
            {self.write-one val}
        }
    }
  }

  || TODO: eliminate reduncdancy with write-one type-switch
  {method public open {write-object obj:Object}:void
    def or-index = {self.references.get-object-index obj}
    {if or-index != -1 then
        {self.write-reference-marker or-index}
        {return}
    }

    || for AMF we need traits
    || - inherent in DataObject
    || - registered with mapper
    || - convertible to DataObject

    {type-switch obj
        
     case obj:DataObject do
        
        || traits inherent in data object
        {self.write-data-object obj}

     else
        
        def type = {type-of obj} asa ClassType
        def (traits, traits?) = {self.mapper.traits-for-class.get-if-exists type}
        {if traits? then
            
            || traits registered with mapper
            {if traits.externalizable? then
                
                || externalizer defined
                {self.write-externalizable traits, obj}
             else
               
                || use adapter
                || NOTE: inefficient
||--                def data = {DataObjectWrapper.internal obj, type, traits = traits}
||--                {self.write-data-object data}

                || TODO: generate and register write-external proc
                {self.write-inner-object traits, obj}
             }

         else

            || convertible to DataObject
            || TODO: obtain from registered adapters (here or on DataObject)
            {if-non-null obj =
                {type-switch obj
                 case obj:JsonObject do
                    obj asa DynamicDataObject
                    
                 case obj:{HashTable-of String, any} do
                    obj asa DynamicDataObject
                    
                 case obj:RecordData do
                    obj asa DynamicDataObject

                 else null}
             then
                {self.write-data-object obj}

             else                
                {throw {AMFException {lmessage Unable to serialize {value obj}: no traits defined.}}}
            }
        }
    }
  }
  
  {method protected open {write-externalizable
                             traits:DataObjectTraits,
                             obj:Object
                         }:void
    || TODO: why isnt the reference index written ?
    {self.references.get-trait-index traits}
    
    {self.output.write-one 0x7}
    {self.write-string traits.name}
    {(obj asa Externalizable).write-externalizable self}
  }
  
  {method public open {write-data-object obj:DataObject}:void
    def traits = obj.traits
    {self.write-traits traits}

    {for member in traits.members do
        {self.write-one obj[member]}
    }
    {if traits.dynamic? then
        {for val key k in obj do
            def dynamic? = {traits.index-for k} < 0
            {if dynamic? then
                {self.write-string k}
                {self.write-one val}
            }
        }
        {self.write-string ""}
    }
  }
  
  {method public open {write-inner-object
                          traits:DataObjectTraits,
                          obj:Object
                      }:void
    {self.write-traits traits}
    def writer = {self.mapper.writer-for traits.name}
    {writer obj, self}
  }
  
  {method public open {write-byte-array array:ByteArray}:void
    def ref-index = {self.references.get-object-index array}
    {if ref-index != -1 then
        {self.write-reference-marker ref-index}
     else
        {self.write-length array.size}
        {self.output.write array}
    }
  }
  
  {method public open {write-traits trait:DataObjectTraits}:void
    def trait-index = {self.references.get-trait-index trait}
    
    {if trait-index != -1 then
        {self.write-29-bit-integer
            {bit-or {bit-sll trait-index, 2}, 0x1}
        }
     else
        def s-num = trait.members.size
        def dynamic-flg = {if trait.dynamic? then 0x8 else 0x0}
        def type = {bit-or {bit-sll s-num, 4}, dynamic-flg, 0x3}
        
        {self.write-29-bit-integer type}
        {self.write-string trait.name}
        {for member in trait.members do
            {self.write-string {javafy-name member}}
        }
    }
  }
  
}

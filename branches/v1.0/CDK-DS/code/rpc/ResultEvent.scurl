||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public ResultEvent {inherits AbstractEvent}
  field public result:any
  field public headers:any

  let public constant RESULT:String = "result"

  {constructor public {default
                          type:String,
                          bubbles?:bool = false,
                          cancelable?:bool = true,
                          result:any = null,
                          token:#AsyncToken = null,
                          message:#IMessage = null
                      }
    {construct-super
        type,
        bubbles? = bubbles?,
        cancelable? = cancelable?,
        token = token,
        message = message
    }
    set self.result = result
  }

  {method public {clone}:Event
    {return
        {new ResultEvent,
            self.type,
            bubbles? = self.bubbles?,
            cancelable? = self.cancelable?,
            result = self.result,
            token = self.token,
            message = self.message
        }
    }
  }

  {method public {call-token-responders}:void
    {if-non-null self.token then
        {self.token.apply-result self}
    }
  }

  {method public {to-String}:String
    {return {format "%s", self}}
  }
}

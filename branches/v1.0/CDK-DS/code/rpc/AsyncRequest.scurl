||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public AsyncRequest {inherits Producer}
  field private constant pending-requests:{HashTable-of String, IResponder}

  {constructor public {default
                          endpoint:#Url = null,
                          destination:String = "",
                          channel-set:#ChannelSet = null,
                          ...:EventHandler
                      }
    set self.pending-requests = {new {HashTable-of String, IResponder}}
    {construct-super
        endpoint = endpoint,
        destination = destination,
        channel-set = channel-set,
        ...
    }
  }

  {method public {acknowledge
                        ack:AcknowledgeMessage,
                        message:IMessage
                    }:void
    let error?:bool = false
    def (error-any, error-exists?) =
        {ack.headers.get-if-exists AcknowledgeMessage.ERROR_HINT_HEADER}
    {if error-exists? then
        set error? = error-any asa bool
    }
    {super.acknowledge ack, message}
    {if not error? then
        def id = ack.correlation-id asa String
        def (responder, responder-exists?) =
            {self.pending-requests.get-if-exists id}
        {if responder-exists? then
            {self.pending-requests.remove id, error-if-missing? = false}
            {responder.result {MessageEvent message = ack}}
        }
    }
  }

  {method public {fault
                     err:ErrorMessage,
                     message:IMessage
                 }:void
    {super.fault err, message}
    {if self.ignore-fault? then
        {return}
    }
    def id = message.message-id
    def (responder, responder-exists?) =
        {self.pending-requests.get-if-exists id}
    {if responder-exists? then
        {self.pending-requests.remove id, error-if-missing? = false}
        {responder.fault
            {MessageFaultEvent message = err}
        }
    }
  }

  {method protected {invoke
                        message:IMessage,
                        responder:IResponder
                    }:void
    set self.pending-requests[message.message-id] = responder
    {self.send message}
  }

  {method public {has-pending-request-for-message msg:IMessage}:bool
    def id = msg.message-id
    {return {self.pending-requests.key-exists? id}}
  }
}

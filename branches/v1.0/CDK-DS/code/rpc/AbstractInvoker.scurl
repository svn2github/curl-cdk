||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public abstract AbstractInvoker {inherits EventTarget}
  field protected _async-request:AsyncRequest
  field protected result-handler:{proc-type {x:any}:void} =
      {uninitialized-value-for-type {proc-type {x:any}:void}}
  field protected fault-handler:{proc-type {x:any}:void} =
      {uninitialized-value-for-type {proc-type {x:any}:void}}
  field protected result:any
  field protected response-headers:#{Array-of any}
||--  field protected make-objects-bindable?:bool = true
  || Note, this really just keeps track of id's still in use.
  field protected active-calls:ActiveCalls

  {constructor public {default async-request:#AsyncRequest = null}
    set self._async-request =
        {if-non-null async-request then
            async-request
         else
            {AsyncRequest}
        }
    {self.init-handlers}
    set self.active-calls = {ActiveCalls}
  }

  {getter protected {async-request}:AsyncRequest
    {return self._async-request}
  }

  {setter protected {async-request ar:AsyncRequest}:void
    set self._async-request = ar
  }

  {method public {cancel id:#String = null}:#AsyncToken
    {if-non-null id then
        {return {self.active-calls.remove-call id}}
     else
        {return {self.active-calls.cancel-last}}
    }
  }

  {method protected {invoke
                        message:IMessage,
                        token:#AsyncToken = null
                    }:#AsyncToken
    {return {self.async-invoke message, token = token}}
  }

  {method protected {async-invoke
                        message:IMessage,
                        token:#AsyncToken = null
                    }:#AsyncToken
    {if token == null then
        set token = {AsyncToken message}
     else
        set token.message = message
    }

    {self.active-calls.add-call message.message-id, {non-null token}}

    {try
        {self.async-request.invoke
            message,
            {Responder
                self.result-handler,
                self.fault-handler
            }
        }
        {self.dispatch-rpc-event
            {InvokeEvent
                InvokeEvent.INVOKE,
                token = token,
                message = message
            }
        }
     catch me:MessagingException do
        {after 0s do
            {self.dispatch-rpc-event
                {FaultEvent
                    FaultEvent.FAULT,
                    fault = 
                        {Fault
                            "Invoke failed",
                            me.message,
                            fault-detail = "Cannot connect to destination: "
                            & self.async-request.destination
                        },
                    token = token,
                    message = message
                }
            }
        }
     catch e:Exception do
        {after 0s do
            {self.dispatch-rpc-event
                {FaultEvent
                    FaultEvent.FAULT,
                    fault = {Fault "Invoke failed", e.message},
                    token = token,
                    message = message
                }
            }
        }
    }
    {return token}
  }

  {method protected {init-handlers}:void
    set self.result-handler =
        {proc {data:any}:void
            {type-switch data
             case event:MessageEvent do
                def token = {self.pre-handle event}
                {if-non-null token then
                    {if-non-null msg = event.message then
                        {if {self.process-result msg, token} then
                            || TODO: Dispatch
                            ||       {new flash.events.EventBINDING_RESULT}
                            def result-event =
                                {ResultEvent
                                    ResultEvent.RESULT,
                                    result = self.result,
                                    token = token,
                                    message = event.message,
                                    headers = self.response-headers
                                }
                            {self.dispatch-rpc-event result-event}
                        }
                    }
                 else
                    {return}
                }
            }
        }
    set self.fault-handler =
        {proc {info:any}:void
            {type-switch info
             case event:MessageFaultEvent do
                def message-event =
                    {new MessageEvent,
                        MessageEvent.MESSAGE,
                        message = event.message
                    }
                def token = {self.pre-handle message-event}
                {if token == null and
                    not ((event.message asa AsyncMessage).correlation-id == null or
                         (event.message asa AsyncMessage).correlation-id.empty?)
                    and
                    event.fault-code != "Client.Authentication"
                 then
                    {return}
                }
                def fault = {new Fault,
                                {if-non-null fc = event.fault-code then
                                    fc
                                 else
                                    ""
                                },
                                {if-non-null fs = event.fault-string then
                                    fs
                                 else
                                    ""
                                },
                                fault-detail = event.fault-detail
                            }
                def fault-event = {FaultEvent
                                      FaultEvent.FAULT,
                                      fault = fault,
                                      token = token,
                                      headers = self.response-headers,
                                      message = event.message
                                  }
                {self.dispatch-rpc-event fault-event}
            }
        }
  }

  {method protected {dispatch-rpc-event event:AbstractEvent}:void
    {event.call-token-responders}
||--    {if not {event.is-default-prevented?} then
        {self.enqueue-event event}
||--    }
  }

  {method private {pre-handle event:MessageEvent}:#AsyncToken
    def id =
        {if-non-null
            cid = (event.message asa AsyncMessage).correlation-id
         then
            cid
         else
            def call-order = self.active-calls.call-order
            {if call-order.empty? then
                {return null}
             else
                call-order[call-order.size - 1]
            }
        }
    {return {self.active-calls.remove-call id}}
  }

  {method private {process-result message:IMessage, token:AsyncToken}:bool

    def body = message.body

    || TODO:
||--    {if self.make-objects-bindable? and
||--        body != null and
||--        {self.get-qualified-class-name body}
||--     then
||--        set self.result = {new ObjectProxy, body}
||--     else
        set self.result = body
||--    }

    {return true}
  }
}

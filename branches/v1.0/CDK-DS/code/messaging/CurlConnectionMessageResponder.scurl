||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public CurlConnectionMessageResponder {inherits MessageResponder}
  field private constant connect-event-handler:#EventHandler
  field private constant disconnect-event-handler:#EventHandler
  field private disconnected?:bool = false

  {constructor public {default
                          agent:#MessageAgent,
                          message:IMessage,
                          channel:#CurlConnectionChannel = null
                      }
    {construct-super agent, message, channel = channel}
    {if-non-null channel = self.channel then
        set self.connect-event-handler =
            {on e:ChannelFaultEvent do
                {self.channel-fault-handler e}
            }
        {channel.add-event-handler {non-null self.connect-event-handler}}
        set self.disconnect-event-handler =
            {on e:ChannelDisconnectEvent do
                {self.channel-disconnect-handler e}
            }
        {channel.add-event-handler {non-null self.disconnect-event-handler}}
    }
  }

  {method protected {request-timed-out}:void
    {self.disconnect}
    {self.status-handler {self.create-request-timeout-error-message}}
  }

  {method protected {disconnect}:void
    {if self.disconnected? then {return}}
    
    {if-non-null channel = self.channel then
        {if-non-null connect-event-handler = self.connect-event-handler then
            {channel.remove-event-handler connect-event-handler}
        }
        {if-non-null disconnect-event-handler = self.disconnect-event-handler then
            {channel.remove-event-handler disconnect-event-handler}
        }
    }
    set self.disconnected? = true
  }

  {method protected {channel-disconnect-handler e:ChannelDisconnectEvent}:void
    {self.disconnect}
    def err = {new ErrorMessage}
    set err.correlation-id = self.message.message-id
    set err.fault-string = {lmessage Delivery in doubt}
    set err.fault-detail = {lmessage Delivery in doubt}
    set err.fault-code = ErrorMessage.MESSAGE_DELIVERY_IN_DOUBT
    {self.agent.fault err, self.message}
  }

  {method protected {channel-fault-handler e:ChannelFaultEvent}:void
    {self.disconnect}
    def err = {ErrorMessage}
    set err.fault-code = e.fault-code
    set err.fault-detail = e.fault-detail
    set err.fault-string = e.fault-string
    set err.correlation-id = self.message.message-id
    {if-non-null channel = e.channel then
        {if not channel.connected? then
            set err.fault-code = ErrorMessage.MESSAGE_DELIVERY_IN_DOUBT
        }
    }
    {self.agent.fault err, self.message}
  }

  {method protected {init-handlers}:void
    {super.init-handlers}
    set self.result-handler =
        {proc {msg:IMessage}:void
            {self.disconnect}
            {type-switch msg
             case am:AsyncMessage do
                {if am.correlation-id == self.message.message-id then
                    {self.agent.acknowledge
                        am asa AcknowledgeMessage,
                        self.message
                    }
                 else
                    def err = {new ErrorMessage}
                    set err.fault-code = "Server.Acknowledge.Failed" ||""
                    set err.fault-string = {lmessage Acknowledge Failed}
                    set err.fault-detail =
                        {lmessage {value am.correlation-id} !=
                            {value self.message.message-id}}
                    set err.correlation-id = self.message.message-id
                    {self.agent.fault err, self.message}
                }
             else
                def err = {new ErrorMessage}
                set err.fault-code = "Server.Acknowledge.Failed" ||""
                set err.fault-string = {lmessage Acknowledge Failed}
                set err.fault-detail = {lmessage No details available}
                set err.correlation-id = self.message.message-id
                {self.agent.fault err, self.message}
            }
        }
    set self.status-handler =
        {proc {msg:IMessage}:void
            {self.disconnect}
            {type-switch msg
             case am:AsyncMessage do
                {if am.correlation-id == self.message.message-id then
                    def ack = {new AcknowledgeMessage}
                    set ack.correlation-id = am.correlation-id
                    set ack.headers[AcknowledgeMessage.ERROR_HINT_HEADER] = true
                    {self.agent.acknowledge ack, self.message}
                    {self.agent.fault am asa ErrorMessage, self.message}
                 else
                    {type-switch am
                     case err:ErrorMessage do
                        {self.agent.fault err, self.message}
                     else
                        def err = {new ErrorMessage}
                        set err.fault-code = "Server.Acknowledge.Failed" ||""
                        set err.fault-string = {lmessage No details available}
                        set err.fault-detail = {lmessage No details available}
                        set err.correlation-id = self.message.message-id
                        {self.agent.fault err, self.message}
                    }
                }
             else
                def err = {new ErrorMessage}
                set err.fault-code = "Server.Acknowledge.Failed" ||""
                set err.fault-string = {lmessage Acknowledge Failed}
                set err.fault-detail = {lmessage No details available}
                set err.correlation-id = self.message.message-id
                {self.agent.fault err, self.message}
            }
        }
  }
 }

||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public MessageAgent {inherits EventTarget}
  field private _id:String = {AbstractMessage.create-uid}
  field private _channel-set:#ChannelSet
  field private _endpoint:#Url
  field public _destination:String = ""
  field public request-timeout:Time = -1s
  field protected _client-id:#String
  field protected _connected?:bool = false
  field protected disconnect-barrier?:bool = false
  field protected _needs-config?:bool = false
  field protected config-requested?:bool = false
  field protected ignore-fault?:bool = false
  field protected agent-type:#String
  field private _authenticated?:bool = false
  field private send-remote-credentials?:bool = false
  field protected credentials:#String
  field private credentials-charset:#String
  field private remote-credentials:#String
  field private remote-credentials-charset:#String
  field private channel-set-mode:int = MessageAgent.AUTO_CONFIGURED_CHANNELSET
  field private pending-connect-event:#ChannelEvent

  let public constant AUTO_CONFIGURED_CHANNELSET:int = 0
  let public constant MANUALLY_ASSIGNED_CHANNELSET:int = 1

  {constructor public {default
                          endpoint:#Url = null,
                          destination:String = "",
                          channel-set:#ChannelSet = null,
                          ...:EventHandler
                      }
    {construct-super ...}
    set self.channel-set = channel-set
    set self._destination = destination
    set self._endpoint = endpoint
  }

  {getter public {id}:String
    {return self._id}
  }

  {setter public {id s:String}:void
    {if self._id != s then
        set self._id = s
        || TODO: Fire a PropertyChangeEvent
    }
  }

  {getter public {destination}:String
    {return self._destination}
  }

  {setter public {destination d:String}:void
    {if d.empty? then
        {throw {new Exception, "InvalidDestinationError"}}
    }
    {if self._destination != d then
        {if self.channel-set-mode == MessageAgent.AUTO_CONFIGURED_CHANNELSET and
            self.channel-set != null
         then
            {self.channel-set.disconnect self}
            set self.channel-set = null
        }
        || TODO: PropertyChangeEvent
        set self._destination = d
        || TODO: Dispatch event
    }
  }

  {getter public {client-id}:#String
    {return self._client-id}
  }

  {setter protected {client-id id:#String}:void
    {if self.client-id != id then
        set self._client-id = id
        || TODO: {self.flush-client-id-wait-queue}
        || TODO: Fire a PropertyChangeEvent
    }
  }

  {getter public {connected?}:bool
    {return self._connected?}
  }

  {setter public {connected? b?:bool}:void
    {if self._connected? != b? then
        set self._connected? = b?
        || TODO: Fire a PropertyChangeEvent
        {if-non-null self.channel-set then
            {self.set-authenticated?
                b? and self.channel-set.authenticated?,
                credentials = self.credentials
            }
        }
    }
  }

  {getter public {needs-config?}:bool
    {return self._needs-config?}
  }

  {setter public {needs-config? b?:bool}:void
    {if self._needs-config? != b? then
        set self._needs-config? = b?
        {if self._needs-config? then
            let channel-set:#ChannelSet
            {try
                {self.disconnect}
             finally
                {self.internal-set-channel-set channel-set}
            }
        }
    }
  }

  {getter public {channel-set}:#ChannelSet
    {if self._channel-set == null then
        {if-non-null endpoint = self._endpoint then
            set self.channel-set =
                {ChannelSet channel = {AMFChannel id = self.destination, uri = endpoint}}
        }
    }
    {return self._channel-set}
  }

  {setter public {channel-set channel-set:#ChannelSet}:void
    {self.internal-set-channel-set channel-set}
    set self.channel-set-mode = MessageAgent.MANUALLY_ASSIGNED_CHANNELSET
  }

  {getter public {endpoint}:#Url
    {return self._endpoint}
  }
  {setter public {endpoint e:#Url}:void
    {if self._endpoint != e then
        set self._endpoint = e
        {if e != null then
            || Clear ChannelSet so that it can be recreated from the endpoint later.
            set self.channel-set = null
        }
    }
  }

  {getter public {authenticated?}:bool
    {return self._authenticated?}
  }

  {method public {set-authenticated? b?:bool, credentials:#String = null}:void
    {if self._authenticated? != b? then
        set self._authenticated? = b?
        || TODO: Fire a PropertyChangeEvent
        {if b? then
            {if-non-null credentials then
                {if credentials != self.credentials then
                    def err = {new ErrorMessage}
                    set err.fault-code = "Client.Authentication.Error"
                    set err.fault-string =
                        "Credentials specified do not match those used on underlying connection."
                    set err.fault-detail = "Channel was authenticated with a different set of credentials than those used for this agent."
                    {self.enqueue-event
                        {new MessageFaultEvent,
                            MessageFaultEvent.FAULT,
                            message = err
                        }
                    }
                }
            }
        }
    }
  }

  {method public {disconnect}:void
    {if not self.disconnect-barrier? then
        set self.disconnect-barrier? = true
        {if self.channel-set-mode == MessageAgent.AUTO_CONFIGURED_CHANNELSET
         then
            {self.internal-set-channel-set null}
         else
            {if-non-null self._channel-set then
                {self._channel-set.disconnect self}
            }
        }
    }
  }

  {method public {login
                     username:#String,
                     password:#String,
                     charset:#String = null,
                     immediately?:bool = true
                 }:#AuthenticationAgent
    {if-non-null cs = self.channel-set then
        {return
            {cs.login
                username,
                password,
                charset = charset,
                agent = {if immediately? then
                            null
                         else
                            self
                        }
            }
        }
    }
    {return null}
  }

  {method public {logout}:void
    set self.credentials = null
    {if-non-null channel-set = self.channel-set then
        {channel-set.logout agent = self}
    }
  }

  {method public {set-credentials
                     credentials:#String,
                     charset:#String = null
                 }:void
    set self.credentials = credentials
    set self.credentials-charset = charset
    {if-non-null channel-set = self.channel-set then
        {channel-set.set-credentials
            self.credentials,
            agent = self,
            charset = self.credentials-charset
        }
    }
  }

  {method public {set-remote-credentials
                     remote-username:#String,
                     remote-password:#String,
                     charset:#String = null
                 }:void
    {if remote-username == null and remote-password == null then
        set self.remote-credentials = null
        set self.remote-credentials-charset = null
        set self.send-remote-credentials? = false
     else
        set self.remote-credentials =
            {encode-credentials remote-username, remote-password, charset}
        set self.remote-credentials-charset = charset
        set self.send-remote-credentials? = true
    }
  }

  {method protected {reauthorize message:IMessage}:void
    {self.disconnect}
    {self.internal-send message}
  }

  {method protected {internal-send
                        message:IMessage,
                        wait-for-client-id?:bool = false
                    }:void
    {if (message.client-id == null) and
        wait-for-client-id? and
        (self.client-id == null)
     then
        || TODO: Implement message queueing behavior.
    }
    {if message.client-id == null then
        set message.client-id = self.client-id
    }
    {if self.request-timeout > 0s then
        set message.headers[AbstractMessage.REQUEST_TIMEOUT_HEADER] =
            self.request-timeout
    }
    {if self.send-remote-credentials? then
        set message.headers[AbstractMessage.REMOTE_CREDENTIALS_HEADER] =
            self.remote-credentials
        set message.headers[AbstractMessage.REMOTE_CREDENTIALS_CHARSET_HEADER] =
            self.remote-credentials-charset
        set self.send-remote-credentials? = false
    }
    {if-non-null self.channel-set then
        {if not self.connected? and
            self.channel-set-mode == MessageAgent.MANUALLY_ASSIGNED_CHANNELSET
         then
            {self.channel-set.connect self}
        }
        {if self.channel-set.connected? and
            self.needs-config? and
            not self.config-requested?
         then
            set message.headers[CommandMessage.NEEDS_CONFIG_HEADER] = true
            set self.config-requested? = true
        }
        {self.channel-set.send self, message}
     else
        {if not self.destination.empty? then
            {self.init-channel-set message}
            {if-non-null self.channel-set then
                {self.channel-set.send self, message}
            }
         else
            || TODO: InvalidDestinationError
            {throw {new Exception, "InvalidDestinationError"}}
        }
    }
  }

  {method protected {init-channel-set message:IMessage}:void
    {if self.channel-set == null then
        set self.channel-set-mode = MessageAgent.AUTO_CONFIGURED_CHANNELSET
||--        {self.internal-set-channel-set
||--            {ServerConfig.get-channel-set self.destination}
||--        }
        {error "No channel set configured."}
    }

    {if self.channel-set.connected? and
        self.needs-config? and
        not self.config-requested?
     then
        set message.headers[CommandMessage.NEEDS_CONFIG_HEADER] = true
        set self.config-requested? = true
    }

    {self.channel-set.connect self}

    {if-non-null self.credentials then
        {self.channel-set.set-credentials
            self.credentials,
            agent = self,
            charset = self.credentials-charset
        }
    }
  }

  {method public {internal-set-channel-set channel-set:#ChannelSet}:void
    {if self._channel-set != channel-set then
        {if-non-null old-channel-set = self._channel-set then
            {old-channel-set.disconnect self}
        }
        || TODO: Create a PropertyChangeEvent
        set self._channel-set = channel-set
        {if-non-null channel-set then
            {if-non-null self.credentials then
                {channel-set.set-credentials
                    self.credentials,
                    agent = self,
                    charset = self.credentials-charset
                }
            }
            {channel-set.connect self}
        }
        || TODO: Dispatch the PropertyChangeEvent
    }
  }

  {method protected {channel-connect-handler e:ChannelEvent}:void
    set self.disconnect-barrier? = false
    {if self.needs-config? then
        set self.pending-connect-event = e
     else
        set self.connected? = true
        {self.enqueue-event e}
    }
  }

  {method protected {channel-disconnect-handler e:ChannelEvent}:void
    set self.connected? = false
    {if-non-null self.remote-credentials then
        set self.send-remote-credentials? = true
    }
    {self.enqueue-event e}
  }

  {method protected {channel-fault-handler e:ChannelFaultEvent}:void
    {if-non-null channel = e.channel then
        {if not channel.connected? then
            set self.connected? = false
            {if-non-null self.remote-credentials then
                set self.send-remote-credentials? = true
            }
        }
    }
    {self.enqueue-event e}
  }

  {method public {acknowledge ack-message:AcknowledgeMessage, msg:IMessage}:void
    {ack-message.headers.remove
        AcknowledgeMessage.ERROR_HINT_HEADER, error-if-missing? = false
    }
    {if self.config-requested? then
        set self.config-requested? = false
        || TODO: Handle ServerConfig stuff.
        set self.needs-config? = false
        {if-non-null e = self.pending-connect-event then
            {self.channel-connect-handler e}
        }
        set self.pending-connect-event = null
    }
    {if self.client-id == null then
        {if-non-null id = ack-message.client-id then
            set self.client-id = id
         else
            || TODO: {self.flush-client-id-wait-queue}
        }
    }
    {self.enqueue-event
        {new MessageAckEvent,
            MessageAckEvent.ACKNOWLEDGE,
            ack = ack-message,
            correlation = msg
        }
    }
  }

  {method public {fault error-message:ErrorMessage, msg:IMessage}:void
    set self.ignore-fault? = false
    set self.config-requested? = false
    {error-message.headers.remove
        ErrorMessage.RETRYABLE_HINT_HEADER, error-if-missing? = false
    }
    {if self.client-id == null then
        {if-non-null id = error-message.client-id then
            set self.client-id = id
         else
            || TODO: {self.flush-client-id-wait-queue}
        }
    }
    {self.enqueue-event
        {new MessageFaultEvent,
            MessageFaultEvent.FAULT,
            message = error-message
        }
    }
    || Handle server session expiration.
    {if error-message.fault-code == "Client.Authentication" and
        self.authenticated? and
        self.channel-set != null and
        self.channel-set.current-channel != null
     then
        set self.channel-set.current-channel.authenticated? = false
        {if self.channel-set.current-channel.login-after-disconnect? then
            {self.reauthorize msg}
            set self.ignore-fault? = true
        }
    }
  }

  {method public {hasPendingRequestForMessage msg:IMessage}:bool
    {return false}
  }

||--  {method public {initialized document:Object, id:String}:void
||--  }

  {method public {on-message-ack-event e:MessageAckEvent}:void}
  {method public {on-channel-connect e:ChannelEvent}:void}
  {method public {on-channel-disconnect e:ChannelEvent}:void}
  {method public {on-channel-fault-event e:ChannelFaultEvent}:void}
  {method public {on-message-fault-event e:MessageFaultEvent}:void}
||--  {method public {on-property-change-event e:PropertyChangeEvent}:void}
}

||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public CurlConnectionChannel {inherits PollingChannel}
  field private _connection:#CurlConnection

  field public status-handler:{proc-type {net-status-event:Event}:void} =
      {uninitialized-value-for-type {proc-type {net-status-event:Event}:void}}

  {constructor public {default id:#String = null, uri:#Url = null}
    {construct-super id = id, uri = uri}
    || TODO: Flex creates a NetConnection object. We need a similar,
    ||       bi-directional connection manager.
    set self._connection = {new CurlConnection}
    set self._connection.object-encoding = CurlConnection.AMF3
    set self._connection.client = self
    {self.init-handlers}
  }

  {getter public {connection}:#CurlConnection
    {return self._connection}
  }

  {method protected {internal-connect}:void
||--    || NOTE: This call to {super.internal-connect} bubbles up to an empty method
||--    ||       in Channel.scurl. Thus, it's probably unnecessary.
||--    {super.internal-connect}
    || TODO: Various NetConnection things happen here, but the short of it is a
    ||       call to net-connection.connect(endpoint)
    {if-non-null u = self.uri then
        {self._connection.connect u}
    }
  }

  {method public {send agent:MessageAgent, message:IMessage}:void
    {super.send agent, message}
  }

  {method protected {internal-send message-responder:MessageResponder}:void
    {self.set-flex-client-id-on-message message-responder.message}
    let message:IMessage = message-responder.message
    {self.connection.call
        command = null,
        responder = message-responder,
        message
    }
  }

  {method protected {get-message-responder
                        agent:MessageAgent,
                        message:IMessage
                    }:#MessageResponder
    {return {super.get-message-responder agent, message}}
  }

  {method protected {get-poll-sync-message-responder
                        agent:MessageAgent,
                        message:IMessage
                    }:#MessageResponder
    {return {new PollSyncMessageResponder, agent, message, self}}
  }

  {method protected {get-default-message-responder
                        agent:MessageAgent,
                        message:IMessage
                    }:#MessageResponder
    {return
        {new CurlConnectionMessageResponder, agent, message, channel = self}
    }
  }

  {method protected {init-handlers}:void
    set self.status-handler =
        {proc {net-status-event:Event}:void
            || TODO: Do we need such a thing as a NetStatusEvent?
            || Default implementation does nothing
        }
  }
}

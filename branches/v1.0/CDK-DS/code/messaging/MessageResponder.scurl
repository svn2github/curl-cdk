||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public MessageResponder {inherits ConnectionResponder}
  field protected agent:#MessageAgent
  field protected channel:#Channel
  field public message:IMessage
  field protected result-handler:{proc-type {msg:IMessage}:void} =
      {uninitialized-value-for-type {proc-type {msg:IMessage}:void}}
  field protected status-handler:{proc-type {msg:IMessage}:void} =
      {uninitialized-value-for-type {proc-type {msg:IMessage}:void}}
  || Note: Not used yet.
  field private request-alarm:#Alarm

  {constructor public {default
                          agent:#MessageAgent,
                          message:IMessage,
                          channel:#Channel = null
                      }
    {self.init-handlers}
    {construct-super self.result-handler, self.status-handler}
    set self.agent = agent
    set self.message = message
    set self.channel = channel
  }

  {method public {result message:IMessage}:void
    {if not self.request-timed-out? then
        {if-non-null self.request-alarm then
            {self.release-alarm}
        }
        {self.result-handler message}
    }
  }

  {method public {status message:IMessage}:void
    {if not self.request-timed-out? then
        {if-non-null self.request-alarm then
            {self.release-alarm}
        }
        {self.status-handler message}
    }
  }

  {doc-next
    {purpose
        Not implemented yet.
    }
  }
  {method protected {start-request-timeout timeout:Time}:void
    || The argument passed in here might come from a message header, so it might
    || not be the Time value we want it to be.
    || TODO: Set up the timeout alarm.
  }

  {method protected {release-alarm}:void
    {self.request-alarm.cancel}
    set self.request-alarm = null
  }

  {method protected {create-request-timeout-error-message}:ErrorMessage
    def err = {new ErrorMessage}
    set err.correlation-id = self.message.message-id
    set err.fault-code = "Client.Error.RequestTimeout" ||""
    set err.fault-string = "Request Timed Out" ||""
    {return err}
  }

  {method protected {init-handlers}:void
    set self.result-handler =
        {proc {msg:IMessage}:void
            || Default implementation does nothing.
        }
    set self.status-handler =
        {proc {msg:IMessage}:void
            || Default implementation does nothing.
        }
  }
}

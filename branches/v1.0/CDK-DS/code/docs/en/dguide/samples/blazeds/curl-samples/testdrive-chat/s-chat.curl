||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 6.0 applet}

{applet manifest = "../manifest.mcurl"}

{import * from COM.CURL.GUI.STYLED-CONTROLS}
{import * from COM.CURL.CDK.MESSAGES}
{import * from COM.CURL.CDK.MESSAGING}
{import * from COM.CURL.CDK.DATA-OBJECT}
{include "Panel.scurl"}

{document-style PlainDocument}

{set-document-properties
    hstretch? = true,
    vstretch? = true,
    color = "#0b333c"
}

{do
    set {prefs}["selected-ui-background"] = "black"
    set {prefs}["selected-ui-color"] = "white"
    {{get-the-applet}.set-title "Testdrive - Chat"}
}

|| This applet replicates the functionality found in the BlazeDS
|| testdrive-chat sample (aka Publish/Subscribe Collaboration Use Case).
{value
    {install-style-sheet {manifest-url "file", "CDK-DS-SAMPLES-STYLE-SHEET"}}
    || connection parameters
    def base = {url "http://localhost:8400/samples/"}
    def endpoint = {base.merge "messagebroker/amfpolling"}
    def destination = "chat"

    || messaging
    def consumer =
        {Consumer 
            endpoint = endpoint,
            destination = destination
        }
    def producer =
        {Producer 
            endpoint = endpoint,
            destination = destination
        }

    || display
    def string-data-model = {StringDataModel ""}
    def buf = {StringBuf}
    def transcript =
        {TextArea
            style-class = "chat-transcript",
            data-model = string-data-model
        }
    || text control
    def input = {TextField style-class = "chat"}
    || send button
    def send =
        {CommandButton
            label = "Send",
            style-class = "chat",
            rollover-color = "#0b333c"
        }

    || coordination
    {consumer.add-event-handler
        {on e:MessageEvent do
            def body = e.message.body
            {type-switch e
             case ack:MessageAckEvent do
                || Ignore MessageAckEvents.
             else
                || Expecting 'chatMessage' property
                || - for debugging, dump unexpected content
                {type-switch body
                 case obj:DataObject do
                    def (x, x?) = {obj.get-if-exists "chatMessage"}
                    {if x? then
                        {buf.concat "\n" & x}
                        {string-data-model.set-contents buf}
                     else
                        {dump obj}
                    }
                 else
                    {dump body}
                }
                || let display refresh
                {dispatch-events false}
            }
        }
    }
    def send-message =
        {proc {text:String}:void
            {if not text.empty? then
                def msg = {AsyncMessage body = {DataObject chatMessage = text}}
                {producer.send msg}
                {input.unset-value}
            }
        }
    {input.add-event-handler
        {on Action do
            {send-message input.value}            
        }
    }
    {send.add-event-handler
        {on Action do
            {send-message input.value}            
        }
    }

    || connect
    {consumer.subscribe}

    {SkinnableFrame
        style-class = "main-chat",
        {HBox
            valign = "top",
            style-class = "main",
            {Panel
                style-class = "chat",
                title = {message Chat},
                content =
                    {Frame
                        style-class = "chat-transcript",
                        transcript
                    },
                control-bar =
                    {HBox
                        style-class = "chat-control-bar",
                        input,
                        send
                    }
            }
        }
    }
}

||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public CurlConnection
  field public object-encoding:int = CurlConnection.AMF3
  field public client:any
  field protected uri:#Url

  let public constant AMF3:int = 3

  let public response-uri-count:int = 1

  || for gzip enablement
  field public http-headers:#HttpRequestHeaders = null

  {constructor public {default}
  }

  {method public {connect uri:Url, ...}:void
    set self.uri = uri
    || TODO: What else happens here?
  }

  {method public {close}:void
  }

  || From the Flex docs for NetConnection.call():
  ||
  || command:String - A method specified in the form [objectPath/]method. For
  ||                  example, the someObject/doSomething command tells the
  ||                  remote server to invoke the
  ||                  clientObject.someObject.doSomething() method, with all the
  ||                  optional ... arguments parameters. If the object path is
  ||                  missing, clientObject.doSomething() is invoked on the
  ||                  remote server.
  {method public {call
                     command:#String = null,
                     responder:#ConnectionResponder = null,
                     async?:bool = true,
                     ...:any
                 }:void
    {if async? then
        {self.call-async
            command = command,
            responder = responder,
            ...}
     else
        {self.call-sync
            command = command,
            responder = responder,
            ...}
    }
  }
  
  {method public {call-async
                     command:#String = null,
                     responder:#ConnectionResponder = null,
                     ...:any
                 }:void
    {if-non-null u = self.uri then
        
        def (request-data, amf-body) =
            {self.create-request
                command = command,
                {Array {splice ...}}}

        {if-debuggable
            {for x in ... do
                {output "sending message: " & x}
            }}
        
        let http-file:HttpFile = {u.instantiate-File} asa HttpFile
        {http-file.http-async-read-open-byte
            request-method = "post",
            request-data = request-data,
            request-headers = self.http-headers,
            
            {on e:AsyncFileOpenEvent do
                {if-non-null ex = e.exception then
                    {if-non-null responder then
                        def err = {new ErrorMessage}
                        set err.fault-code = "Client.Ping.Failed"
                        set err.fault-string = "error"
                        set err.fault-detail = ex.message
                        set err.root-cause = amf-body
                        {responder.status err}
                    }
                 elseif e.canceled? then
                    {if-non-null responder then
                        def err = {new ErrorMessage}
                        set err.fault-code = "Client.Ping.Canceled"
                        set err.fault-string = "warn"
                        set err.extended-data = e
                        {responder.status err}
                    }
                 else
                    def envelope = 
                        {with-open-streams
                            in = e.stream asa HttpByteInputStream
                         do
                            {AMFEnvelope.deserialize
                                {zstream-for in}
                            }}
                    
                    {if-non-null responder then
                        {self.handle-response responder, envelope}
                    }
                }
            }
        }
    }
  }

  {method public {call-sync
                     command:#String = null,
                     responder:#ConnectionResponder = null,
                     ...:any
                 }:void
    {if-non-null u = self.uri then

        def (request-data, amf-body) =
            {self.create-request
                command = command,
                {Array {splice ...}}}
        
        def http-file = {u.instantiate-File} asa HttpFile
        
        {if-debuggable
            {for x in ... do
                {output "sending message: " & x}
            }}

        {try
            def envelope = 
                {with-open-streams in =
                    {http-file.http-read-open-byte
                        request-method = "post",
                        request-data = request-data,
                        request-headers = self.http-headers}
                 do
                    {AMFEnvelope.deserialize
                        {zstream-for in}
                    }}
            
            {if-non-null responder then
                {self.handle-response responder, envelope}
            }
         catch ex:Exception do
            {if-non-null responder then
                def err = {new ErrorMessage}
                set err.fault-code = "Client.Ping.Failed"
                set err.fault-string = "error"
                set err.fault-detail = ex.message
                set err.root-cause = amf-body
                {responder.status err}
             else
                {throw ex}
            }
        }
    }
  }

  {method protected {handle-response
                        responder:ConnectionResponder,
                        envelope:AMFEnvelope
                    }:void

    def headers = envelope.headers
    def bodies = envelope.bodies
    || TODO: What can we reasonably expect in the envelope?
    ||       The responder's result handler takes a single
    ||       IMessage argument. Can we stop at one message
    ||       from bodies? What if it's an ErrorMessage? Can
    ||       the case exist where there are no messages?
    let msg:#IMessage = null
    {for body in bodies do
        set msg = {self.extract-message body.data}
        {if-non-null msg then
            || TODO: For now we're taking the first message
            ||       we find.
            {break}
        }
    }
    {type-switch msg
     case err:ErrorMessage do
        {responder.status err}
     case ack:AcknowledgeMessage do
        {responder.result ack}
     case cmd:CommandMessage do
        {responder.result cmd}
     else
        def err = {new ErrorMessage}
        set err.fault-code = "Unable to find a Message"
        set err.fault-string = "warn"
        set err.extended-data = bodies
        {responder.status err}
    }
  }
  
  {method protected {create-request
                        command:#String = null,
                        args:Array
                    }:(AMFHttpRequestData, AMFBody)
    def envelope =
        {AMFEnvelope}
    def amf-body =
        {AMFBody
            target-uri = {if-non-null command then command else "null"},
            response-uri = "/" & CurlConnection.response-uri-count,
            length = AMF0Serializer.UNKNOWN_CONTENT_LENGTH,
            args}
    {inc CurlConnection.response-uri-count}
    {envelope.add-body amf-body}

    def request-data =
        {AMFHttpRequestData {envelope.serialize}}
    {return request-data, amf-body}
  }

  {method protected {process-response-stream
                        in:ByteInputStream
                    }:AMFEnvelope
    
    || Deserialize.
    || Note: this will do blocking reads.
    def env = {AMFEnvelope.deserialize in}

    {return env}
  }

  {method protected {host-and-port url:Url}:(String, uint16)
    {type-switch url.stem
     case shd:StemHttpDirectory do
        {assert {shd.name.prefix? "http:"} or {shd.name.prefix? "https:"}}
        {return shd.host, {shd.get-port} asa uint16}
     else
        {error "Not an http: url"}
    }
  }

  || TODO: audit adapter registration
  {method protected {extract-message x:any}:#IMessage
    {return
        {type-switch x
         case msg:IMessage do
            || NOTE: counting on proper serialization registration
            msg
         else
            {error {message Expected IMessage but got {value x}}}
        }}
  }
}

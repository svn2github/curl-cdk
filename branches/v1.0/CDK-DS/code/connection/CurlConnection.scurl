||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public CurlConnection
  field public constant object-encoding:int
  field protected uri:#Url
  field private constant mapper:AMFObjectAdapters

  let public constant AMF3:int = 3

  let public response-uri-count:int = 1

  || for gzip enablement
  field public http-headers:#HttpRequestHeaders = null

  || debugging support
  field public log?:bool = false

  {constructor public {default
                          object-encoding:int = CurlConnection.AMF3,
                          mapper:AMFObjectAdapters = AMFObjectAdapters.standard
                      }
    set self.object-encoding = object-encoding
    set self.mapper = mapper
  }

  {method public {connect uri:Url}:void
    set self.uri = uri
    || TODO: What else happens here?
  }

  {method public {close}:void
  }

  {define-proc private {make-io-failed-error-message ex:Exception, amf-body:AMFBody
                       }:ErrorMessage
    def err = {new ErrorMessage}
    set err.fault-code = "Client.Ping.Failed" ||""
    set err.fault-string = {lmessage Ping failed}
    set err.fault-detail = ex.message
    set err.root-cause = amf-body
    {return err}
  }
  {define-proc private {make-canceled-error-message}:ErrorMessage
    def err = {new ErrorMessage}
    set err.fault-code = "Client.Ping.Canceled" ||""
    set err.fault-string = {lmessage Ping canceled}
    {return err}
  }

  || From the Flex docs for NetConnection.call():
  ||
  || command:String - A method specified in the form [objectPath/]method. For
  ||                  example, the someObject/doSomething command tells the
  ||                  remote server to invoke the
  ||                  clientObject.someObject.doSomething() method, with all the
  ||                  optional ... arguments parameters. If the object path is
  ||                  missing, clientObject.doSomething() is invoked on the
  ||                  remote server.
  {method public {call
                     command:#String = null,
                     responder:#ConnectionResponder = null,
                     ...:any
                 }:void
    {self.call-async
        command = command,
        responder = responder,
        ...
    }
  }
  
  {method private {call-async
                     command:#String = null,
                     responder:#ConnectionResponder = null,
                     ...:any
                 }:void
    {if-non-null u = self.uri then
        
        def (request-data, amf-body) =
            {self.create-request
                command = command,
                {Array ...}}

        {if-debuggable
            {if self.log? then
                {for x in ... do
                    {output "sending message: " & x} ||""
                }}}
        
        let http-file:HttpFile = {u.instantiate-File} asa HttpFile
        
        {if amf-timing? then {stop-watch.start}}
        || TODO: save the AsyncWorker and allow canceling?
        
        {http-file.http-async-read-open-byte
            request-method = HttpRequestMethod.post,
            request-data = request-data,
            request-headers = self.http-headers,
            
            {on e:AsyncFileOpenEvent do
                {if-non-null ex = e.exception then
                    {if-non-null responder then
                        {responder.status
                            {CurlConnection.make-io-failed-error-message ex, amf-body}
                        }
                    }
                 elseif e.canceled? then
                    {if-non-null responder then
                        {responder.status {CurlConnection.make-canceled-error-message}}
                    }
                 else

                    def byte-stream = {maybe-zstream-for e.stream asa HttpByteInputStream}
                    {if not amf-timing? then
                        || TODO: save the AsyncWorker and allow canceling?
                        {byte-stream.async-read
                            {on e:AsyncStreamReadEvent do
                                {byte-stream.close}
                                {if-non-null ex = e.exception then
                                    {if-non-null responder then
                                        {responder.status
                                            {CurlConnection.make-io-failed-error-message ex, amf-body}
                                        }
                                    }
                                 elseif e.canceled? then
                                    {if-non-null responder then
                                        {responder.status {CurlConnection.make-canceled-error-message}}
                                    }
                                 else
                                    def envelope = 
                                        {self.process-response-stream
                                            {ByteArrayInputStream e.data asa ByteArray}
                                        }
                                    {if-non-null responder then
                                        {self.handle-response responder, envelope}
                                    }
                                }
                            }
                        }
                     else
                        def envelope = 
                            {with-open-streams in = byte-stream do
                                || reads HTTP stream entirely, then parses
                                || - demarcates transfer and parse time
                                {self.process-response-stream-after-full-read in}
                            }

                        {if-non-null responder then
                            {self.handle-response responder, envelope}
                        }
                    }
                }
            }
        }
    }
  }

||-- Not used right now.
|#
  {method private {call-sync
                     command:#String = null,
                     responder:#ConnectionResponder = null,
                     ...:any
                 }:void
    {if-non-null u = self.uri then

        def (request-data, amf-body) =
            {self.create-request
                command = command,
                {Array ...}}
        
        def http-file = {u.instantiate-File} asa HttpFile
        
        {if-debuggable
            {if self.log? then
                {for x in ... do
                    {output "sending message: " & x}
                }}}
        
        {if amf-timing? then {stop-watch.start}}

        {try
            def envelope = 
                {with-open-streams in =
                    {http-file.http-read-open-byte
                        request-method = "post",
                        request-data = request-data,
                        request-headers = self.http-headers}
                 do
                    {if not amf-timing? then
                        || parses HTTP stream directly
                        || - most efficient, but combines transfer and parse time
                        {self.process-response-stream {maybe-zstream-for in}}
                     else
                        || reads HTTP stream entirely, then parses
                        || - demarcates transfer and parse time
                        {self.process-response-stream-after-full-read
                            {maybe-zstream-for in}
                        }
                    }
                }
            
            {if-non-null responder then
                {self.handle-response responder, envelope}
            }
         catch ex:Exception do
            {if-non-null responder then
                {responder.status
                    {CurlConnection.make-io-failed-error-message ex, amf-body}
                }
             else
                {throw ex}
            }
        }
    }
  }
#|

  {method protected {handle-response
                        responder:ConnectionResponder,
                        envelope:AMFEnvelope
                    }:void

    || Note: headers aren't looked at.
    def bodies = envelope.bodies
    || TODO: What can we reasonably expect in the envelope?
    ||       The responder's result handler takes a single
    ||       IMessage argument. Can we stop at one message
    ||       from bodies? What if it's an ErrorMessage? Can
    ||       the case exist where there are no messages?
    let msg:#IMessage = null
    {for body in bodies do
        set msg = {self.extract-message body.data}
        {if-non-null msg then
            || TODO: For now we're taking the first message
            ||       we find.
            {break}
        }
    }
    {type-switch msg
     case err:ErrorMessage do
        {responder.status err}
     case ack:AcknowledgeMessage do
        {responder.result ack}
     case cmd:CommandMessage do
        {responder.result cmd}
     else
        def err = {ErrorMessage}
        set err.fault-code = "Channel.Call.Failed" ||""
        set err.fault-string = {lmessage Unable to find a message}
        set err.extended-data = bodies
        {responder.status err}
    }
  }
  
  {method protected {create-request
                        command:#String = null,
                        args:Array
                    }:(AMFHttpRequestData, AMFBody)
    def envelope =
        {AMFEnvelope}
    def amf-body =
        {AMFBody
            target-uri = {if-non-null command then command else "null"}, ||""
            response-uri = "/" & CurlConnection.response-uri-count,
            length = AMF0Serializer.UNKNOWN_CONTENT_LENGTH,
            args
        }
    {inc CurlConnection.response-uri-count}
    {envelope.add-body amf-body}

    def request-data =
        {AMFHttpRequestData {envelope.serialize mapper = self.mapper}}
    {return request-data, amf-body}
  }

  {method protected {process-response-stream
                        in:ByteInputStream
                    }:AMFEnvelope
    
    || Deserialize.
    || Note: this will do blocking reads.
    def env = {AMFEnvelope.deserialize in, mapper = self.mapper}
    
    {if amf-timing? then
        || Deserialization complete.
        {stop-watch.stop}
        || Update the deserialization time.
        {inc server-exec-plus-transfer-time, {stop-watch.elapsed}}
        || Reset the stop watch.
        {stop-watch.reset}
    }
    {return env}
  }

  || NOTE: delays parsing until all bytes arrive
  {method protected {process-response-stream-after-full-read
                        in:ByteInputStream
                    }:AMFEnvelope
    
    || We need to read all the bytes to account for the transfer time, so read
    || the entire stream before we stop the stop-watch. This incurs some memory
    || overhead that we don't want to time, but garbage collection might intrude
    || somewhere along the way.
    || Note that we don't have to do this in production code.
    || Note that we can't use the arrival of the AsyncFileOpenEvent as the
    || signal that server execution is complete because of the some latency
    || inherent in the event mechanism. So we'll continue to collect the server
    || execution and transfer times together.
    || Note that this sequence of timing happens twice, once for the
    || CommandMessage ping and again for the RemotingMessage itself. Flex
    || doesn't incur this additional ping overhead once the Flex app knows it is
    || connected.

    def bytes = {in.read}
    {if amf-timing? then 
        || Server Execution & Transfer complete
        {stop-watch.stop}
        || Update the server exec and transfer time.
        {inc server-exec-plus-transfer-time, {stop-watch.elapsed}}
        || Reset the stop watch.
        {stop-watch.reset}
    }
    
    || Reconstruct the stream.
    def response = {ByteArrayInputStream bytes}
    
    || Start timing the deserialization.
    {if amf-timing? then {stop-watch.start}}
    
    || Deserialize.
    def env = {AMFEnvelope.deserialize response, mapper = self.mapper}
    
    || Deserialization complete.
    {if amf-timing? then 
        {stop-watch.stop}
        || Update the deserialization time.
        {inc deserialization-time, {stop-watch.elapsed}}

        || Reset the stop watch.
        {stop-watch.reset}
    }
    {return env}
  }

  {method protected {host-and-port url:Url}:(String, uint16)
    {type-switch url.stem
     case shd:StemHttpDirectory do
||--        {assert {shd.name.prefix? "http:"} or {shd.name.prefix? "https:"}}
        {return shd.host, {shd.get-port} asa uint16}
     else
        {error {lmessage Not an http: or https: Url.}}
    }
  }

  || TODO: audit adapter registration
  {method protected {extract-message x:any}:#IMessage
    {return
        {type-switch x
         case msg:IMessage do
            || NOTE: counting on proper serialization registration
            msg
         else
            {error {lmessage Expected IMessage but got {value x}}}
        }}
  }
}

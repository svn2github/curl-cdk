||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public DataMessage {inherits AsyncMessage}
  field public identity:#Object
  field public operation:uint

  ||""((
  let public constant REMOTE_CREDENTIALS_HEADER:String = "DSRemoteCredentials"
  let public constant REQUEST_TIMEOUT_HEADER:String = "DSRequestTimeout"
  let public constant SUBTOPIC_HEADER:String = "DSSubtopic"
  ||""))

  let public constant CREATE_OPERATION:uint = 0
  let public constant FILL_OPERATION:uint = 1
  let public constant GET_OPERATION:uint = 2
  let public constant UPDATE_OPERATION:uint = 3
  let public constant DELETE_OPERATION:uint = 4
  let public constant BATCHED_OPERATION:uint = 5
  let public constant MULTI_BATCH_OPERATION:uint = 6
  let public constant TRANSACTED_OPERATION:uint = 7
  let public constant PAGE_OPERATION:uint = 8
  let public constant COUNT_OPERATION:uint = 9
  let public constant GET_OR_CREATE_OPERATION:uint = 10
  let public constant CREATE_AND_SEQUENCE_OPERATION:uint = 11
  let public constant GET_SEQUENCE_ID_OPERATION:uint = 12
  let public constant ASSOCIATION_ADD_OPERATION:uint = 13
  let public constant ASSOCIATION_REMOVE_OPERATION:uint = 14
  let public constant UPDATE_COLLECTION_OPERATION:uint = 17
  let public constant RELEASE_COLLECTION_OPERATION:uint = 18
  let public constant RELEASE_ITEM_OPERATION:uint = 19
  let public constant PAGE_ITEMS_OPERATION:uint = 20
  let public constant UNKNOWN_OPERATION:uint = 1000

  let constant operation-names:StringArray =
    {StringArray
        ||""((
        "create",
        "fill",
        "get",
        "update",
        "delete",
        "batched", 
        "multi_batch",
        "transacted",
        "page",
        "count",
        "get_or_create",
        "create_and_sequence",
        "get_sequence_id",
        "association_add",
        "association_remove",
        "unused15",
        "unused16",
        "update_collection",
        "release_collection",
        "release_item",
        "page_items"
        ||""))
    }

  let public constant UPDATE_BODY_CHANGES:uint = 0
  let public constant UPDATE_BODY_PREV:uint = 1
  let public constant UPDATE_BODY_NEW:uint = 2

  {constructor public {default}
    {construct-super}
  }

  {define-proc public {get-operation-as-String op:uint}:String
    {if (op < 0 or operation >= self.operation-names.size) then
        {return {lmessage "Invalid operation '{value op}'.}}
    }
    {return operation-names[op]}
  }

  {method public {is-create?}:bool
    {if self.operation == DataMessage.CREATE_OPERATION then
        {return true}
     else
        {return false}
    }
  }

  {method public {is-empty-update?}:bool
    {if self.operation == DataMessage.UPDATE_OPERATION and
        self.body[DataMessage.UPDATE_BODY_CHANGES asa int].empty? then
        {return true}
     else
        {return false}
    }
  }
}

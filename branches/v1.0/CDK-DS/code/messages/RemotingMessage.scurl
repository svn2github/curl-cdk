||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public RemotingMessage {inherits AbstractMessage}

  def public traits =
      {DataObjectTraits
        "flex.messaging.messages.RemotingMessage",
        dynamic? = false,
        {StringArray
            "timestamp",
            "headers",
            "body",
            "messageId",
            "timeToLive",
            "clientId",
            "destination",
            "operation",
            "source"}
      }

  field public operation:#String
  || In Flex, source only exists for backward compatibility.
  field public source:#String
  field protected _parameters:{Array-of any} = {new {Array-of any}}

  || A RemotingMessage has the same general form as a CommandMessage. The
  || body contains three important pieces of information:
  ||
  || 1. Operation
  ||    o The name of the method to call.
  || 2. Destination
  ||    o The service to be called, typically identified by a logical
  ||      destination name.
  || 3. Arguments
  ||    o The arguments to call the method with.
  ||
  {constructor public {default}
    {construct-super}
    set self.operation = ""
  }

  {getter public {body}:any
    {return self._parameters}
  }

  {setter public {body body:any}:void
    {type-switch body
     case array:{Array-of any} do
        set self._parameters = array
     case fast-array:{FastArray-of any} do
        def params = {new {Array-of any}}
        {for item in fast-array do
            {params.append item}
        }
        set self._parameters = params
     case read-only-array:{ReadOnlyArray-of any} do
        def params = {new {Array-of any}}
        {for item in read-only-array do
            {params.append item}
        }
        set self._parameters = params
     else
        set self._parameters = {new {Array-of any}, body}
    }
  }

  {getter public {parameters}:{Array-of any}
    {return self._parameters}
  }
}

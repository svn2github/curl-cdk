||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public abstract AbstractMessage {inherits ISmallMessage}
  field private client-id-bytes:#ByteArray
  field private message-id-bytes:#ByteArray

  ||""((
  let public constant FLEX_CLIENT_ID_HEADER:String = "DSId"
  let public constant DESTINATION_CLIENT_ID_HEADER:String = "DSDstClientId"
  let public constant ENDPOINT_HEADER:String = "DSEndpoint"
  let public constant REMOTE_CREDENTIALS_HEADER:String = "DSRemoteCredentials"
  let public constant REMOTE_CREDENTIALS_CHARSET_HEADER:String =
      "DSRemoteCredentialsCharset"
  let public constant REQUEST_TIMEOUT_HEADER:String = "DSRequestTimeout"

  let private constant ALPHA_CHARS:String = "0123456789ABCDEF"
  ||""))
  let private constant HAS_NEXT_FLAG:uint8 = 128
  let private constant BODY_FLAG:uint8 = 1
  let private constant CLIENT_ID_FLAG:uint8 = 2
  let private constant DESTINATION_FLAG:uint8 = 4
  let private constant HEADERS_FLAG:uint8 = 8
  let private constant MESSAGE_ID_FLAG:uint8 = 16
  let private constant TIMESTAMP_FLAG:uint8 = 32
  let private constant TIME_TO_LIVE_FLAG:uint8 = 64
  let private constant CLIENT_ID_BYTES_FLAG:uint8 = 1
  let private constant MESSAGE_ID_BYTES_FLAG:uint8 = 2

  {constructor public {default
                          body:any = {new {HashTable-of String, any}},
                          headers:IMessageHeaders = {IMessageHeaders}
                      }
    {construct-super body = body, headers = headers}
  }

  {define-proc public {create-uid}:String
    let uid:StringBuf = {new StringBuf}
    def rand = {new Random}

    || FIXME: This is not a real UID, since it is just random digits.
    || But there is not any local host information available to
    || unprivileged applets other than time, which is what the random
    || code is seeding with.
    {for i:int = 0 below 8 do
        def code-index = {rand.next-in-range 0, 15}
        {uid.append AbstractMessage.ALPHA_CHARS[code-index]}
    }

    {for i:int = 0 below 3 do
        {uid.append '-'}
        {for j:int = 0 below 4 do
            def code-index = {rand.next-in-range 0, 15}
            {uid.append AbstractMessage.ALPHA_CHARS[code-index]}
        }
    }

    {uid.append '-'}

    def time = {DateTimeData}.epoch-second
    || Note: time is the number of milliseconds since 1970,
    || which is currently more than one trillion.
    || BlazeDS uses the low 8 hex digits of this number in the UID.
    || Just in case the system clock has been reset to
    || Jan 1-4, 1970 (in which case this number could have only
    || 1-7 hex digits), we pad on the left with zeros.
    {format out = uid, "%08X", time}

    {for i:int = 0 below 4 do
        def code-index = {rand.next-in-range 0, 15}
        {uid.append AbstractMessage.ALPHA_CHARS[code-index]}
    }

    {return {uid.to-String}}
  }

  {define-proc public {uid-from-ByteArray ba:ByteArray}:String
    {if ba.size >= 16 then
        def chars = {StringBuf}
        let index:uint = 0
        {for i:int = 0 below 16 do
            {if i == 4 or i == 6 or i == 8 or i == 10 then
                {chars.append '-'}
            }
            def b = ba[i]
            let char-code-index:int = {bit-srl {bit-and b, 0xF0}, 4}
            {chars.append AbstractMessage.ALPHA_CHARS[char-code-index]}
            set char-code-index = {bit-and b, 0x0F}
            {chars.append AbstractMessage.ALPHA_CHARS[char-code-index]}
        }
        {return {chars.to-String}}
    }
    {return ""}
  }
  {define-proc public {uid-to-ByteArray uid:#String}:#ByteArray
    {if uid != null and uid.size == 36 then
        def result = {ByteArray}
        {for u key i in {non-null uid} do
            {if u == '-' then
                {if i == 8 or i == 13 or i == 18 or i == 23 then
                    {continue}
                 else
                    {return null}
                }
            }
            def h1 = {digit u, 16}
            def h2 = {digit u, 16}
            {if h1 < 0 or h2 < 0 then
                {return null}
            }
            {result.append {bit-or {bit-sll h1, 4}, h2} asa byte}
        }
        {return result}
    }
    {return null}
  }

  {setter public {client-id val:#String}:void
    set super.client-id = val
    set self.client-id-bytes = null
  }

  {getter public {message-id}:String
    {if super.message-id.empty? then
        set super.message-id = {AbstractMessage.create-uid}
    }
    {return super.message-id}
  }

  {setter public {message-id val:String}:void
    set super.message-id = val
    set self.message-id-bytes = null
  }

  {method public {get-small-message}:#IMessage
    {return null}
  }

  || A convenience method for deserializing externalizable AbstractMessages.
  {method public {read-external deserializer:AMFDeserializer}:void
    def input = deserializer.input
    def flags-array = {AbstractMessage.read-flags input}
    {for flags key i in flags-array do
        let reserved-position:uint8 = 0
        {switch i
         case 0 do
            {if {bit-and flags, AbstractMessage.BODY_FLAG} != 0 then
                set self.body = {deserializer.read-one}
            }
            {if {bit-and flags, AbstractMessage.CLIENT_ID_FLAG} != 0 then
                set self.client-id = {deserializer.read-one} asa String
            }
            {if {bit-and flags, AbstractMessage.DESTINATION_FLAG} != 0 then
                set self.destination = {deserializer.read-one} asa String
            }
            {if {bit-and flags, AbstractMessage.HEADERS_FLAG} != 0 then
                set self.headers = {deserializer.read-one} asa #Object
            }
            {if {bit-and flags, AbstractMessage.MESSAGE_ID_FLAG} != 0 then
                set self.message-id = {deserializer.read-one} asa String
            }
            {if {bit-and flags, AbstractMessage.TIMESTAMP_FLAG} != 0 then
                set self.timestamp = {deserializer.read-one} asa double
            }
            {if {bit-and flags, AbstractMessage.TIME_TO_LIVE_FLAG} != 0 then
                set self.time-to-live = {deserializer.read-one} asa double
            }
            set reserved-position = 7
         case 1 do
            {if {bit-and flags, AbstractMessage.CLIENT_ID_BYTES_FLAG} != 0 then
                set self.client-id-bytes = {deserializer.read-one} asa ByteArray
                {if-non-null bytes = self.client-id-bytes then
                    set self.client-id =
                        {AbstractMessage.uid-from-ByteArray bytes}
                }
            }
            {if {bit-and flags, AbstractMessage.MESSAGE_ID_BYTES_FLAG} != 0 then
                set self.message-id-bytes = {deserializer.read-one} asa ByteArray
                {if-non-null bytes = self.message-id-bytes then
                    set self.message-id =
                        {AbstractMessage.uid-from-ByteArray bytes}
                }
            }
            set reserved-position = 2
        }
        {if {bit-srl flags, reserved-position} != 0 then
            {for j = reserved-position below 6 do
                {if {bit-and {bit-srl flags, j}, 1} != 0 then
                    {deserializer.read-one}
                }
            }
        }
    }
  }

  {define-proc protected {read-flags input:ByteInputStream}:ByteArray
    let has-next-flag?:bool = true
    def flags-array = {ByteArray}
    let i:int = 0
    {while has-next-flag? do
        def flags = {input.read-one}

        {flags-array.append flags}

        {if {bit-and flags, AbstractMessage.HAS_NEXT_FLAG} != 0 then
            set has-next-flag? = true
         else
            set has-next-flag? = false
        }
        {inc i}
    }
    {return flags-array}
  }

  {method public open {write-external serializer:AMFSerializer}:void
    let flags:int = 0

    {if self.client-id-bytes == null and self.client-id != null then
        set self.client-id-bytes =
            {AbstractMessage.uid-to-ByteArray {non-null self.client-id}}
    }
    {if self.message-id-bytes == null then
        set self.message-id-bytes =
            {AbstractMessage.uid-to-ByteArray self.message-id}
    }
    {if self.body != null then
        set flags = {bit-or flags, AbstractMessage.BODY_FLAG}
    }
    {if self.client-id != null and self.client-id-bytes == null then
        set flags = {bit-or flags, AbstractMessage.CLIENT_ID_FLAG}
    }
    {if not self.destination.empty? then
        set flags = {bit-or flags, AbstractMessage.DESTINATION_FLAG}
    }
    {if not self.headers.empty? then
        set flags = {bit-or flags, AbstractMessage.HEADERS_FLAG}
    }
    {if not self.message-id.empty? and self.message-id-bytes == null then
        set flags = {bit-or flags, AbstractMessage.MESSAGE_ID_FLAG}
    }
    {if self.timestamp != 0 then
        set flags = {bit-or flags, AbstractMessage.TIMESTAMP_FLAG}
    }
    {if self.time-to-live != 0 then
        set flags = {bit-or flags, AbstractMessage.TIME_TO_LIVE_FLAG}
    }
    {if self.client-id-bytes != null or self.message-id-bytes != null then
        set flags = {bit-or flags, AbstractMessage.HAS_NEXT_FLAG}
    }
    {serializer.output.write-one (flags asa uint8)}

    set flags = 0

    {if self.client-id-bytes != null then
        set flags = {bit-or flags, AbstractMessage.CLIENT_ID_BYTES_FLAG}
    }
    {if self.message-id-bytes != null then
        set flags = {bit-or flags, AbstractMessage.MESSAGE_ID_BYTES_FLAG}
    }
    {if flags != 0 then
        {serializer.output.write-one (flags asa uint8)}
    }
    {if-non-null body = self.body then
        {serializer.write-one body}
    }
    {if self.client-id != null and self.client-id-bytes == null then
        {serializer.write-one self.client-id}
    }
    {if not self.destination.empty? then
        {serializer.write-one self.destination}
    }
    {if not self.headers.empty? then
        {serializer.write-one self.headers}
    }
    {if not self.message-id.empty? and self.message-id-bytes == null then
        {serializer.write-one self.message-id}
    }
    {if self.timestamp != 0 then
        {serializer.write-one self.timestamp}
    }
    {if self.time-to-live != 0 then
        {serializer.write-one self.time-to-live}
    }
    {if-non-null client-id-bytes = self.client-id-bytes then
        {serializer.write-one client-id-bytes}
    }
    {if-non-null message-id-bytes = self.message-id-bytes then
        {serializer.write-one message-id-bytes}
    }
  }
}

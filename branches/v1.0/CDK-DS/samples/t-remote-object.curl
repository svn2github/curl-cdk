||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 6.0 applet}
{applet manifest = "manifest.mcurl",
    {compiler-directives careful? = true}}

{import * from COM.CURL.CDK.RPC}
{import * from COM.CURL.CDK.AMF}
{import * from COM.CURL.CDK.DATA-OBJECT}
{import * from COM.CURL.CDK.MESSAGING}
  
|| sample
|| --------------------
{document-style PlainDocument}
{set-document-properties
    hstretch? = true,
    vstretch? = true,
    background = "#e6e6e6",
    margin = 0.5cm
}
{value
    || service configuration
    || --------------------
    def destination = "product"
    def endpoint = {url "http://localhost:8400/samples/messagebroker/amf"}

    || product service
    || --------------------
    def service =
        {RemoteObject 
            endpoint,
            destination,
            channel-set =
                {ChannelSet
                    channel =
                        {AMFChannel
                            id = destination,
                            uri = endpoint
                        }
                },
            {on e:FaultEvent do
                set cb.enabled? = true
                def f = e.fault
                def msg = {message Fault Code: {value f.fault-code} '{value f.fault-string}'}
                {popup-message msg}
            }
        }
    , get-products =
        {service.get-operation "getProducts"}
    , cb =
        {CommandButton
            color = "#0b333c",
            font-weight = "bold",
            label = "Get Data",
            cursor = cursor-hand,
            {on Action at cb:CommandButton do
                set cb.enabled? = false
                {get-products.send}
            }
        }
    , result-display =
        {Frame
            hstretch? = true,
            vstretch? = true,
            width = {add-stretch},
            height = {add-stretch}
        }

    || presentation
    || --------------------
    def present-result =
        {proc {items:ArrayCollection}:Graphic
            def rg = {RecordGrid}
            {if items.size > 0 then
                || specify recordset
                def typical = items[0] asa DataObject
                def traits = typical.traits
                def rs =
                    {DataObjectRecordSet traits,
                        type-info = typical}
                || populate recordset
                {for x in items do
                    def item = x asa DataObject
                    {rs.append item}}
                {rs.commit}
                || refresh display
                set rg.record-source = rs
                || readable numeric format
                {for col in rg.columns do
                    {switch col.field.domain.type
                     case double do
                        set col.format-spec = "%.2f"
                    }}}            
            {return rg}
        }
   
    || coordination
    || --------------------
    {get-products.add-event-handler
        {on e:ResultEvent do
            set cb.enabled? = true
            {result-display.add
                replace? = true,
                {present-result e.result asa ArrayCollection}}
        }}

    || layout
    || --------------------
    {VBox
        hstretch? = true,
        spacing = 0.1cm,
        {big {bold color = "#0b333c", BlazeDS Product Service}},
        {HBox cb, {Fill}},
        result-display
    }
}

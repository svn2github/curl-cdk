||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{curl 6.0 applet}

{applet manifest = "../manifest.mcurl"}

{import * from CURL.LANGUAGE.FORMAT}
{import * from COM.CURL.GUI.STYLED-CONTROLS}
{import * from COM.CURL.CDK.RPC}
{import * from COM.CURL.CDK.AMF}
{import * from COM.CURL.CDK.DATA-OBJECT}
{import * from COM.CURL.CDK.SAMPLES-SUPPORT}
{include "Panel.scurl"}
{include "TileSelector.scurl"}

{document-style PlainDocument}

{set-document-properties
    hstretch? = true,
    vstretch? = true,
    color = "#0b333c"
}

{do
    {{get-the-applet}.set-title "Curl Programming Model 101"}
}
|| This applet replicates the functionality found in the BlazeDS testdrive-101
|| sample.
{value
    {install-style-sheet {manifest-url "file", "CDK-DS-SAMPLES-STYLE-SHEET"}}

    def base = {url "http://localhost:8400/samples/"}
    def endpoint = {base.merge "messagebroker/amf"}
    def destination = "product"
    
    def service =
        {RemoteObject
            endpoint,
            destination,
            {on e:FaultEvent do
                def msg = e
                {popup-message msg}
            }
        }
    def get-products = {service.get-operation "getProducts"}

    def cf = {NumberFormatter.create-currency-formatter}
    def img-loc = {proc {file:String}:Url
                      {return {url "../images/" & file}}
                  }

    def catalog-panel = {TileSelector style-class = "tiles", vstretch? = true}

    def product-panel =
        {Frame
            style-class = "panel",
            {HBox
                style-class = "stack",
                valign = "top",
                {DisplayFrame
                    {bind value to "image",
                        {format x:String as
                            {image source = {img-loc x}}
                        }
                    }
                },
                {VBox
                    style-class = "stack",
                    {DisplayFrame
                        style-class = "product",
                        {bind value to "name"}
                    },
                    {DisplayFrame
                        style-class = "price",
                        {bind value to "price",
                            {format x:any as
                                {cf.format x}
                            }
                        }
                    },
                    {DisplayFrame
                        {bind value to "description"}
                    }
                }
            }
        }

    def main =
        {HBox
            valign = "top",
            style-class = "main",
            {Panel
                title = {message Catalog},
                content = catalog-panel
            },
            {Panel
                title = {message Product Details},
                content = product-panel
            }
        }

    {get-products.add-event-handler
        || populate tiles when products change
        {on e:ResultEvent do
            def items = e.result asa ArrayCollection
            {if items.size > 0 then
                || specify recordset
                def typical = items[0] asa DataObject
                def traits = typical.traits
            }
            {for item in items do
                def data = item asa DataObject
                {catalog-panel.contents.add
                    || tile
                    || --------------------
                    {VBox
                        style-class = "thumbnail",
                        data-binding-context =
                            {DataObjectDataBindingContext data},
                        |#TEMP#| user-data = data,
                        graphic-selectable = {GraphicSelectable},
                        opaque-to-events? = true,
                        {on PointerEnter at g:Graphic do
||--                            {if-non-null color = g.rollover-color then
||--                                set g.background = color
||--                            }
                            {if-non-null bg = catalog-panel.rollover-background
                             then
                                set g.background = bg
                            }
                        },
                        {on PointerLeave at g:Graphic do
                            {unset g.background}
                        },
                        {on PointerRelease at g:Graphic do
                            {if-non-null sel = g.graphic-selectable then
                                {if {catalog-panel.selection.contains? sel} then
                                    {if-non-null
                                        color = catalog-panel.selection-color
                                     then
                                        set g.background = color
                                    }
                                }
                            }
                        },
                        {DisplayFrame
                            style-class = "title",
                            {bind value to "name"}
                        },
                        {DisplayFrame
                            style-class = "image",
                            {bind value to "image",
                                {format x:String as
                                    {image source = {img-loc x}}
                                }
                            }
                        },
                        {DisplayFrame
                            style-class = "price",
                            {bind value to "price",
                                {format x:any as
                                    {cf.format x}
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    {catalog-panel.add-event-handler
        || populate detail when selection changes
        {on ValueChanged at c:TileSelector do
            set product-panel.data-binding-context =
                {type-switch c.value
                 case data:DataObject do
                    {DataObjectDataBindingContext data}
                 else
                    {DataObjectDataBindingContext {StandardDataObject}}
                }
        }
    }
    {main.add-event-handler
        || request products when loaded
        {on AttachEvent do
            {get-products.send}
        }
    }
    {SkinnableFrame
        style-class = "main",
        main
    }
}

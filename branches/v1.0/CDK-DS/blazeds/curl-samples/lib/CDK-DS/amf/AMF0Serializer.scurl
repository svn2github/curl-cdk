||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{define-class public AMF0Serializer

  field private constant output:ByteOutputStream
  field private constant references:AMF0References
  field private version:AMFPacketVersion = AMFPacketVersion.AMF3
  field private constant mapper:AMFObjectAdapters

  let public constant UNKNOWN_CONTENT_LENGTH:int = -1

  {constructor public {default
                          output:ByteOutputStream,
                          version:AMFPacketVersion = AMFPacketVersion.AMF3,
                          mapper:AMFObjectAdapters = AMFObjectAdapters.standard
                      }
    set self.output = output
    set self.references = {AMF0References}
    set self.version = version
    set self.mapper = mapper
  }

  {method public {serialize envelope:AMFEnvelope}:ByteOutputStream
    || Version
    {marshal-out-uint16 self.output, self.version.value asa uint16}
    || Header count
    {marshal-out-uint16 self.output, envelope.headers.size asa uint16}
    || Headers
    {for header in envelope.headers do
        {self.write-string header.name}
        {marshal-out-bool
            self.output, header.must-understand?}
        {marshal-out-int
            self.output, AMF0Serializer.UNKNOWN_CONTENT_LENGTH}
        {self.write-one header.value}
    }
    || Body count
    {marshal-out-uint16 self.output, envelope.bodies.size asa uint16}
    || Bodies
    {for body in envelope.bodies do
        {self.write-string body.target-uri}
        {self.write-string body.response-uri}
        {marshal-out-int self.output, body.length}
        || TODO: The switchover to AMF3 could probably be pushed down into
        ||       {AMF0Serializer.write-one}.
        {switch self.version
         case AMFPacketVersion.AMF0 do
||--            {error "Unsupported version"}
            {self.write-one body.data}
         case AMFPacketVersion.AMF3 do
            {marshal-out-uint8
                self.output,
                AMF0Marker.avmplus-object-marker.value
            }
            def amf3-serializer =
                {AMF3Serializer self.output, mapper = self.mapper}
            {amf3-serializer.write-one body.data}
         else
            {error "Unsupported Version"}
        }
    }
    {return self.output}
  }

  {method public open {write-one obj:any}:void
    def output = self.output

    {type-switch obj
     case n:Null do
        {output.write-one AMF0Marker.null-marker.value}

     case b:bool do
        {output.write-one AMF0Marker.boolean-marker.value}
        {self.write-bool b}

     case str:String do
        def out = {self.encode-string str}
        {if out.size > max-uint16 then
            {output.write-one AMF0Marker.long-string-marker.value}
            {self.write-encoded-long-string out}
         else
            {output.write-one AMF0Marker.string-marker.value}
            {self.write-encoded-string out}
        }

     case obj:DataObject do
        {if {self.write-reference obj} then {return}}
        {if obj.traits.name != "" then
            {output.write-one AMF0Marker.typed-object-marker.value}
            {self.write-typed-object obj}
         else
            {output.write-one AMF0Marker.object-marker.value}
            {self.write-object obj}
        }

     case dt:DateTime do
        {output.write-one AMF0Marker.date-marker.value}
        {self.write-date dt}

     case sa:{Array-of any} do
        {if {self.write-reference sa} then {return}}
        {output.write-one AMF0Marker.strict-array-marker.value}
        {self.write-strict-array sa}

     case ea:{HashTable-of String, any} do
        {if {self.write-reference ea} then {return}}
        {output.write-one AMF0Marker.ecma-array-marker.value}
        {self.write-ecma-array ea}

     case axd:AMFXmlDocument do
        {output.write-one AMF0Marker.xml-document-marker.value}
        {self.write-xml-document axd.xml}
        
     else
        {if {number? obj} then
            {output.write-one AMF0Marker.number-maker.value}
            {self.write-number obj asa double}
         else
            {output.write-one AMF0Marker.unsupported-marker.value}
        }
    }
  }

  {method public open {write-number d:double}:void
    {marshal-out-double self.output, d}
  }

  {method public open {write-bool b:bool}:void
    {marshal-out-bool self.output, b}
  }

  {method private {encode-string str:String}:ByteVec
    def ce = CharEncoding.utf8
    def out = {ByteVec
                  max-size = str.size * ce.transcode-max-expansion-factor}
    def (in-used, out-made) = {encode-characters str, out, ce}
    {return out}
  }
  {method public open {write-string str:String}:void
    def out = {self.encode-string str}
    {self.write-encoded-string out}
  }
  {method public open {write-encoded-string out:ByteVec}:void
    def length = out.size
    {assert length <= max-uint16}
    {marshal-out-uint16 self.output, (length asa uint16)}
    {self.output.write {ByteArray.from-FastArray out}}
  }

  {method public open {write-long-string str:String}:void
    def out = {self.encode-string str}
    {self.write-encoded-long-string out}
  }
  {method public open {write-encoded-long-string out:ByteVec}:void
    def length = out.size
    {marshal-out-uint self.output, (length asa uint)}
    {self.output.write {ByteArray.from-FastArray out}}
  }


  {method public open {write-object obj:DataObject}:void
    {for val:any key k:String in obj do
        {self.write-string k}
        {self.write-one val}
    }
    {self.write-string ""}
    {self.output.write-one AMF0Marker.object-end-marker.value}
  }

  {method public open {write-reference obj:Object}:bool
    def index = {self.references.get-object-index obj}
    {if index != -1 then
        {self.output.write-one AMF0Marker.reference-marker.value}
        {marshal-out-uint16 self.output, (index asa uint16)}
        {return true}
     else
        {return false}
    }
  }

  {method public open {write-ecma-array hash:{HashTable-of String, any}}:void
    {marshal-out-uint self.output, hash.size asa uint}
    {for val:any key k:String in hash do
        {self.write-string k}
        {self.write-one val}
    }
    {self.write-string ""}
    {self.output.write-one AMF0Marker.object-end-marker.value}
  }
  
  {method public open {write-strict-array array:{Array-of any}}:void
    {marshal-out-uint self.output, array.size asa uint}
    {for val:any in array do
        {self.write-one val}
    }
  }
  
  {method public open {write-date date:DateTime}:void
    let elasped-seconds:double = 
        ((date.data.epoch-second -
          DateTimeData.epoch-simple.epoch-second) asa double +
         date.data.fraction) * 1000.0
    let time-zone:int16 = 0x0000
    {marshal-out-double self.output, elasped-seconds}
    {marshal-out-int16 self.output, time-zone}
  }

  {method public open {write-xml-document xml:String}:void
    {self.write-long-string xml}
  }

  {method public open {write-typed-object obj:DataObject}:void
    {self.write-string obj.traits.name}
    {for val:any key k:String in obj do
        {self.write-string k}
        {self.write-one val}
    }
    {self.write-string ""}
    {self.output.write-one AMF0Marker.object-end-marker.value}
  }
}

||| Copyright (C) 1998-2008, Sumisho Computer Systems Corp.  All Rights Reserved.
|||
||| An OpenCurl project.

||| Licensed under the Apache License, Version 2.0 (the "License");
||| you may not use this file except in compliance with the License.
||| You may obtain a copy of the License at
||| 
|||     http://www.apache.org/licenses/LICENSE-2.0
||| 
||| Unless required by applicable law or agreed to in writing, software
||| distributed under the License is distributed on an "AS IS" BASIS,
||| WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
||| See the License for the specific language governing permissions and
||| limitations under the License.

{import * from COM.CURL.CDK.DATA-OBJECT}
{import * from COM.CURL.CDK.AMF}
{import * from COM.CURL.CDK.MESSAGES}

{import * from COM.CURL.CDK.DATA-TEST-SUPPORT}

{define-proc {test-one-amf3 this:any}:(any, ByteArray)
    def bytes = {ByteArray}
    def out = {AMF3Serializer {ByteArrayOutputStream bytes}}
    def in = {AMF3Deserializer {ByteArrayInputStream bytes}}
    {out.write-one this}
    def that = {in.read-one}
    {return that, bytes}
}
{define-proc {test-one-amf0 this:any}:(any, ByteArray)
    def bytes = {ByteArray}
    def out = {AMF0Serializer {ByteArrayOutputStream bytes}}
    def in = {AMF0Deserializer {ByteArrayInputStream bytes}}
    {out.write-one this}
    def that = {in.read-one}
    {return that, bytes}
}

{define-proc {round-trip-tests
                 name:String,
                 xs:Array,
                 test-one:{proc-type {any}:(any, ByteArray)} = test-one-amf3
             }:TestSuite
    def suite = {TestSuite name}
    {for x key i in xs do
        def tx = {type-of x}
        def printable? = tx.primitive? or x isa String or x == null
        def name =
            {if printable? then
                {format "%w", x}
             else
                {format "%s #%02d", tx, i}}
        {suite.add
            {test-case name,
                def (y, bs) = {test-one x}
                def eq? = {test-compare x, y}
                {TestCondition.assert
                    message = {hex-encode bs},
                    eq?}}}}
    {return suite}
}


{TestSuite "AMF Serialization",
    
    || primitives
    || --------------------
    {value
        def xs =
            {Array
                {bit-sll 1, 28} - 2,
                {bit-sll 1, 28} - 1,
                {bit-sll 1, 28},
                {bit-sll 1, 28} + 1,
                {bit-sll 1, 29} - 1,
                "===",
                -1,
                -2,
                -{bit-sll 1, 28} + 1,
                -{bit-sll 1, 28},
                "===",
                0x00FFFFFF,
                0x01000000, 
                0x0FFFFFFF,
                0x10000000,
                0x20000000,
                -0x0FFFFFFF,
                -0x10000000,
                -0x20000000,
                -0x100000,
                -0x200000,
                0x4000,
                0x200000 - 1,
                0x200000,
                12.34,
                12.34f,
                "abc",
                "",
                null,
                true,
                false
            }
        {TestSuite "primitives",
            {round-trip-tests "AMF3", xs},
            {round-trip-tests "AMF0", xs,
                test-one = test-one-amf0}
        }
    },    
    || structures
    || --------------------
    {value
        def t-open = {DataObjectTraits "Foo", {StringArray}}
        def t-mixed = {DataObjectTraits "Foo2", {StringArray "a", "b"}}
        def t-sealed = {DataObjectTraits "Foo3", {StringArray "a", "b"}, dynamic? = false}
        || anonymous
        def x1 = {DataObject a = 1, b = "q"}
        || open, mixed
        def x2 = {DataObject traits = t-mixed, a = 1, b = "q", c = false}
        || sealed
        def y2 = {DataObject traits = t-sealed, a = 1, b = "q"}
        || open
        def y3 = {DataObject traits = t-open, a = 1, b = "q"}
        def h = {{HashTable-of String, any} "foo", true}
        || TODO: XDM adapter
        def xml = "<foo id='1'><bar/>baz</foo>"
        
        def xs =
            {Array
                {Array 1, 2, 3},
                {Array "ABC", "ABC"},
                {Array "ABC", "DEF"},
                {ByteArray 9, 8, 7},
                {DateTime "2007-01-29"},
                {DateTime "2007-01-29 12:01:02"},
                {DateTime "2007-01-29 12:01:02.0015"},
                x1,
                x2,
                y2,
                {Array x1, x1},
                {Array x1, x2},
                {Array x1, x2, x1, x2},
                {ArrayCollection x1, x2, x1, x2},
                {ExtendedArray data = x1, 0xABCD, 0xBAAF},
                {ExtendedArray data = x1},
                {ExtendedArray 0xABCD, 0xBAAF},
                || NOTE: this "works" but fails test-compare, because types are incongruent
                || TODO: special test for association types that return as DataObject
||--                h,
                h asa DynamicDataObject,
                {AMFXmlDocument xml},
                null
            }
        || duplicates every item
        def xs2 = {xs.clone}
        {xs2.concat xs}

        def xs-amf0 =
            || NOTE: no static members, no ByteArray
            {Array
                {Array 1, 2, 3},
                {Array "ABC", "ABC"},
                {Array "ABC", "DEF"},
                {DateTime "2007-01-29"},
                {DateTime "2007-01-29 12:01:02"},
                {DateTime "2007-01-29 12:01:02.0015"},
                x1,
                y3,
                {Array x1, x1},
                {Array x1, y3},
                {Array x1, y3, x1, y3},
                {ArrayCollection x1, y3, x1, y3},
                || TODO: not yet implemented
||--                {ExtendedArray data = x1, 0xABCD, 0xBAAF},
                || NOTE: this "works" but fails test-compare, because types are incongruent
                || TODO: special test for association types that return as DataObject
||--                h,
                h asa DynamicDataObject,
                {AMFXmlDocument xml},
                null
            }

        {TestSuite "structures",
            {round-trip-tests "AMF3", xs},
            {round-trip-tests "AMF0", xs-amf0,
                test-one = test-one-amf0},
            || tests refs by duplicating every structure test
            {round-trip-tests "AMF3 refs",
                {Array xs2}}
        }
    },    
    || messages
    || --------------------
    {TestSuite "messages",
        {test-case "envelope",
            def args = {Array 1, 2}
            def header =
                {AMFHeader "k", false, "x"}
            def body =
                {AMFBody
                    target-uri = "null",
                    response-uri = "/1234",
                    length = AMF0Serializer.UNKNOWN_CONTENT_LENGTH,
                    args}
            def envelope = {AMFEnvelope}
            {envelope.add-body body}
            {envelope.add-header header}
            def bytes = {envelope.serialize}
            def result = {AMFEnvelope.deserialize {ByteArrayInputStream bytes}}
            def eq? = {test-compare envelope, result}
            {TestCondition.assert
                message = {hex-encode bytes},
                eq?}
        },
        {value
            def ack = {AcknowledgeMessage}
            set ack.correlation-id = "correlation-id"
            set ack.message-id = "message-id"
            set ack.client-id = "client-id"
            
            def asc = {AsyncMessage}
            set asc.correlation-id = "correlation-id"
            set asc.message-id = "message-id"
            set asc.client-id = "client-id"
            
            def err = {ErrorMessage}
            set err.fault-code = "Test"
            set err.fault-string = "error"
            
            def cmd = {CommandMessage}
            set cmd.operation = CommandMessage.CLIENT_PING_OPERATION
            set cmd.headers[CommandMessage.MESSAGING_VERSION] = 1.0
            set cmd.headers[CommandMessage.NEEDS_CONFIG_HEADER] = true
            
            def rmt = {RemotingMessage}
            set rmt.operation = "OP"
            set rmt.destination = "DEST"
            set rmt.source = "SRC"
            set rmt.body = {Array 1, 2}

            || Externalizable "SmallMessages"
            || - DSK
            def ackx = {AcknowledgeMessageExt} 
            set ackx.correlation-id = "correlation-id"
            set ackx.message-id = "message-id"
            set ackx.client-id = "client-id"
            
            def ascx = {AsyncMessageExt}
            set ascx.correlation-id = "correlation-id"
            set ascx.message-id = "message-id"
            set ascx.client-id = "client-id"
            
            def cmdx = {CommandMessageExt}
            set cmdx.operation = CommandMessage.CLIENT_PING_OPERATION
            set cmdx.headers[CommandMessage.MESSAGING_VERSION] = 1.0
            set cmdx.headers[CommandMessage.NEEDS_CONFIG_HEADER] = true
            
            def xs =
                {Array
                    ack,
                    asc,
                    err,
                    cmd,
                    rmt,
                    ackx,
                    ascx,
                    cmdx}
            {round-trip-tests "messages", xs}
        }
    }
}